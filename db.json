{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":1,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":1,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":1,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"7854d7abd255d7c343ab2ea9e43a0acf2e5893f8","modified":1606405431430},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1603558251964},{"_id":"source/CNAME","hash":"334389048b872a533002b34d73f8c29fd09efc50","modified":1603558251964},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1603558251996},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1603558251996},{"_id":"source/archive/index.md","hash":"279ff19668395f5c6b26417da99d2c1f3ecd5886","modified":1603558251969},{"_id":"source/_posts/Active_Jetbrains.md","hash":"c21cda54107788d08725537f4fe8951d981b611c","modified":1603558251964},{"_id":"source/_posts/Api_Generator_introduction.md","hash":"8b511d006197bc430627d5ef404a613f998d7e14","modified":1608735736647},{"_id":"source/_posts/Build_shadowsocks_with_VPS.md","hash":"c839f726df9db44f896cb61845f537fa02fbabd1","modified":1608735736648},{"_id":"source/_posts/IDEA_hot_keys.md","hash":"4697c326368de5ef0896c35ac84c84eba9b39ef2","modified":1608735736649},{"_id":"source/_posts/Implement_Kanban.md","hash":"1bf8b1d8458aa63df6e2b13239360be30fe7f1bc","modified":1608735736649},{"_id":"source/_posts/Install_Jenkins.md","hash":"b576e2a4543d6ffe830d6c7bd262db2c1d55a0f4","modified":1608735736650},{"_id":"source/_posts/Install_Nginx_for_ Raspbian.md","hash":"44de78027a5e65880538ff64fbc1480a4adc0d0d","modified":1608735736651},{"_id":"source/_posts/Install_Vim_for_Raspbian.md","hash":"6f86be25703f36fda62ed5e2e987875fc5c0a74a","modified":1608735736653},{"_id":"source/_posts/Java_NIO_Buffer.md","hash":"b7979fb75989357146dcc7425e99c735269afcac","modified":1608735736654},{"_id":"source/_posts/Install_Raspbian_for_Raspberry_Pi.md","hash":"691359f52c263532abe2aee68be5c14f08e9147a","modified":1608735736652},{"_id":"source/_posts/Java_NIO_Channel.md","hash":"6cec2a60563eaab19fb6d1015376447f7d2b616c","modified":1608735736655},{"_id":"source/_posts/Java_NIO_Tutorial.md","hash":"69fea6042b549475e0cac4be909829c76d7304f5","modified":1608735736657},{"_id":"source/_posts/Linux_command.md","hash":"71e796d711e48d89662cf736a28683e1b78fd7f3","modified":1608735736657},{"_id":"source/_posts/Java_NIO_Overview.md","hash":"a5d82c463ecc0abdbc62a2f7983874c25daa5d26","modified":1608735736656},{"_id":"source/_posts/M7268打印机操作手册.md","hash":"f560131cd9c282e0eb61675ee84940514f9b6e52","modified":1608735736658},{"_id":"source/_posts/Manage_blog.md","hash":"dc08205f1401cbbf0dc1a2ef757473aac965d96a","modified":1608735736659},{"_id":"source/_posts/Microservice_introduction.md","hash":"d34d13dc6e73327614d5a8fda31f57ed19de1c1b","modified":1608735736659},{"_id":"source/_posts/Practical_Vim.md","hash":"abc2b17e03703aa809e48689be539b8bb6fb4c96","modified":1608735736660},{"_id":"source/_posts/Traversal_Binary_Tree.md","hash":"b10b9c12ca27c6e8682603ff3e7bc3dac3b87391","modified":1608735736662},{"_id":"source/_posts/Tmux_Introduction.md","hash":"fdfa71e7bdf0266e3e7b81a3906cdbbd317903bb","modified":1608735736661},{"_id":"source/_posts/Use_Python.md","hash":"78b15348138b6f9f49cf5bc856ff4ddb91f0447f","modified":1608735736664},{"_id":"source/_posts/Use_neovim_as_python_IDE.md","hash":"ff7510f9927e17bb973849637e61c2d89bc29f36","modified":1608736507867},{"_id":"source/_posts/Use_Redis_Implement_Distributed_Lock.md","hash":"2311ee20078905a27bedeb561b8b28c16ff82755","modified":1608735736665},{"_id":"source/_posts/Understand_RESTful_API.md","hash":"6b5e8bb02e8cf24f60b99123b187317659effd24","modified":1608735736663},{"_id":"source/_posts/config_manjaro.md","hash":"6691e0a951e557f7a224f21f8e8b91451ba88505","modified":1608735736667},{"_id":"source/_posts/flee_GFW.md","hash":"c5af736a1ea98a40b087f1dc7eebe61c14d16a06","modified":1608735736668},{"_id":"source/_posts/YApi_Introduction.md","hash":"ac9f59cd9a73d9fd2b0c0be102eef6f0036b3710","modified":1608735736666},{"_id":"source/_posts/install_zsh.md","hash":"d1980210c900dc427f72dd4fbed116ee4eb87962","modified":1608735736668},{"_id":"source/_posts/install_manjaro_on_raspberry_pi4b.md","hash":"033b071f28ad3b5c8a2a1ed169735ad0c34b6740","modified":1603558251968},{"_id":"source/_posts/phddns_for_raspberrypi.md","hash":"a6a8be3f22d0cab359dc9bfa1ab46e0375a876de","modified":1608735736669},{"_id":"source/_posts/understand_shell.md","hash":"cbf791005d82b9fe3ab510a590c829fa5eaf955e","modified":1608735736670},{"_id":"source/_posts/zookeeper_introduction.md","hash":"dd83dd4a4f89fe727bc465dad7041be2268b116a","modified":1608735736670},{"_id":"source/tags/index.md","hash":"9d558ce28d0d44c3463517088689bbca44bbb364","modified":1603558251996},{"_id":"source/_posts/vim_config_for_colemak.md","hash":"0f65941ad170f03ac1eb31d43a3cc730eda8664b","modified":1606405500726},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1603558251992},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1603558251996},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1603558251997},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1603558251997},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1603558251998},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1603558252000},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1603558252000},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1603558252001},{"_id":"themes/beantech/layout/layout.ejs","hash":"f29a7214b7b166da21c3dace09cd494ebebce250","modified":1603558252001},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1603558252001},{"_id":"themes/beantech/layout/post.ejs","hash":"fd0acbf1fb20479ee4a62ff1a7c5297bb192bd79","modified":1603558252001},{"_id":"themes/beantech/layout/tags.ejs","hash":"e141fd9651d8199e252678ff37d0f8a24859f124","modified":1603558252001},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1603558251970},{"_id":"themes/beantech/layout/_partial/after_footer.ejs","hash":"fc5a261ac7420e504ea99845390289d2743306ca","modified":1603558251998},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"a964ac6e3be22644a4ac454b94b3bd26552222e0","modified":1603558251998},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"3542d15bdf73aa59f05f566b7ecd2255e83ee370","modified":1603558251998},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"aafb744601042f0270d2e6595129ac8a73ad2608","modified":1603558251998},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1603558251999},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1603558251999},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1603558251999},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1603558251999},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1603558252000},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1603558252000},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1603558252000},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1603558251999},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1603558251999},{"_id":"themes/beantech/layout/_widget/search.ejs","hash":"b1593a69e4fe3480cfdb8ab4fe5ce8a4cd9c337c","modified":1603558252000},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1603558252000},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1603558252002},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1603558252002},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1603558252002},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1603558252011},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1603558252020},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1603558252021},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1603558252021},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1603558252021},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1603558252021},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1603558252022},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1603558252023},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1603558252024},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1603558252023},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1603558252023},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1603558252024},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1603558252024},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1603558252026},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1603558252026},{"_id":"themes/beantech/source/js/search.js","hash":"de78c74157e173fb1bfdebf28cd330772410a1fa","modified":1603558252027},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1603558252027},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1603558252027},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1603558251976},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1603558251993},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1603558252011},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1603558252022},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1603558252024},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1603558252026},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1603558251975},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1603558252003},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1603558252021},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1603558252021},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1603558251991},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1603558251994},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1603558251995},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1603558252025},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1603558251974},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1603558251990},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1603558251987},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1603558251985},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1603558251981},{"_id":"public/post-sitemap.xml","hash":"e9759c1e7245f6e0107e45d70096b6d526b54d4f","modified":1608736585945},{"_id":"public/page-sitemap.xml","hash":"a23603d4dc7b1ca1652348377f7aae4778fe4de6","modified":1608736585945},{"_id":"public/tag-sitemap.xml","hash":"40c84901c1144df972260b8097235991d84a94bb","modified":1608736586085},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1608736586086},{"_id":"public/sitemap.xml","hash":"420632b209f630f999f16264ba0907515fb7fbc5","modified":1608736586207},{"_id":"public/search.xml","hash":"ea538bde85422dde779b0bc51163cb37f3eb1d13","modified":1608736586207},{"_id":"public/404.html","hash":"a5c9fa56e02c495b39558bcb8e1db67d787521be","modified":1608736586423},{"_id":"public/2019/03/24/Java_NIO_Buffer/index.html","hash":"97d1cf9249e8c249eed97cde514c471ffd5c9066","modified":1608736586423},{"_id":"public/archive/index.html","hash":"0df9fdb81f6ba59b637a99e6b2c635ed8d695509","modified":1608736586684},{"_id":"public/tags/index.html","hash":"2bb138370f7cb730019b77d17e783890177befff","modified":1608736586685},{"_id":"public/archives/index.html","hash":"f53627040e49a557ae78cc3247830dad49f70134","modified":1608736586882},{"_id":"public/archives/archives/2/index.html","hash":"64d99f0462f7c7d32c0b2e2c1e746a98bc40a7d8","modified":1608736586883},{"_id":"public/archives/2019/index.html","hash":"451a52adf70f1862284f5f20d13a815896900377","modified":1608736586890},{"_id":"public/archives/2019/archives/2/index.html","hash":"810002ff1b88042dd4e6b2a17a1031924f6ac06b","modified":1608736586890},{"_id":"public/archives/2019/03/index.html","hash":"32d91a876b58c4215797c6c2ec2beacc90a47230","modified":1608736586890},{"_id":"public/index.html","hash":"ec004e392afeb82fed7448a23aa871b5323ce876","modified":1608736586890},{"_id":"public/archives/2/index.html","hash":"c54eb29b488a4be6ef9ca5e7f328d7dd07f782d9","modified":1608736586891},{"_id":"public/tags/开发工具/index.html","hash":"0ea07f24c1a1a3115490ad6ab83f54be9ca02590","modified":1608736586891},{"_id":"public/tags/网络工具/index.html","hash":"a55de4042e53eb09243c9ab6d62e470d4a3011e6","modified":1608736586891},{"_id":"public/tags/持续交付/index.html","hash":"3812ed83b25efad52e7bd146c26a247224992e9b","modified":1608736586891},{"_id":"public/tags/树莓派/index.html","hash":"0b6825037f8b4ab46fdc9fed61624f1becd4e4bf","modified":1608736586891},{"_id":"public/tags/NIO/index.html","hash":"7a27b9fbfbd12085faa07e6aac61e82b3f675ed1","modified":1608736586891},{"_id":"public/tags/Linux/index.html","hash":"45faac510146d7606a97b7aefed8a7063023d4b2","modified":1608736586891},{"_id":"public/tags/建站/index.html","hash":"92cfbcfc4f11a4757f20f8bc077e79cc48308fd1","modified":1608736586891},{"_id":"public/tags/分布式/index.html","hash":"5b9372d0345442b06c4772592c4cb717168e8230","modified":1608736586891},{"_id":"public/tags/Vim/index.html","hash":"6be893243451a1e7b856237858ca3aaa768771ec","modified":1608736586891},{"_id":"public/tags/tmux/index.html","hash":"c325ce904da5cdbde0f460144061b4e4dee75f2c","modified":1608736586891},{"_id":"public/tags/内网穿透/index.html","hash":"64a089ae6857c294f10441c4d946cb63acae184f","modified":1608736586891},{"_id":"public/tags/中间件/index.html","hash":"6fc2ad98eb9e6ff514a966ac6e1ed2754423bedc","modified":1608736586891},{"_id":"public/tags/vim/index.html","hash":"6256a93d000858d14f273429fcaae505545ac9f2","modified":1608736586891},{"_id":"public/2020/12/23/M7268打印机操作手册/index.html","hash":"1b3063db928db4cc6d761a87c224bf9e64c2f060","modified":1608736586905},{"_id":"public/2020/10/24/Manage_blog/index.html","hash":"f9897903c30e56781bf08533790b9aa4851980d0","modified":1608736586906},{"_id":"public/2020/10/01/install_manjaro_on_raspberry_pi4b/index.html","hash":"204dca9077dda037ffa901f9a0c5f6d698c8102f","modified":1608736586906},{"_id":"public/2020/09/29/vim_config_for_colemak/index.html","hash":"37b17701b7263db4137e6216d5efc765901c3e3d","modified":1608736586906},{"_id":"public/2020/06/06/Use_neovim_as_python_IDE/index.html","hash":"5ffaacc30870901d57b420071d4ca34b298881a6","modified":1608736586906},{"_id":"public/2020/05/31/config_manjaro/index.html","hash":"90e72b99ebd28d47317893754008e8fc17536ee7","modified":1608736586906},{"_id":"public/2020/05/14/Use_Python/index.html","hash":"70d8310b3565f8668a307e7f8582511b45736aaf","modified":1608736586906},{"_id":"public/2020/05/08/Traversal_Binary_Tree/index.html","hash":"47f2aec740b783df161f309f0c0e7317c6e113c5","modified":1608736586906},{"_id":"public/2020/02/17/Active_Jetbrains/index.html","hash":"7d3cb037fbea9c941fcd124aae7c54f3dbf044f1","modified":1608736586906},{"_id":"public/2019/10/28/Api_Generator_introduction/index.html","hash":"02438f7e1b0e38932a273afb2edc3d1981cfd2b1","modified":1608736586907},{"_id":"public/2019/05/12/Understand_RESTful_API/index.html","hash":"45b44dc086fea26a13e6a1138bb740edb6205209","modified":1608736586907},{"_id":"public/2019/09/28/YApi_Introduction/index.html","hash":"b12af93c02671f39d0ae7fbf43fb3020b5a6c334","modified":1608736586907},{"_id":"public/2019/04/01/Use_Redis_Implement_Distributed_Lock/index.html","hash":"65548494571f1bbd252de3ee8b4dfec491445bf1","modified":1608736586907},{"_id":"public/2019/03/20/Java_NIO_Channel/index.html","hash":"86f5aa7de24d1e0730df5122d617d519a9c09352","modified":1608736586907},{"_id":"public/2019/03/09/Java_NIO_Tutorial/index.html","hash":"b44558ee1267aa5865ee73f1bb4b45352c050cb6","modified":1608736586907},{"_id":"public/2019/03/10/Java_NIO_Overview/index.html","hash":"fc77a36e20f13d9427a600071bef27bb6b6c1bf1","modified":1608736586907},{"_id":"public/2019/02/24/zookeeper_introduction/index.html","hash":"e1996b327651042b4bd2b52785cf5ab8a5503ba6","modified":1608736586907},{"_id":"public/2019/02/18/Install_Raspbian_for_Raspberry_Pi/index.html","hash":"17c23d9eb3a0d027d5ef12c2241e9bc4f1452b5f","modified":1608736586907},{"_id":"public/2019/02/03/Tmux_Introduction/index.html","hash":"16dcb977b59501b996508dea49f6520ed457debe","modified":1608736586907},{"_id":"public/2019/01/20/Microservice_introduction/index.html","hash":"1734c7b06b0e04f35e1a3f2ec14b6f5dfffeb9b3","modified":1608736586907},{"_id":"public/2018/11/02/flee_GFW/index.html","hash":"85062afe401ab6cc52dc138c6f155a73cb5d5db4","modified":1608736586907},{"_id":"public/2018/10/15/phddns_for_raspberrypi/index.html","hash":"9c9afb8614b81a3e869a8bb04ce10308fa50b6f3","modified":1608736586907},{"_id":"public/2018/10/01/Install_Vim_for_Raspbian/index.html","hash":"78c76ce10a43efcfe5d7d004c25c480fdcab1847","modified":1608736586907},{"_id":"public/2018/09/26/Build_shadowsocks_with_VPS/index.html","hash":"d5db0aab0999c7e825dc2b44000d50a89f5e1c27","modified":1608736586907},{"_id":"public/2018/09/25/Practical_Vim/index.html","hash":"d6922d71d86440664bdbd0e0f65fe82fa48474d4","modified":1608736586907},{"_id":"public/2018/09/15/IDEA_hot_keys/index.html","hash":"0541844fa9e93e0cc71cb55dc6036d0d0a65ce0f","modified":1608736586907},{"_id":"public/2018/09/11/Install_Nginx_for_ Raspbian/index.html","hash":"31b5e9f778f0b3e2dfb2caea7ce9a3893668aaba","modified":1608736586908},{"_id":"public/2018/08/28/Linux_command/index.html","hash":"f28cd30a1168a57d5b0b3afc6c5563561c028e66","modified":1608736586908},{"_id":"public/2018/06/23/Implement_Kanban/index.html","hash":"34f0c9bb6206e6cad685ed93d87fbfe5aea0f7ad","modified":1608736586908},{"_id":"public/2018/02/14/understand_shell/index.html","hash":"a63abf6e68a65ab4872a0f6bb7ecf2f7c7b6489d","modified":1608736586908},{"_id":"public/2018/03/31/Install_Jenkins/index.html","hash":"9ac7dafdc4933c46e5871d41d71032ec4f81da43","modified":1608736586908},{"_id":"public/2018/02/06/install_zsh/index.html","hash":"9f9c741ee1baa0d30ab5171d36129e8db3415469","modified":1608736586908},{"_id":"public/archives/archives/3/index.html","hash":"b2279771282f9677cf335ec53f1892e271e81719","modified":1608736586908},{"_id":"public/archives/archives/4/index.html","hash":"a2186e9c709484552100efcb1f9797f16049f730","modified":1608736586908},{"_id":"public/archives/2018/index.html","hash":"83ae6c688433cb0bbd698724ebb66e84d22c23d3","modified":1608736586908},{"_id":"public/archives/2018/02/index.html","hash":"bdcb3b06d0ee3e558ddfe575b7992e0f521efc20","modified":1608736586908},{"_id":"public/archives/2018/03/index.html","hash":"bf6255b636a14c8ddbdb3b5b906cee03d02166ae","modified":1608736586908},{"_id":"public/archives/2018/archives/2/index.html","hash":"0e078978d15b9e19a022a5c5d2055ff44bedb06e","modified":1608736586908},{"_id":"public/archives/2018/06/index.html","hash":"b6d4df5c43cc9b366a0a1f24376512f803439f71","modified":1608736586908},{"_id":"public/archives/2018/08/index.html","hash":"f43067e3af9809e3b93bbf7765e66c4e1c09cf52","modified":1608736586908},{"_id":"public/archives/2018/09/index.html","hash":"7e3476ecab18ec1121221b03e041333980223ef6","modified":1608736586908},{"_id":"public/archives/2018/10/index.html","hash":"a4b570602603132d83d9bf1c812773027f311a5d","modified":1608736586909},{"_id":"public/archives/2018/11/index.html","hash":"81b1ffe07edd914e23ab791a889894a222820fc2","modified":1608736586909},{"_id":"public/archives/2019/01/index.html","hash":"e30016da37ccb6e21e1b1a886353eda0c9f0bbe4","modified":1608736586909},{"_id":"public/archives/2019/02/index.html","hash":"eb0c91219023a6d27f56c72e3b08340b2209d1f4","modified":1608736586909},{"_id":"public/archives/2019/04/index.html","hash":"bae892f84d7dd9cdf0e30b5ada67c0f6fbbcc02f","modified":1608736586909},{"_id":"public/archives/2019/05/index.html","hash":"34febfcae75b8454077d14bfea3f0a6b2f985dfb","modified":1608736586909},{"_id":"public/archives/2019/09/index.html","hash":"a9d740a93410fb86882b9e0ccf18eeede6944932","modified":1608736586909},{"_id":"public/archives/2019/10/index.html","hash":"86884dc50d162ed50caf774c6a47793a317eff94","modified":1608736586909},{"_id":"public/archives/2020/index.html","hash":"4b2aeaf5ca13b6a09a8ae71027e641a18b397d5a","modified":1608736586909},{"_id":"public/archives/2020/02/index.html","hash":"591a540718d287d993d4c3d7409c8f525cae5acf","modified":1608736586909},{"_id":"public/archives/2020/05/index.html","hash":"5a83a3634598897685a1a1ab1a37c51874e07e58","modified":1608736586909},{"_id":"public/archives/2020/06/index.html","hash":"5d0bdf3691134af2d133aec02fd0fd36829ccdfa","modified":1608736586909},{"_id":"public/archives/2020/09/index.html","hash":"de27aa11d95368e6a410ab9f2b4bd11f72bb262c","modified":1608736586910},{"_id":"public/archives/2020/10/index.html","hash":"6c88019e76819dc4c9f9b8a55f6f964e142b4135","modified":1608736586910},{"_id":"public/archives/2020/12/index.html","hash":"d8492880aeb2e33f3da415c422d16d13259f2293","modified":1608736586910},{"_id":"public/archives/3/index.html","hash":"1dbc62cbc77110bbdfb9c4d9e458cf8aa72dc430","modified":1608736586910},{"_id":"public/archives/4/index.html","hash":"2711ad39717a5da8329935b7598a0dca05b46e59","modified":1608736586910},{"_id":"public/tags/Jetbrains/index.html","hash":"24b302d7637c8c496d20c2419629b5f1d87b49cd","modified":1608736586910},{"_id":"public/tags/YApi/index.html","hash":"7dc4773c5847618d867c50e886fcd173e71c89c9","modified":1608736586910},{"_id":"public/tags/Jenkins/index.html","hash":"d58958819af887f8a1857f68a8cda08353013a0b","modified":1608736586910},{"_id":"public/tags/敏捷/index.html","hash":"81bfa0c653d527f89db41f86e9a1dbfa98d838fe","modified":1608736586910},{"_id":"public/tags/博客/index.html","hash":"2b4c22f51561e5e6f7c715dc7f5df2303171a278","modified":1608736586910},{"_id":"public/tags/算法/index.html","hash":"204202e2316b8b35546683123cd734eb17892017","modified":1608736586910},{"_id":"public/tags/Neovim/index.html","hash":"981ff2b3c292756942c9bd5e9c67a88fb4c4cd8c","modified":1608736586910},{"_id":"public/tags/Python/index.html","hash":"b3461d9746046427b338bef8accc8c6802cd0897","modified":1608736586910},{"_id":"public/tags/Redis/index.html","hash":"ea8a55db7545cac334dbbb766f735c0a23fadb78","modified":1608736586910},{"_id":"public/tags/RESTful/index.html","hash":"f2b1884b7c0997b53d1ef35088a1b66a3ce73521","modified":1608736586910},{"_id":"public/tags/mirrors/index.html","hash":"6decb6d76a143b01cb0b18e6afd06edca6d29bec","modified":1608736586910},{"_id":"public/tags/Manjaro/index.html","hash":"cc33a9d28e2d558d1f219fd72271104ef045fd7d","modified":1608736586910},{"_id":"public/tags/Shell/index.html","hash":"eb1b048b736dbdb81ad3235eed7008a761b1a3e8","modified":1608736586910},{"_id":"public/tags/manjaro/index.html","hash":"0d59623de04ae1bfec226f0667858d261d5ca7e8","modified":1608736586910},{"_id":"public/tags/colemak/index.html","hash":"b3d95e52a560877cd5df431e7642b7b350441ad3","modified":1608736586911},{"_id":"public/CNAME","hash":"334389048b872a533002b34d73f8c29fd09efc50","modified":1608736586917},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1608736586917},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1608736586917},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1608736586917},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1608736586917},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1608736586917},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1608736586917},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1608736586917},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1608736587155},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1608736587157},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1608736587168},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1608736587168},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1608736587168},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1608736587168},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1608736587168},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1608736587168},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1608736587168},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1608736587168},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1608736587168},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1608736587168},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1608736587168},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1608736587168},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1608736587169},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1608736587169},{"_id":"public/js/search.js","hash":"de78c74157e173fb1bfdebf28cd330772410a1fa","modified":1608736587169},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1608736587169},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1608736587169},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1608736587169},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1608736587169},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1608736587169},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1608736587169},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1608736587169},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1608736587169},{"_id":"public/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1608736587175},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1608736587175},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1608736587178},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1608736587181},{"_id":"public/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1608736587184},{"_id":"public/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1608736587201},{"_id":"public/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1608736587202},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1608736587204},{"_id":"public/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1608736587205},{"_id":"public/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1608736587206}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2020-10-24T16:50:51.964Z","updated":"2020-10-24T16:50:51.964Z","path":"404.html","title":"","comments":1,"_id":"ckj1k84oy0000s2b9uspickol","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2020-10-24T16:50:51.969Z","path":"archive/index.html","_id":"ckj1k84q80001s2b96i7zhzdr","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2020-10-24T16:50:51.996Z","updated":"2020-10-24T16:50:51.996Z","path":"tags/index.html","comments":1,"_id":"ckj1k84qd0003s2b9obom5stc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Jetbrains产品激活教程","date":"2020-02-16T16:00:00.000Z","catalog":false,"_content":"\n### 获取专属激活码\n\nhttps://zhile.io/custom/license\n*注意：需要Github授权登录，Github账号注册需要超过7天，将使用你的Github用户名作为License name*\n\n### 下载激活工具\n\n地址：https://xclient.info/s/intellij-idea.html\n找到激活工具进行下载，大小不超过2M\n\n### 配置IntelliJ IDEA\n\n1.将jetbrains-agent.jar文件复制到 /Applications/IntelliJ IDEA.app/Contents/bin/ 目录中；\n2.用编辑器打开 /Applications/IntelliJ IDEA.app/Contents/bin/idea.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；\n\n### 配置DataGrip\n\n1.将jetbrains-agent.jar文件复制到 /Applications/DataGrip.app/Contents/bin/ 目录中；\n2.用编辑器打开 /Applications/DataGrip.app/Contents/bin/datagrip.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；","source":"_posts/Active_Jetbrains.md","raw":"---\ntitle: Jetbrains产品激活教程\ndate: 2020-02-17\ncatalog: false\ntags:\n- Jetbrains\n- 开发工具\n---\n\n### 获取专属激活码\n\nhttps://zhile.io/custom/license\n*注意：需要Github授权登录，Github账号注册需要超过7天，将使用你的Github用户名作为License name*\n\n### 下载激活工具\n\n地址：https://xclient.info/s/intellij-idea.html\n找到激活工具进行下载，大小不超过2M\n\n### 配置IntelliJ IDEA\n\n1.将jetbrains-agent.jar文件复制到 /Applications/IntelliJ IDEA.app/Contents/bin/ 目录中；\n2.用编辑器打开 /Applications/IntelliJ IDEA.app/Contents/bin/idea.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；\n\n### 配置DataGrip\n\n1.将jetbrains-agent.jar文件复制到 /Applications/DataGrip.app/Contents/bin/ 目录中；\n2.用编辑器打开 /Applications/DataGrip.app/Contents/bin/datagrip.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；","slug":"Active_Jetbrains","published":1,"updated":"2020-10-24T16:50:51.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84q90002s2b9o3kj355q","content":"<h3 id=\"获取专属激活码\">获取专属激活码</h3>\n<p><a href=\"https://zhile.io/custom/license\" target=\"_blank\" rel=\"noopener\">https://zhile.io/custom/license</a><br>\n<em>注意：需要Github授权登录，Github账号注册需要超过7天，将使用你的Github用户名作为License name</em></p>\n<h3 id=\"下载激活工具\">下载激活工具</h3>\n<p>地址：<a href=\"https://xclient.info/s/intellij-idea.html\" target=\"_blank\" rel=\"noopener\">https://xclient.info/s/intellij-idea.html</a><br>\n找到激活工具进行下载，大小不超过2M</p>\n<h3 id=\"配置intellij-idea\">配置IntelliJ IDEA</h3>\n<p>1.将jetbrains-agent.jar文件复制到 /Applications/IntelliJ IDEA.app/Contents/bin/ 目录中；<br>\n2.用编辑器打开 /Applications/IntelliJ IDEA.app/Contents/bin/idea.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p>\n<h3 id=\"配置datagrip\">配置DataGrip</h3>\n<p>1.将jetbrains-agent.jar文件复制到 /Applications/DataGrip.app/Contents/bin/ 目录中；<br>\n2.用编辑器打开 /Applications/DataGrip.app/Contents/bin/datagrip.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3>获取专属激活码</h3>\n<p><a href=\"https://zhile.io/custom/license\" target=\"_blank\" rel=\"noopener\">https://zhile.io/custom/license</a><br>\n<em>注意：需要Github授权登录，Github账号注册需要超过7天，将使用你的Github用户名作为License name</em></p>\n<h3>下载激活工具</h3>\n<p>地址：<a href=\"https://xclient.info/s/intellij-idea.html\" target=\"_blank\" rel=\"noopener\">https://xclient.info/s/intellij-idea.html</a><br>\n找到激活工具进行下载，大小不超过2M</p>\n<h3>配置IntelliJ IDEA</h3>\n<p>1.将jetbrains-agent.jar文件复制到 /Applications/IntelliJ IDEA.app/Contents/bin/ 目录中；<br>\n2.用编辑器打开 /Applications/IntelliJ IDEA.app/Contents/bin/idea.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p>\n<h3>配置DataGrip</h3>\n<p>1.将jetbrains-agent.jar文件复制到 /Applications/DataGrip.app/Contents/bin/ 目录中；<br>\n2.用编辑器打开 /Applications/DataGrip.app/Contents/bin/datagrip.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p>\n"},{"title":"Api Generator使用教程","date":"2019-10-27T16:00:00.000Z","catalog":true,"_content":"\n>前后分离开发模式下，接口文档是否靠谱直接影响开发协作效率，因此文档的时效性和准确性至关重要，但是，文档的维护又是一项琐碎耗时的工作，手工录入不仅麻烦，还存在出错的风险，因此，如果能有自动生成文档的方法，将极大地提升开发效率。\n\n# 前言\n\n一般来讲，接口文档由后端同学维护，而Java是目前主流的后端语言，与之对应的，IDEA是最流行的集成开发环境。基于插件机制，IDEA拥有极强的可扩展性，因此，思路是开发一个IDEA插件，通过插件让手中的IDEA拥有自动生成文档的能力。\n\t\n其实，jetbrains插件仓库里已有几款插件可以帮助生成接口文档，但是没有一款插件令我满意，要么无法解析复杂的类结构，要么就是生成的文档格式差强人意，因此，我在借鉴他们的设计的基础上，开发了这款文档生成插件，我将它取名为《Api Generator》。\n\n# 安装插件\n\nPreferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE\n\n![img](http://forgus.vicp.io/resources/images/install_api_generator.png)\n\n# 开始使用\n\n## 上传REST接口\n\n选择一个Controller类，将光标定位到方法区（方法名或者方法注释），点击鼠标右键，在弹出的菜单项里选择“Generate Api”。如图所示：\n\n![img](http://forgus.vicp.io/resources/images/upload_yapi.png)\n\n首次使用会弹窗提示输入必要信息：\n\n![img](http://forgus.vicp.io/resources/images/yapi_server_url.png)\n\n首先输入YApi服务器部署地址，接着输入项目token：\n\n![img](http://forgus.vicp.io/resources/images/yapi_token.png)\n\n点击OK，则插件会自动配置，然后自动生成文档并上传到YApi。上传成功后，IDE右下角会弹出提示框：\n\n![img](http://forgus.vicp.io/resources/images/upload_yapi_success.png)\n\n上传效果如图：\n\n![img](http://forgus.vicp.io/resources/images/yapi_demo.png)\n\n### 解析规则\n\n#### 入参解析\n\n![img](http://forgus.vicp.io/resources/images/rest_param_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/rest_param_resolve_result.png)\n\n#### 响应解析\n\n![img](http://forgus.vicp.io/resources/images/rest_response_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/rest_response_resolve_result.png)\n\n插件默认保存分类为api_generator，可以在配置项中修改默认分类：\n\nPreferences → Other Settings → Api Generator Setting → YApi Setting → Default save category，如图所示：\n\n![img](http://forgus.vicp.io/resources/images/save_directory.png)\n\n如果勾选了选项“Classify API automatically”，则插件会自动从类注释里抽取分类名，自动创建并保存。效果如下：\n\n![img](http://forgus.vicp.io/resources/images/classify_auto.png)\n\n![img](http://forgus.vicp.io/resources/images/category_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/category_resolve_result.png)\n\n备注:每个项目只需配置一次，插件会自动持久化配置项，下次打开无需再次配置。\n\n### token获取方法\n登录yapi，选择对应项目，找到设置→ token配置，点击复制即可。\n\n![img](http://forgus.vicp.io/resources/images/get_token.png)\n## 生成接口文档\n\n如果在接口类中进行文档生成操作，则插件会将文档以markdown的形式输出，默认保存在当前项目的target目录下，如图：\n\n![img](http://forgus.vicp.io/resources/images/api_resolve.png)\n\n生成的接口文档效果图：\n\n![img](http://forgus.vicp.io/resources/images/api_resolve_result.png)\n## 生成POJO文档\n\n操作同上，步骤略。\n\n# 插件设置\n自定义配置项： Preferences —> Other Settings —> Api Generator Setting  \n配置项|含义|详细解释\n---|---|---\nExclude Fields|过滤字段（多个字段以\",\"分隔）|该配置项功能类似JSONField，用于过滤不想被解析的字段，多用于排除二方包里的干扰字段\nSave Directory|markdown文档保存目录（绝对路径）|用于配置生成的markdown形式的接口文档的保存路径，默认保存在当前项目的target目录\nIndent Style|二级字段缩进前缀|生成的markdown文档是类似于json schema的字段表格，涉及类型是对象的字段，展示上做缩进处理，默认缩进前缀是“└”\nOverwrite exists docs|是否覆盖同名markdown文档|如果生成的markdown文件已存在，会弹框提示是否覆盖，勾选该选项，则直接覆盖不提示\nExtract filename from doc comments|是否从javadoc抽取文件名|生成的markdown文件默认是方法名，勾选该选项，将从注释里抽取文件名\nYApi server url|YApi部署服务器地址|内网部署的yapi平台的域名，如：http://yapi.xxx.com\nProject token|项目token|接口对应的yapi项目的token\nDefault save category|默认保存分类|插件生成的yapi文档保存位置，默认api_generator\nClassify API automatically|是否自动分类|勾选该选项后，生成文档时插件将从controller类注释里抽取模块名，并在yapi上自动创建对应分类保存接口\n\n# 后记\n\n笔者在开发这款插件之前，也是先用了一段时间别人写的插件，\n\n使用过的插件有：Yapiupload、idea-yapi、EasyYapi、RedsoftYapiUpload等。\n\n这些插件并不完美，或多或少存在一些问题，要么关键功能缺失，要么用户体验较差，以下是关键功能对比：\n\n| 插件              | 智能解析 | 无入侵 | markdown | 智能选中 | json5 | 常用注解 |\n| :---------------- | :------- | :----- | :------- | :------- | :---- | :------- |\n| Api Generator     | √        | √      | √        | √        | √     | √        |\n| EasyYapi          | √        | √      | √        | ✘        | ✘     | ✘        |\n| Yapiupload        | ✘        | ✘      | ✘        | ✘        | ✘     | ✘        |\n| idea-yapi         | ✘        | ✘      | ✘        | ✘        | ✘     | ✘        |\n| RedsoftYapiUpload | ✘        | ✘      | ✘        | ✘        | ✘     | √        |\n\n从上面可以看出，“Api Generator”是集大成者，因为在立项之初就参考了它们的设计，取其精华，去其糟粕。\n","source":"_posts/Api_Generator_introduction.md","raw":"---\ntitle: Api Generator使用教程\ndate: 2019-10-28\ncatalog: true\ntags:\n- YApi\n- 开发工具\n---\n\n>前后分离开发模式下，接口文档是否靠谱直接影响开发协作效率，因此文档的时效性和准确性至关重要，但是，文档的维护又是一项琐碎耗时的工作，手工录入不仅麻烦，还存在出错的风险，因此，如果能有自动生成文档的方法，将极大地提升开发效率。\n\n# 前言\n\n一般来讲，接口文档由后端同学维护，而Java是目前主流的后端语言，与之对应的，IDEA是最流行的集成开发环境。基于插件机制，IDEA拥有极强的可扩展性，因此，思路是开发一个IDEA插件，通过插件让手中的IDEA拥有自动生成文档的能力。\n\t\n其实，jetbrains插件仓库里已有几款插件可以帮助生成接口文档，但是没有一款插件令我满意，要么无法解析复杂的类结构，要么就是生成的文档格式差强人意，因此，我在借鉴他们的设计的基础上，开发了这款文档生成插件，我将它取名为《Api Generator》。\n\n# 安装插件\n\nPreferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE\n\n![img](http://forgus.vicp.io/resources/images/install_api_generator.png)\n\n# 开始使用\n\n## 上传REST接口\n\n选择一个Controller类，将光标定位到方法区（方法名或者方法注释），点击鼠标右键，在弹出的菜单项里选择“Generate Api”。如图所示：\n\n![img](http://forgus.vicp.io/resources/images/upload_yapi.png)\n\n首次使用会弹窗提示输入必要信息：\n\n![img](http://forgus.vicp.io/resources/images/yapi_server_url.png)\n\n首先输入YApi服务器部署地址，接着输入项目token：\n\n![img](http://forgus.vicp.io/resources/images/yapi_token.png)\n\n点击OK，则插件会自动配置，然后自动生成文档并上传到YApi。上传成功后，IDE右下角会弹出提示框：\n\n![img](http://forgus.vicp.io/resources/images/upload_yapi_success.png)\n\n上传效果如图：\n\n![img](http://forgus.vicp.io/resources/images/yapi_demo.png)\n\n### 解析规则\n\n#### 入参解析\n\n![img](http://forgus.vicp.io/resources/images/rest_param_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/rest_param_resolve_result.png)\n\n#### 响应解析\n\n![img](http://forgus.vicp.io/resources/images/rest_response_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/rest_response_resolve_result.png)\n\n插件默认保存分类为api_generator，可以在配置项中修改默认分类：\n\nPreferences → Other Settings → Api Generator Setting → YApi Setting → Default save category，如图所示：\n\n![img](http://forgus.vicp.io/resources/images/save_directory.png)\n\n如果勾选了选项“Classify API automatically”，则插件会自动从类注释里抽取分类名，自动创建并保存。效果如下：\n\n![img](http://forgus.vicp.io/resources/images/classify_auto.png)\n\n![img](http://forgus.vicp.io/resources/images/category_resolve.png)\n\n![img](http://forgus.vicp.io/resources/images/category_resolve_result.png)\n\n备注:每个项目只需配置一次，插件会自动持久化配置项，下次打开无需再次配置。\n\n### token获取方法\n登录yapi，选择对应项目，找到设置→ token配置，点击复制即可。\n\n![img](http://forgus.vicp.io/resources/images/get_token.png)\n## 生成接口文档\n\n如果在接口类中进行文档生成操作，则插件会将文档以markdown的形式输出，默认保存在当前项目的target目录下，如图：\n\n![img](http://forgus.vicp.io/resources/images/api_resolve.png)\n\n生成的接口文档效果图：\n\n![img](http://forgus.vicp.io/resources/images/api_resolve_result.png)\n## 生成POJO文档\n\n操作同上，步骤略。\n\n# 插件设置\n自定义配置项： Preferences —> Other Settings —> Api Generator Setting  \n配置项|含义|详细解释\n---|---|---\nExclude Fields|过滤字段（多个字段以\",\"分隔）|该配置项功能类似JSONField，用于过滤不想被解析的字段，多用于排除二方包里的干扰字段\nSave Directory|markdown文档保存目录（绝对路径）|用于配置生成的markdown形式的接口文档的保存路径，默认保存在当前项目的target目录\nIndent Style|二级字段缩进前缀|生成的markdown文档是类似于json schema的字段表格，涉及类型是对象的字段，展示上做缩进处理，默认缩进前缀是“└”\nOverwrite exists docs|是否覆盖同名markdown文档|如果生成的markdown文件已存在，会弹框提示是否覆盖，勾选该选项，则直接覆盖不提示\nExtract filename from doc comments|是否从javadoc抽取文件名|生成的markdown文件默认是方法名，勾选该选项，将从注释里抽取文件名\nYApi server url|YApi部署服务器地址|内网部署的yapi平台的域名，如：http://yapi.xxx.com\nProject token|项目token|接口对应的yapi项目的token\nDefault save category|默认保存分类|插件生成的yapi文档保存位置，默认api_generator\nClassify API automatically|是否自动分类|勾选该选项后，生成文档时插件将从controller类注释里抽取模块名，并在yapi上自动创建对应分类保存接口\n\n# 后记\n\n笔者在开发这款插件之前，也是先用了一段时间别人写的插件，\n\n使用过的插件有：Yapiupload、idea-yapi、EasyYapi、RedsoftYapiUpload等。\n\n这些插件并不完美，或多或少存在一些问题，要么关键功能缺失，要么用户体验较差，以下是关键功能对比：\n\n| 插件              | 智能解析 | 无入侵 | markdown | 智能选中 | json5 | 常用注解 |\n| :---------------- | :------- | :----- | :------- | :------- | :---- | :------- |\n| Api Generator     | √        | √      | √        | √        | √     | √        |\n| EasyYapi          | √        | √      | √        | ✘        | ✘     | ✘        |\n| Yapiupload        | ✘        | ✘      | ✘        | ✘        | ✘     | ✘        |\n| idea-yapi         | ✘        | ✘      | ✘        | ✘        | ✘     | ✘        |\n| RedsoftYapiUpload | ✘        | ✘      | ✘        | ✘        | ✘     | √        |\n\n从上面可以看出，“Api Generator”是集大成者，因为在立项之初就参考了它们的设计，取其精华，去其糟粕。\n","slug":"Api_Generator_introduction","published":1,"updated":"2020-12-23T15:02:16.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qe0004s2b920kb0wdc","content":"<blockquote>\n<p>前后分离开发模式下，接口文档是否靠谱直接影响开发协作效率，因此文档的时效性和准确性至关重要，但是，文档的维护又是一项琐碎耗时的工作，手工录入不仅麻烦，还存在出错的风险，因此，如果能有自动生成文档的方法，将极大地提升开发效率。</p>\n</blockquote>\n<h1 id=\"前言\">前言</h1>\n<p>一般来讲，接口文档由后端同学维护，而Java是目前主流的后端语言，与之对应的，IDEA是最流行的集成开发环境。基于插件机制，IDEA拥有极强的可扩展性，因此，思路是开发一个IDEA插件，通过插件让手中的IDEA拥有自动生成文档的能力。</p>\n<p>其实，jetbrains插件仓库里已有几款插件可以帮助生成接口文档，但是没有一款插件令我满意，要么无法解析复杂的类结构，要么就是生成的文档格式差强人意，因此，我在借鉴他们的设计的基础上，开发了这款文档生成插件，我将它取名为《Api Generator》。</p>\n<h1 id=\"安装插件\">安装插件</h1>\n<p>Preferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/install_api_generator.png\" alt=\"img\"></p>\n<h1 id=\"开始使用\">开始使用</h1>\n<h2 id=\"上传rest接口\">上传REST接口</h2>\n<p>选择一个Controller类，将光标定位到方法区（方法名或者方法注释），点击鼠标右键，在弹出的菜单项里选择“Generate Api”。如图所示：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/upload_yapi.png\" alt=\"img\"></p>\n<p>首次使用会弹窗提示输入必要信息：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_server_url.png\" alt=\"img\"></p>\n<p>首先输入YApi服务器部署地址，接着输入项目token：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_token.png\" alt=\"img\"></p>\n<p>点击OK，则插件会自动配置，然后自动生成文档并上传到YApi。上传成功后，IDE右下角会弹出提示框：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/upload_yapi_success.png\" alt=\"img\"></p>\n<p>上传效果如图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_demo.png\" alt=\"img\"></p>\n<h3 id=\"解析规则\">解析规则</h3>\n<h4 id=\"入参解析\">入参解析</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_param_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_param_resolve_result.png\" alt=\"img\"></p>\n<h4 id=\"响应解析\">响应解析</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_response_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_response_resolve_result.png\" alt=\"img\"></p>\n<p>插件默认保存分类为api_generator，可以在配置项中修改默认分类：</p>\n<p>Preferences → Other Settings → Api Generator Setting → YApi Setting → Default save category，如图所示：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/save_directory.png\" alt=\"img\"></p>\n<p>如果勾选了选项“Classify API automatically”，则插件会自动从类注释里抽取分类名，自动创建并保存。效果如下：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/classify_auto.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/category_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/category_resolve_result.png\" alt=\"img\"></p>\n<p>备注:每个项目只需配置一次，插件会自动持久化配置项，下次打开无需再次配置。</p>\n<h3 id=\"token获取方法\">token获取方法</h3>\n<p>登录yapi，选择对应项目，找到设置→ token配置，点击复制即可。</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/get_token.png\" alt=\"img\"></p>\n<h2 id=\"生成接口文档\">生成接口文档</h2>\n<p>如果在接口类中进行文档生成操作，则插件会将文档以markdown的形式输出，默认保存在当前项目的target目录下，如图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/api_resolve.png\" alt=\"img\"></p>\n<p>生成的接口文档效果图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/api_resolve_result.png\" alt=\"img\"></p>\n<h2 id=\"生成pojo文档\">生成POJO文档</h2>\n<p>操作同上，步骤略。</p>\n<h1 id=\"插件设置\">插件设置</h1>\n<p>自定义配置项： Preferences —&gt; Other Settings —&gt; Api Generator Setting</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>含义</th>\n<th>详细解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Exclude Fields</td>\n<td>过滤字段（多个字段以&quot;,&quot;分隔）</td>\n<td>该配置项功能类似JSONField，用于过滤不想被解析的字段，多用于排除二方包里的干扰字段</td>\n</tr>\n<tr>\n<td>Save Directory</td>\n<td>markdown文档保存目录（绝对路径）</td>\n<td>用于配置生成的markdown形式的接口文档的保存路径，默认保存在当前项目的target目录</td>\n</tr>\n<tr>\n<td>Indent Style</td>\n<td>二级字段缩进前缀</td>\n<td>生成的markdown文档是类似于json schema的字段表格，涉及类型是对象的字段，展示上做缩进处理，默认缩进前缀是“└”</td>\n</tr>\n<tr>\n<td>Overwrite exists docs</td>\n<td>是否覆盖同名markdown文档</td>\n<td>如果生成的markdown文件已存在，会弹框提示是否覆盖，勾选该选项，则直接覆盖不提示</td>\n</tr>\n<tr>\n<td>Extract filename from doc comments</td>\n<td>是否从javadoc抽取文件名</td>\n<td>生成的markdown文件默认是方法名，勾选该选项，将从注释里抽取文件名</td>\n</tr>\n<tr>\n<td>YApi server url</td>\n<td>YApi部署服务器地址</td>\n<td>内网部署的yapi平台的域名，如：<a href=\"http://yapi.xxx.com\" target=\"_blank\" rel=\"noopener\">http://yapi.xxx.com</a></td>\n</tr>\n<tr>\n<td>Project token</td>\n<td>项目token</td>\n<td>接口对应的yapi项目的token</td>\n</tr>\n<tr>\n<td>Default save category</td>\n<td>默认保存分类</td>\n<td>插件生成的yapi文档保存位置，默认api_generator</td>\n</tr>\n<tr>\n<td>Classify API automatically</td>\n<td>是否自动分类</td>\n<td>勾选该选项后，生成文档时插件将从controller类注释里抽取模块名，并在yapi上自动创建对应分类保存接口</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"后记\">后记</h1>\n<p>笔者在开发这款插件之前，也是先用了一段时间别人写的插件，</p>\n<p>使用过的插件有：Yapiupload、idea-yapi、EasyYapi、RedsoftYapiUpload等。</p>\n<p>这些插件并不完美，或多或少存在一些问题，要么关键功能缺失，要么用户体验较差，以下是关键功能对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">插件</th>\n<th style=\"text-align:left\">智能解析</th>\n<th style=\"text-align:left\">无入侵</th>\n<th style=\"text-align:left\">markdown</th>\n<th style=\"text-align:left\">智能选中</th>\n<th style=\"text-align:left\">json5</th>\n<th style=\"text-align:left\">常用注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Api Generator</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EasyYapi</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Yapiupload</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">idea-yapi</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RedsoftYapiUpload</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">√</td>\n</tr>\n</tbody>\n</table>\n<p>从上面可以看出，“Api Generator”是集大成者，因为在立项之初就参考了它们的设计，取其精华，去其糟粕。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前后分离开发模式下，接口文档是否靠谱直接影响开发协作效率，因此文档的时效性和准确性至关重要，但是，文档的维护又是一项琐碎耗时的工作，手工录入不仅麻烦，还存在出错的风险，因此，如果能有自动生成文档的方法，将极大地提升开发效率。</p>\n</blockquote>\n<h1>前言</h1>\n<p>一般来讲，接口文档由后端同学维护，而Java是目前主流的后端语言，与之对应的，IDEA是最流行的集成开发环境。基于插件机制，IDEA拥有极强的可扩展性，因此，思路是开发一个IDEA插件，通过插件让手中的IDEA拥有自动生成文档的能力。</p>\n<p>其实，jetbrains插件仓库里已有几款插件可以帮助生成接口文档，但是没有一款插件令我满意，要么无法解析复杂的类结构，要么就是生成的文档格式差强人意，因此，我在借鉴他们的设计的基础上，开发了这款文档生成插件，我将它取名为《Api Generator》。</p>\n<h1>安装插件</h1>\n<p>Preferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/install_api_generator.png\" alt=\"img\"></p>\n<h1>开始使用</h1>\n<h2>上传REST接口</h2>\n<p>选择一个Controller类，将光标定位到方法区（方法名或者方法注释），点击鼠标右键，在弹出的菜单项里选择“Generate Api”。如图所示：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/upload_yapi.png\" alt=\"img\"></p>\n<p>首次使用会弹窗提示输入必要信息：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_server_url.png\" alt=\"img\"></p>\n<p>首先输入YApi服务器部署地址，接着输入项目token：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_token.png\" alt=\"img\"></p>\n<p>点击OK，则插件会自动配置，然后自动生成文档并上传到YApi。上传成功后，IDE右下角会弹出提示框：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/upload_yapi_success.png\" alt=\"img\"></p>\n<p>上传效果如图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/yapi_demo.png\" alt=\"img\"></p>\n<h3>解析规则</h3>\n<h4>入参解析</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_param_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_param_resolve_result.png\" alt=\"img\"></p>\n<h4>响应解析</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_response_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/rest_response_resolve_result.png\" alt=\"img\"></p>\n<p>插件默认保存分类为api_generator，可以在配置项中修改默认分类：</p>\n<p>Preferences → Other Settings → Api Generator Setting → YApi Setting → Default save category，如图所示：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/save_directory.png\" alt=\"img\"></p>\n<p>如果勾选了选项“Classify API automatically”，则插件会自动从类注释里抽取分类名，自动创建并保存。效果如下：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/classify_auto.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/category_resolve.png\" alt=\"img\"></p>\n<p><img src=\"http://forgus.vicp.io/resources/images/category_resolve_result.png\" alt=\"img\"></p>\n<p>备注:每个项目只需配置一次，插件会自动持久化配置项，下次打开无需再次配置。</p>\n<h3>token获取方法</h3>\n<p>登录yapi，选择对应项目，找到设置→ token配置，点击复制即可。</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/get_token.png\" alt=\"img\"></p>\n<h2>生成接口文档</h2>\n<p>如果在接口类中进行文档生成操作，则插件会将文档以markdown的形式输出，默认保存在当前项目的target目录下，如图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/api_resolve.png\" alt=\"img\"></p>\n<p>生成的接口文档效果图：</p>\n<p><img src=\"http://forgus.vicp.io/resources/images/api_resolve_result.png\" alt=\"img\"></p>\n<h2>生成POJO文档</h2>\n<p>操作同上，步骤略。</p>\n<h1>插件设置</h1>\n<p>自定义配置项： Preferences —&gt; Other Settings —&gt; Api Generator Setting</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>含义</th>\n<th>详细解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Exclude Fields</td>\n<td>过滤字段（多个字段以&quot;,&quot;分隔）</td>\n<td>该配置项功能类似JSONField，用于过滤不想被解析的字段，多用于排除二方包里的干扰字段</td>\n</tr>\n<tr>\n<td>Save Directory</td>\n<td>markdown文档保存目录（绝对路径）</td>\n<td>用于配置生成的markdown形式的接口文档的保存路径，默认保存在当前项目的target目录</td>\n</tr>\n<tr>\n<td>Indent Style</td>\n<td>二级字段缩进前缀</td>\n<td>生成的markdown文档是类似于json schema的字段表格，涉及类型是对象的字段，展示上做缩进处理，默认缩进前缀是“└”</td>\n</tr>\n<tr>\n<td>Overwrite exists docs</td>\n<td>是否覆盖同名markdown文档</td>\n<td>如果生成的markdown文件已存在，会弹框提示是否覆盖，勾选该选项，则直接覆盖不提示</td>\n</tr>\n<tr>\n<td>Extract filename from doc comments</td>\n<td>是否从javadoc抽取文件名</td>\n<td>生成的markdown文件默认是方法名，勾选该选项，将从注释里抽取文件名</td>\n</tr>\n<tr>\n<td>YApi server url</td>\n<td>YApi部署服务器地址</td>\n<td>内网部署的yapi平台的域名，如：<a href=\"http://yapi.xxx.com\" target=\"_blank\" rel=\"noopener\">http://yapi.xxx.com</a></td>\n</tr>\n<tr>\n<td>Project token</td>\n<td>项目token</td>\n<td>接口对应的yapi项目的token</td>\n</tr>\n<tr>\n<td>Default save category</td>\n<td>默认保存分类</td>\n<td>插件生成的yapi文档保存位置，默认api_generator</td>\n</tr>\n<tr>\n<td>Classify API automatically</td>\n<td>是否自动分类</td>\n<td>勾选该选项后，生成文档时插件将从controller类注释里抽取模块名，并在yapi上自动创建对应分类保存接口</td>\n</tr>\n</tbody>\n</table>\n<h1>后记</h1>\n<p>笔者在开发这款插件之前，也是先用了一段时间别人写的插件，</p>\n<p>使用过的插件有：Yapiupload、idea-yapi、EasyYapi、RedsoftYapiUpload等。</p>\n<p>这些插件并不完美，或多或少存在一些问题，要么关键功能缺失，要么用户体验较差，以下是关键功能对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">插件</th>\n<th style=\"text-align:left\">智能解析</th>\n<th style=\"text-align:left\">无入侵</th>\n<th style=\"text-align:left\">markdown</th>\n<th style=\"text-align:left\">智能选中</th>\n<th style=\"text-align:left\">json5</th>\n<th style=\"text-align:left\">常用注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Api Generator</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EasyYapi</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">√</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Yapiupload</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">idea-yapi</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RedsoftYapiUpload</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">✘</td>\n<td style=\"text-align:left\">√</td>\n</tr>\n</tbody>\n</table>\n<p>从上面可以看出，“Api Generator”是集大成者，因为在立项之初就参考了它们的设计，取其精华，去其糟粕。</p>\n"},{"title":"翻墙服务器搭建","date":"2018-09-25T16:00:00.000Z","_content":"\n## 登录VPS服务器\n\n## 执行如下命令\n\n```\nwget –no-check-certificate  https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n```\n\n```\nchmod +x shadowsocks.sh\n```\n\n```\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n```\n根据提示设置翻墙账号密码和端口号以及加密方式\n\n","source":"_posts/Build_shadowsocks_with_VPS.md","raw":"---\ntitle: 翻墙服务器搭建\ndate: 2018-09-26\ntags:\n- 网络工具\n---\n\n## 登录VPS服务器\n\n## 执行如下命令\n\n```\nwget –no-check-certificate  https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n```\n\n```\nchmod +x shadowsocks.sh\n```\n\n```\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n```\n根据提示设置翻墙账号密码和端口号以及加密方式\n\n","slug":"Build_shadowsocks_with_VPS","published":1,"updated":"2020-12-23T15:02:16.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qh0006s2b9d03veo3f","content":"<h2 id=\"登录vps服务器\">登录VPS服务器</h2>\n<h2 id=\"执行如下命令\">执行如下命令</h2>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –<span class=\"keyword\">no</span>-check-certificate  http<span class=\"variable\">s:</span>//raw.githubusercontent.<span class=\"keyword\">com</span>/teddysun/shadowsocks_install/master/shadowsocks.<span class=\"keyword\">sh</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">chmod</span> +<span class=\"selector-tag\">x</span> <span class=\"selector-tag\">shadowsocks</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks.sh <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> | tee shadowsocks.log</span><br></pre></td></tr></table></figure>\n<p>根据提示设置翻墙账号密码和端口号以及加密方式</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>登录VPS服务器</h2>\n<h2>执行如下命令</h2>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –<span class=\"keyword\">no</span>-check-certificate  http<span class=\"variable\">s:</span>//raw.githubusercontent.<span class=\"keyword\">com</span>/teddysun/shadowsocks_install/master/shadowsocks.<span class=\"keyword\">sh</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">chmod</span> +<span class=\"selector-tag\">x</span> <span class=\"selector-tag\">shadowsocks</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks.sh <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> | tee shadowsocks.log</span><br></pre></td></tr></table></figure>\n<p>根据提示设置翻墙账号密码和端口号以及加密方式</p>\n"},{"title":"IDEA常用快捷键","date":"2018-09-14T16:00:00.000Z","_content":"\n快捷键     | 功能\n--------  | ----\nctrl+h    | 查看类继承结构\ncommand+7 | 查看结构\n\n","source":"_posts/IDEA_hot_keys.md","raw":"---\ntitle: IDEA常用快捷键\ndate: 2018-09-15\ntags:\n- 开发工具\n---\n\n快捷键     | 功能\n--------  | ----\nctrl+h    | 查看类继承结构\ncommand+7 | 查看结构\n\n","slug":"IDEA_hot_keys","published":1,"updated":"2020-12-23T15:02:16.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qj0007s2b9kq5ozwwi","content":"<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl+h</td>\n<td>查看类继承结构</td>\n</tr>\n<tr>\n<td>command+7</td>\n<td>查看结构</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl+h</td>\n<td>查看类继承结构</td>\n</tr>\n<tr>\n<td>command+7</td>\n<td>查看结构</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"实施看板方法","date":"2018-06-22T16:00:00.000Z","catalog":true,"_content":"## 价值流映射\n### 定义控制起点和终点\n为使工作流程可视化（开发流程，测试流程，部署流程），有必要确定哪里是进行过程可视化的起点和终点，确定协作边界之后，只需要求自己的团队对在制品实施限制即可。\n### 工作项类型\n需求、功能特性、用户故事、用例、变更请求、产品缺陷、维护工作、重构、错误、改进建议、受阻问题等。\n可根据来源对工作项类型命名，如：销售前线需求、战略规划需求\n### 绘制卡片墙\n对工作流进行建模，根据活动执行次序画出多道分栏，对于活动步骤，把分栏分成进行中和已完成两列，加入缓冲区或等待队列\n### 请求分析\n工作项类型大致分为四种：变更请求（新功能）、产品缺陷、产品文本变更（PTC）、bug（已发现的缺陷）。对每种类型的工作项，都要对其进行请求分析，掌握请求平均到达率及其变化的分布状况，作为调整看板系统设计的依据。\n### 根据请求分配产能\n根据工作项类型横向划分泳道，制定产能分配方案。比如：\n\n变更请求|重构|产品文本变更\n---|---|---\n60%|30%|10%\n\n### 工作项卡片详解\n唯一标识号码，标题，创建日期，交付日期，经办人\n### 电子跟踪\n远程办公，异地办公协作必备，例：Jira\n### 设置输入和输出边界\n输入点：ER（工程就绪） 输出点：部署到生产环境\n### 应对并行活动\n开发、测试开发，垂直裂解\n### 应对次序无关的活动\n垂直裂解\n## 使用看板进行协调\n### 可视化控制和拉动\n每一栏设置在制品限额，如果某一栏上卡片数量低于指定的限额，则发出一个拉（pull）信号\n### 电子跟踪\n当看板限额超出时，可视化展现。\n### 每日站立会议\n站立会议是来自敏捷开发过程的基础实践。通常在每天早上的工作开始之前举行。轮流询问三个问题：昨天做了什么？今天计划做什么？有什么困难或者需要帮助？\n采用看板之后提问环节可以省略，焦点放在工作流动上，引导者通常会是项目经理或者产品经理，做看板走读，惯例做法从后往前。**重点关注受阻或延期的工作项**，对已经好几天没挪动的工作项，要重点提问。10分钟内结束站立会\n### 会后讨论\n随着看板方法的应用而涌现出来的自发行为，通常2～3人组成讨论小组，团队成员想讨论他们心中的一些问题：受阻问题，技术设计问题，架构问题，过程相关问题。\n### 队列填充会议\n目的：进行优先级排序，为一个单独的价值流、系统或项目填充看板系统的输入队列。\n通常，队列填充会议是在一组业务代表或者产品负责人间召开，建议这些会议以固定频率定期召开，推荐的间隔频率以每周一次为好，能够降低召开会议所需的协调成本。除了产品负责人，理想情况下，要保证一下角色也能出席会议：项目经理、开发经理或者测试经理、技术或数据架构师、运维、业务分析师。\n### 发布规划会议\n### 鉴别分类\n## 建立交付节奏\n## 建立输入节奏\n## 设置在制品限额\n## 建立服务水平协议\n## 度量和管理报告\n## 使用两层系统扩展看板\n## 运营回顾\n## 启动看板变革","source":"_posts/Implement_Kanban.md","raw":"---\ntitle: 实施看板方法\ndate: 2018-06-23\ncatalog: true\ntags:\n- 持续交付\n---\n## 价值流映射\n### 定义控制起点和终点\n为使工作流程可视化（开发流程，测试流程，部署流程），有必要确定哪里是进行过程可视化的起点和终点，确定协作边界之后，只需要求自己的团队对在制品实施限制即可。\n### 工作项类型\n需求、功能特性、用户故事、用例、变更请求、产品缺陷、维护工作、重构、错误、改进建议、受阻问题等。\n可根据来源对工作项类型命名，如：销售前线需求、战略规划需求\n### 绘制卡片墙\n对工作流进行建模，根据活动执行次序画出多道分栏，对于活动步骤，把分栏分成进行中和已完成两列，加入缓冲区或等待队列\n### 请求分析\n工作项类型大致分为四种：变更请求（新功能）、产品缺陷、产品文本变更（PTC）、bug（已发现的缺陷）。对每种类型的工作项，都要对其进行请求分析，掌握请求平均到达率及其变化的分布状况，作为调整看板系统设计的依据。\n### 根据请求分配产能\n根据工作项类型横向划分泳道，制定产能分配方案。比如：\n\n变更请求|重构|产品文本变更\n---|---|---\n60%|30%|10%\n\n### 工作项卡片详解\n唯一标识号码，标题，创建日期，交付日期，经办人\n### 电子跟踪\n远程办公，异地办公协作必备，例：Jira\n### 设置输入和输出边界\n输入点：ER（工程就绪） 输出点：部署到生产环境\n### 应对并行活动\n开发、测试开发，垂直裂解\n### 应对次序无关的活动\n垂直裂解\n## 使用看板进行协调\n### 可视化控制和拉动\n每一栏设置在制品限额，如果某一栏上卡片数量低于指定的限额，则发出一个拉（pull）信号\n### 电子跟踪\n当看板限额超出时，可视化展现。\n### 每日站立会议\n站立会议是来自敏捷开发过程的基础实践。通常在每天早上的工作开始之前举行。轮流询问三个问题：昨天做了什么？今天计划做什么？有什么困难或者需要帮助？\n采用看板之后提问环节可以省略，焦点放在工作流动上，引导者通常会是项目经理或者产品经理，做看板走读，惯例做法从后往前。**重点关注受阻或延期的工作项**，对已经好几天没挪动的工作项，要重点提问。10分钟内结束站立会\n### 会后讨论\n随着看板方法的应用而涌现出来的自发行为，通常2～3人组成讨论小组，团队成员想讨论他们心中的一些问题：受阻问题，技术设计问题，架构问题，过程相关问题。\n### 队列填充会议\n目的：进行优先级排序，为一个单独的价值流、系统或项目填充看板系统的输入队列。\n通常，队列填充会议是在一组业务代表或者产品负责人间召开，建议这些会议以固定频率定期召开，推荐的间隔频率以每周一次为好，能够降低召开会议所需的协调成本。除了产品负责人，理想情况下，要保证一下角色也能出席会议：项目经理、开发经理或者测试经理、技术或数据架构师、运维、业务分析师。\n### 发布规划会议\n### 鉴别分类\n## 建立交付节奏\n## 建立输入节奏\n## 设置在制品限额\n## 建立服务水平协议\n## 度量和管理报告\n## 使用两层系统扩展看板\n## 运营回顾\n## 启动看板变革","slug":"Implement_Kanban","published":1,"updated":"2020-12-23T15:02:16.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qk0008s2b9os4rpqnf","content":"<h2 id=\"价值流映射\">价值流映射</h2>\n<h3 id=\"定义控制起点和终点\">定义控制起点和终点</h3>\n<p>为使工作流程可视化（开发流程，测试流程，部署流程），有必要确定哪里是进行过程可视化的起点和终点，确定协作边界之后，只需要求自己的团队对在制品实施限制即可。</p>\n<h3 id=\"工作项类型\">工作项类型</h3>\n<p>需求、功能特性、用户故事、用例、变更请求、产品缺陷、维护工作、重构、错误、改进建议、受阻问题等。<br>\n可根据来源对工作项类型命名，如：销售前线需求、战略规划需求</p>\n<h3 id=\"绘制卡片墙\">绘制卡片墙</h3>\n<p>对工作流进行建模，根据活动执行次序画出多道分栏，对于活动步骤，把分栏分成进行中和已完成两列，加入缓冲区或等待队列</p>\n<h3 id=\"请求分析\">请求分析</h3>\n<p>工作项类型大致分为四种：变更请求（新功能）、产品缺陷、产品文本变更（PTC）、bug（已发现的缺陷）。对每种类型的工作项，都要对其进行请求分析，掌握请求平均到达率及其变化的分布状况，作为调整看板系统设计的依据。</p>\n<h3 id=\"根据请求分配产能\">根据请求分配产能</h3>\n<p>根据工作项类型横向划分泳道，制定产能分配方案。比如：</p>\n<table>\n<thead>\n<tr>\n<th>变更请求</th>\n<th>重构</th>\n<th>产品文本变更</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60%</td>\n<td>30%</td>\n<td>10%</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"工作项卡片详解\">工作项卡片详解</h3>\n<p>唯一标识号码，标题，创建日期，交付日期，经办人</p>\n<h3 id=\"电子跟踪\">电子跟踪</h3>\n<p>远程办公，异地办公协作必备，例：Jira</p>\n<h3 id=\"设置输入和输出边界\">设置输入和输出边界</h3>\n<p>输入点：ER（工程就绪） 输出点：部署到生产环境</p>\n<h3 id=\"应对并行活动\">应对并行活动</h3>\n<p>开发、测试开发，垂直裂解</p>\n<h3 id=\"应对次序无关的活动\">应对次序无关的活动</h3>\n<p>垂直裂解</p>\n<h2 id=\"使用看板进行协调\">使用看板进行协调</h2>\n<h3 id=\"可视化控制和拉动\">可视化控制和拉动</h3>\n<p>每一栏设置在制品限额，如果某一栏上卡片数量低于指定的限额，则发出一个拉（pull）信号</p>\n<h3 id=\"电子跟踪\">电子跟踪</h3>\n<p>当看板限额超出时，可视化展现。</p>\n<h3 id=\"每日站立会议\">每日站立会议</h3>\n<p>站立会议是来自敏捷开发过程的基础实践。通常在每天早上的工作开始之前举行。轮流询问三个问题：昨天做了什么？今天计划做什么？有什么困难或者需要帮助？<br>\n采用看板之后提问环节可以省略，焦点放在工作流动上，引导者通常会是项目经理或者产品经理，做看板走读，惯例做法从后往前。<strong>重点关注受阻或延期的工作项</strong>，对已经好几天没挪动的工作项，要重点提问。10分钟内结束站立会</p>\n<h3 id=\"会后讨论\">会后讨论</h3>\n<p>随着看板方法的应用而涌现出来的自发行为，通常2～3人组成讨论小组，团队成员想讨论他们心中的一些问题：受阻问题，技术设计问题，架构问题，过程相关问题。</p>\n<h3 id=\"队列填充会议\">队列填充会议</h3>\n<p>目的：进行优先级排序，为一个单独的价值流、系统或项目填充看板系统的输入队列。<br>\n通常，队列填充会议是在一组业务代表或者产品负责人间召开，建议这些会议以固定频率定期召开，推荐的间隔频率以每周一次为好，能够降低召开会议所需的协调成本。除了产品负责人，理想情况下，要保证一下角色也能出席会议：项目经理、开发经理或者测试经理、技术或数据架构师、运维、业务分析师。</p>\n<h3 id=\"发布规划会议\">发布规划会议</h3>\n<h3 id=\"鉴别分类\">鉴别分类</h3>\n<h2 id=\"建立交付节奏\">建立交付节奏</h2>\n<h2 id=\"建立输入节奏\">建立输入节奏</h2>\n<h2 id=\"设置在制品限额\">设置在制品限额</h2>\n<h2 id=\"建立服务水平协议\">建立服务水平协议</h2>\n<h2 id=\"度量和管理报告\">度量和管理报告</h2>\n<h2 id=\"使用两层系统扩展看板\">使用两层系统扩展看板</h2>\n<h2 id=\"运营回顾\">运营回顾</h2>\n<h2 id=\"启动看板变革\">启动看板变革</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>价值流映射</h2>\n<h3>定义控制起点和终点</h3>\n<p>为使工作流程可视化（开发流程，测试流程，部署流程），有必要确定哪里是进行过程可视化的起点和终点，确定协作边界之后，只需要求自己的团队对在制品实施限制即可。</p>\n<h3>工作项类型</h3>\n<p>需求、功能特性、用户故事、用例、变更请求、产品缺陷、维护工作、重构、错误、改进建议、受阻问题等。<br>\n可根据来源对工作项类型命名，如：销售前线需求、战略规划需求</p>\n<h3>绘制卡片墙</h3>\n<p>对工作流进行建模，根据活动执行次序画出多道分栏，对于活动步骤，把分栏分成进行中和已完成两列，加入缓冲区或等待队列</p>\n<h3>请求分析</h3>\n<p>工作项类型大致分为四种：变更请求（新功能）、产品缺陷、产品文本变更（PTC）、bug（已发现的缺陷）。对每种类型的工作项，都要对其进行请求分析，掌握请求平均到达率及其变化的分布状况，作为调整看板系统设计的依据。</p>\n<h3>根据请求分配产能</h3>\n<p>根据工作项类型横向划分泳道，制定产能分配方案。比如：</p>\n<table>\n<thead>\n<tr>\n<th>变更请求</th>\n<th>重构</th>\n<th>产品文本变更</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60%</td>\n<td>30%</td>\n<td>10%</td>\n</tr>\n</tbody>\n</table>\n<h3>工作项卡片详解</h3>\n<p>唯一标识号码，标题，创建日期，交付日期，经办人</p>\n<h3>电子跟踪</h3>\n<p>远程办公，异地办公协作必备，例：Jira</p>\n<h3>设置输入和输出边界</h3>\n<p>输入点：ER（工程就绪） 输出点：部署到生产环境</p>\n<h3>应对并行活动</h3>\n<p>开发、测试开发，垂直裂解</p>\n<h3>应对次序无关的活动</h3>\n<p>垂直裂解</p>\n<h2>使用看板进行协调</h2>\n<h3>可视化控制和拉动</h3>\n<p>每一栏设置在制品限额，如果某一栏上卡片数量低于指定的限额，则发出一个拉（pull）信号</p>\n<h3>电子跟踪</h3>\n<p>当看板限额超出时，可视化展现。</p>\n<h3>每日站立会议</h3>\n<p>站立会议是来自敏捷开发过程的基础实践。通常在每天早上的工作开始之前举行。轮流询问三个问题：昨天做了什么？今天计划做什么？有什么困难或者需要帮助？<br>\n采用看板之后提问环节可以省略，焦点放在工作流动上，引导者通常会是项目经理或者产品经理，做看板走读，惯例做法从后往前。<strong>重点关注受阻或延期的工作项</strong>，对已经好几天没挪动的工作项，要重点提问。10分钟内结束站立会</p>\n<h3>会后讨论</h3>\n<p>随着看板方法的应用而涌现出来的自发行为，通常2～3人组成讨论小组，团队成员想讨论他们心中的一些问题：受阻问题，技术设计问题，架构问题，过程相关问题。</p>\n<h3>队列填充会议</h3>\n<p>目的：进行优先级排序，为一个单独的价值流、系统或项目填充看板系统的输入队列。<br>\n通常，队列填充会议是在一组业务代表或者产品负责人间召开，建议这些会议以固定频率定期召开，推荐的间隔频率以每周一次为好，能够降低召开会议所需的协调成本。除了产品负责人，理想情况下，要保证一下角色也能出席会议：项目经理、开发经理或者测试经理、技术或数据架构师、运维、业务分析师。</p>\n<h3>发布规划会议</h3>\n<h3>鉴别分类</h3>\n<h2>建立交付节奏</h2>\n<h2>建立输入节奏</h2>\n<h2>设置在制品限额</h2>\n<h2>建立服务水平协议</h2>\n<h2>度量和管理报告</h2>\n<h2>使用两层系统扩展看板</h2>\n<h2>运营回顾</h2>\n<h2>启动看板变革</h2>\n"},{"title":"Jenkins安装教程","date":"2018-03-30T16:00:00.000Z","catalog":true,"_content":"\n以下介绍在Debian或者Ubuntu系统上安装Jenkins\n\n## 添加key\n\n```\nwget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key \\\n| sudo apt-key add -\n```\n```\nsudo echo \"deb http://pkg.jenkins-ci.org/debian binary/\" > \\\n/etc/apt/sources.list.d/jenkins.list\n```\n\n## 更新Debian的包仓库\n\n`sudo aptitude update`\n\n## 通过aptitude安装Jenkins\n\n`sudo aptitude install -y jenkins`\n\n## 启动Jenkins\n\n`sudo /etc/init.d/jenkins start`\n\n## 停止Jenkins\n\n`sudo /etc/init.d/jenkins stop`","source":"_posts/Install_Jenkins.md","raw":"---\ntitle: Jenkins安装教程\ndate: 2018-03-31\ncatalog: true\ntags:\n- Jenkins\n- 敏捷\n---\n\n以下介绍在Debian或者Ubuntu系统上安装Jenkins\n\n## 添加key\n\n```\nwget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key \\\n| sudo apt-key add -\n```\n```\nsudo echo \"deb http://pkg.jenkins-ci.org/debian binary/\" > \\\n/etc/apt/sources.list.d/jenkins.list\n```\n\n## 更新Debian的包仓库\n\n`sudo aptitude update`\n\n## 通过aptitude安装Jenkins\n\n`sudo aptitude install -y jenkins`\n\n## 启动Jenkins\n\n`sudo /etc/init.d/jenkins start`\n\n## 停止Jenkins\n\n`sudo /etc/init.d/jenkins stop`","slug":"Install_Jenkins","published":1,"updated":"2020-12-23T15:02:16.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84ql000as2b96fx4r5po","content":"<p>以下介绍在Debian或者Ubuntu系统上安装Jenkins</p>\n<h2 id=\"添加key\">添加key</h2>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - http://pkg.jenkins-ci<span class=\"meta\">.org</span>/debian/jenkins-ci<span class=\"meta\">.org</span>.key \\</span><br><span class=\"line\">| sudo apt-key <span class=\"keyword\">add</span> -</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">echo</span> <span class=\"string\">\"deb http://pkg.jenkins-ci.org/debian binary/\"</span> &gt; \\</span><br><span class=\"line\">/etc/apt/sources.<span class=\"keyword\">list</span>.d/jenkins.<span class=\"keyword\">list</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"更新debian的包仓库\">更新Debian的包仓库</h2>\n<p><code>sudo aptitude update</code></p>\n<h2 id=\"通过aptitude安装jenkins\">通过aptitude安装Jenkins</h2>\n<p><code>sudo aptitude install -y jenkins</code></p>\n<h2 id=\"启动jenkins\">启动Jenkins</h2>\n<p><code>sudo /etc/init.d/jenkins start</code></p>\n<h2 id=\"停止jenkins\">停止Jenkins</h2>\n<p><code>sudo /etc/init.d/jenkins stop</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下介绍在Debian或者Ubuntu系统上安装Jenkins</p>\n<h2>添加key</h2>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - http://pkg.jenkins-ci<span class=\"meta\">.org</span>/debian/jenkins-ci<span class=\"meta\">.org</span>.key \\</span><br><span class=\"line\">| sudo apt-key <span class=\"keyword\">add</span> -</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">echo</span> <span class=\"string\">\"deb http://pkg.jenkins-ci.org/debian binary/\"</span> &gt; \\</span><br><span class=\"line\">/etc/apt/sources.<span class=\"keyword\">list</span>.d/jenkins.<span class=\"keyword\">list</span></span><br></pre></td></tr></table></figure>\n<h2>更新Debian的包仓库</h2>\n<p><code>sudo aptitude update</code></p>\n<h2>通过aptitude安装Jenkins</h2>\n<p><code>sudo aptitude install -y jenkins</code></p>\n<h2>启动Jenkins</h2>\n<p><code>sudo /etc/init.d/jenkins start</code></p>\n<h2>停止Jenkins</h2>\n<p><code>sudo /etc/init.d/jenkins stop</code></p>\n"},{"title":"Raspbian安装Nginx","date":"2018-09-10T16:00:00.000Z","catalog":true,"_content":"## 安装：\n\n```\nsudo apt-get update\nsudo apt-get install nginx -y\n```\n## 用法\n```\nsudo service nginx\n```\n\n## 配置\n默认配置文件为`nginx.conf`，所在目录：`/etc/nginx`  (mac上为：`/usr/local/etc/nginx`)\n该目录下还有一个`conf.d`文件夹，可以在里面添加子配置文件。  \n*注意：子配置文件需要以`.conf`结尾。 \n每次改完配置文件需要用`sudo service nginx reload`命令让nginx重新加载才会生效，不需要重启。*","source":"_posts/Install_Nginx_for_ Raspbian.md","raw":"---\ntitle: Raspbian安装Nginx\ndate: 2018-09-11\ncatalog: true\ntags:\n- 树莓派\n---\n## 安装：\n\n```\nsudo apt-get update\nsudo apt-get install nginx -y\n```\n## 用法\n```\nsudo service nginx\n```\n\n## 配置\n默认配置文件为`nginx.conf`，所在目录：`/etc/nginx`  (mac上为：`/usr/local/etc/nginx`)\n该目录下还有一个`conf.d`文件夹，可以在里面添加子配置文件。  \n*注意：子配置文件需要以`.conf`结尾。 \n每次改完配置文件需要用`sudo service nginx reload`命令让nginx重新加载才会生效，不需要重启。*","slug":"Install_Nginx_for_ Raspbian","published":1,"updated":"2020-12-23T15:02:16.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qo000bs2b9fxnmhzbg","content":"<h2 id=\"安装\">安装：</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install nginx -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"用法\">用法</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> service </span>nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\">配置</h2>\n<p>默认配置文件为<code>nginx.conf</code>，所在目录：<code>/etc/nginx</code>  (mac上为：<code>/usr/local/etc/nginx</code>)<br>\n该目录下还有一个<code>conf.d</code>文件夹，可以在里面添加子配置文件。<br>\n<em>注意：子配置文件需要以<code>.conf</code>结尾。<br>\n每次改完配置文件需要用<code>sudo service nginx reload</code>命令让nginx重新加载才会生效，不需要重启。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>安装：</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install nginx -y</span><br></pre></td></tr></table></figure>\n<h2>用法</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> service </span>nginx</span><br></pre></td></tr></table></figure>\n<h2>配置</h2>\n<p>默认配置文件为<code>nginx.conf</code>，所在目录：<code>/etc/nginx</code>  (mac上为：<code>/usr/local/etc/nginx</code>)<br>\n该目录下还有一个<code>conf.d</code>文件夹，可以在里面添加子配置文件。<br>\n<em>注意：子配置文件需要以<code>.conf</code>结尾。<br>\n每次改完配置文件需要用<code>sudo service nginx reload</code>命令让nginx重新加载才会生效，不需要重启。</em></p>\n"},{"title":"Java NIO 缓冲区","catalog":true,"date":"2019-03-23T16:00:00.000Z","_content":"\n>Java NIO 缓冲区和通道配合使用。如你所知，数据可以从通道读进缓冲区，也可以从缓冲区写进通道。\n>缓冲区本质上是一块用于数据读写的内存。这块内存被包装成NIO Buffer对象，并提供了一系列的方法使得操作内存变得更加容易。\n\n## Buffer的简单用法\n\n用Buffer读写数据一般分为以下4个步骤：\n\n1. 将数据写入Buffer\n2. 调用buffer.flip()方法\n3. 从Buffer读取数据\n4. 调用buffer.clear()方法或者buffer.compact()方法\n\n当你往一个buffer里写数据的时候，buffer会记录你已经写了多少数据。一旦你需要读取数据，你需要调用flip()方法将buffer从写模式切换为读模式。在读模式下，你可以读取之前写入到buffer的所有数据。\n\n一旦你已经读完了所有数据，你需要情况缓冲区，使之可以再次被写入。有两种方法可以清理buffer：调用clear()方法或者调用compact()方法。clear()方法会清空整个缓冲区。compact()方法只清除已经读过的数据。任何未被读取的数据被移动到缓冲区的起始处，之后数据将从那些未读数据的后面位置开始写入。\n\n以下是一个简单的Buffer使用举例：\n\n```\nRandomAccessFile aFile = new RandomAccessFile(\"data/nio-data.txt\", \"rw\");\nFileChannel inChannel = aFile.getChannel();\n\n//create buffer with capacity of 48 bytes\nByteBuffer buf = ByteBuffer.allocate(48);\n\nint bytesRead = inChannel.read(buf); //read into buffer.\nwhile (bytesRead != -1) {\n\n  buf.flip();  //make buffer ready for read\n\n  while(buf.hasRemaining()){\n      System.out.print((char) buf.get()); // read 1 byte at a time\n  }\n\n  buf.clear(); //make buffer ready for writing\n  bytesRead = inChannel.read(buf);\n}\naFile.close();\n```\n\n## Buffer的Capacity，Position和Limit\n\nbuffer本质上是一块可读写的内存区域。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。\n\n为了理解buffer的工作原理，你需要熟悉下buffer的三个属性。它们是：\n\n- capacity\n- position\n- limit\n\n`position`和`limit`的含义取决于buffer是处于读模式还是写模式。`capacity`则在读模式和写模式下拥有相同的含义。下文会详细解释，先看下原理图：\n\n![](http://tutorials.jenkov.com/images/java-nio/buffers-modes.png)\n\n### Capacity\n\n作为一块内存区域，buffer有一个固定的大小值，称为\"capacity\"。你最多可以往buffer里写入capacity个byte、long、char等类型的数据。一旦buffer满了，在你往你写入更多数据前，你需要清空它(通过读取数据或者清除数据)。\n\n### Position\n\n当往buffer里写数据时，position表示当前的位置。初始的position值为0。当一个byte、long等类型数据写到buffer后，position会向前移动到下一个可插入数据的buffer单元。position最大可为capacity - 1。\n\n当从buffer读数据时，也是从某个特定位置读。当你将buffer从写模式切换到读模式，position被重置为0。这样读数据的时候就从position所在位置往前移动指向下一个位置进行数据读取。\n\n### Limit\n\nlimit在buffer写模式里的含义是你最多可以写入的数据量。写模式下limit的值等于buffer的capacity。\n\n当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）\n\n##      缓冲区类型\n\nJava NIO 有以下缓冲区类型：\n\n- ByteBuffer\n- MappedByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer  \n- ShortBuffer\n\n如你所见，这些buffer代表了不同的数据类型。换句话说，它们可以让你在缓冲区里以char，short，int，long，float或者double类型来处理字节。\n\nMappedByteBuffer有一点特殊，会单独介绍。\n\n## 分配缓冲区\n\n为了获得一个Buffer对象你必须先为它分配内存。每一个buffer类都有一个allocate()方法用来完成这项工作。以下是一个用`ByteBuffer`分配内存的例子，缓冲区容量大小48字节：\n\n```java\nByteBuffer buf = ByteBuffer.allocate(48);\n```\n\n这是另一个例子，用`CharBuffer`类分配1024个字符大小的缓冲区：\n\n```java\nCharBuffer buf = CharBuffer.allocate(1024);\n```\n\n## 向缓冲区写数据\n\n有两种方式可以往一个buffer里写数据：\n\n1. 从Channel往buffer里写数据。\n2. 通过buffer的`put()`方法直接往buffer里写数据。\n\n以下是一个从Channel往buffer里写数据的例子：\n\n```java\nint bytesRead = inChannel.read(buf); //read into buffer.\n```\n\n这是另一个例子，通过`put()`方法往buffer里写数据：\n\n```java\nbuf.put(127)\n```\n\n有很多其他版本的`put()`方法，允许你以各种不同的方式往buffer里写数据。比如，从指定位置开始写入，或者以字节数组的方式写入。可以查看JavaDoc获取更多buffer实现的细节。\n\n### flip()\n\n`flip()`方法用于将buffer从写模式切换成读模式。调用flip()方法会将position重设为0，同时将limit设置为先前position所在位置的值。\n\n换句话说，position现在标记的是读取的位置，而limit标记的是有多少字节，字符被写进了buffer——有多少字节，字符可以被读取。\n\n## 从缓冲区读数据\n\n有两种方式可以从缓冲区读取数据：\n\n1. 将数据从buffer读进channel。\n2. 用get()方法直接从buffer读取数据。\n\n以下是一个将数据从buffer读进channel的例子：\n\n```java\n//read from buffer into channel.\nint bytesWritten = inChannel.write(buf);\n```\n\n以下则是用get()方法从buffer读取数据的例子：\n\n```java\nbyte aByte = buf.get();    \n```\n\n有很多其他版本的get()方法，允许你以各种不同的方式从buffer读取数据。比如，从指定位置开始读取，或者以字节数组的方式读取。可以查看JavaDoc获取buffer实现的更多信息。\n\n### rewind()\n\nBuffer.rewind()方法将position设置为0，这样你可以重新读取buffer里的所有数据。limit保留未触碰的，这样仍然标记有多少元素(字节，字符等)可以从buffer读取。\n\n### clear()和compact()\n\n一旦你已经完成了从buffer里读取数据的工作，你必须让buffer做好再次写入的准备。这可以通过调用clear()方法或者compact()。\n\n如果调用clear()方法，position被设置为0，limit被设置为容量大小。换句话说，缓冲区被清空了。缓冲区里的数据没有被清除。只是这些标记告诉我们可以从哪里开始往buffer里写数据。\n\n如果缓冲区里还有未读的数据，当你调用clear()方法时，数据会被\"遗忘\"，这意味着你将不再有任何标记可以告知你哪些数据已被读取，哪些数据还未被读取。\n\n如果缓冲区里仍然有未读的数据，而你想要在之后继续读取，因为目前需要进行一些写操作，那么可以用compact()方法来取代clear()。\n\ncompact()方法会复制所有未读的数据放到缓冲区的开始位置。然后它会将position设置在最后未读元素的下一个位置。limit属性依然被设置为容量大小，就像clear()方法一样。现在buffer已经做好了写入的准备，而你不会覆盖未读的数据。\n\n### mark()和reset()\n\n你可以通过调用Buffer.mark()方法标记buffer里的某个位置。然后你在之后可以重置position到标记的位置。举例如下：\n\n```java\nbuffer.mark();\n\n//call buffer.get() a couple of times, e.g. during parsing.\n\nbuffer.reset();  //set position back to mark.  \n```\n\n### equals()和compareTo()\n\n比较两个缓冲区可以通过equals()方法和compareTo()方法。\n\n#### equals()\n\n两个buffer相等的条件如下：\n\n1. 类型相同(字节，字符，整形等)。\n2. buffer里有等量的剩余数据。\n3. 所有剩余的数据相等。\n\n如你所见，equals()方法仅比较buffer的一部分，并不比较里面所有的单个元素。实际上，它只比较buffer里剩余的数据。\n\n#### compareTo()\n\ncompareTo()方法比较两个buffer剩余元素，用于例如常规排序。一个buffer比另一个buffer小的条件如下：\n\n1. buffer的首个元素小于另一个buffer。\n2. 所有元素相等，但是第一个buffer比另一个buffer更早用完(它拥有更少的元素)。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/buffers.html) \t作者：Jakob Jenkov\n\n","source":"_posts/Java_NIO_Buffer.md","raw":"---\ntitle: Java NIO 缓冲区\ncatalog: true\ndate: 2019-03-24\ntags:\n- NIO\n---\n\n>Java NIO 缓冲区和通道配合使用。如你所知，数据可以从通道读进缓冲区，也可以从缓冲区写进通道。\n>缓冲区本质上是一块用于数据读写的内存。这块内存被包装成NIO Buffer对象，并提供了一系列的方法使得操作内存变得更加容易。\n\n## Buffer的简单用法\n\n用Buffer读写数据一般分为以下4个步骤：\n\n1. 将数据写入Buffer\n2. 调用buffer.flip()方法\n3. 从Buffer读取数据\n4. 调用buffer.clear()方法或者buffer.compact()方法\n\n当你往一个buffer里写数据的时候，buffer会记录你已经写了多少数据。一旦你需要读取数据，你需要调用flip()方法将buffer从写模式切换为读模式。在读模式下，你可以读取之前写入到buffer的所有数据。\n\n一旦你已经读完了所有数据，你需要情况缓冲区，使之可以再次被写入。有两种方法可以清理buffer：调用clear()方法或者调用compact()方法。clear()方法会清空整个缓冲区。compact()方法只清除已经读过的数据。任何未被读取的数据被移动到缓冲区的起始处，之后数据将从那些未读数据的后面位置开始写入。\n\n以下是一个简单的Buffer使用举例：\n\n```\nRandomAccessFile aFile = new RandomAccessFile(\"data/nio-data.txt\", \"rw\");\nFileChannel inChannel = aFile.getChannel();\n\n//create buffer with capacity of 48 bytes\nByteBuffer buf = ByteBuffer.allocate(48);\n\nint bytesRead = inChannel.read(buf); //read into buffer.\nwhile (bytesRead != -1) {\n\n  buf.flip();  //make buffer ready for read\n\n  while(buf.hasRemaining()){\n      System.out.print((char) buf.get()); // read 1 byte at a time\n  }\n\n  buf.clear(); //make buffer ready for writing\n  bytesRead = inChannel.read(buf);\n}\naFile.close();\n```\n\n## Buffer的Capacity，Position和Limit\n\nbuffer本质上是一块可读写的内存区域。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。\n\n为了理解buffer的工作原理，你需要熟悉下buffer的三个属性。它们是：\n\n- capacity\n- position\n- limit\n\n`position`和`limit`的含义取决于buffer是处于读模式还是写模式。`capacity`则在读模式和写模式下拥有相同的含义。下文会详细解释，先看下原理图：\n\n![](http://tutorials.jenkov.com/images/java-nio/buffers-modes.png)\n\n### Capacity\n\n作为一块内存区域，buffer有一个固定的大小值，称为\"capacity\"。你最多可以往buffer里写入capacity个byte、long、char等类型的数据。一旦buffer满了，在你往你写入更多数据前，你需要清空它(通过读取数据或者清除数据)。\n\n### Position\n\n当往buffer里写数据时，position表示当前的位置。初始的position值为0。当一个byte、long等类型数据写到buffer后，position会向前移动到下一个可插入数据的buffer单元。position最大可为capacity - 1。\n\n当从buffer读数据时，也是从某个特定位置读。当你将buffer从写模式切换到读模式，position被重置为0。这样读数据的时候就从position所在位置往前移动指向下一个位置进行数据读取。\n\n### Limit\n\nlimit在buffer写模式里的含义是你最多可以写入的数据量。写模式下limit的值等于buffer的capacity。\n\n当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）\n\n##      缓冲区类型\n\nJava NIO 有以下缓冲区类型：\n\n- ByteBuffer\n- MappedByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer  \n- ShortBuffer\n\n如你所见，这些buffer代表了不同的数据类型。换句话说，它们可以让你在缓冲区里以char，short，int，long，float或者double类型来处理字节。\n\nMappedByteBuffer有一点特殊，会单独介绍。\n\n## 分配缓冲区\n\n为了获得一个Buffer对象你必须先为它分配内存。每一个buffer类都有一个allocate()方法用来完成这项工作。以下是一个用`ByteBuffer`分配内存的例子，缓冲区容量大小48字节：\n\n```java\nByteBuffer buf = ByteBuffer.allocate(48);\n```\n\n这是另一个例子，用`CharBuffer`类分配1024个字符大小的缓冲区：\n\n```java\nCharBuffer buf = CharBuffer.allocate(1024);\n```\n\n## 向缓冲区写数据\n\n有两种方式可以往一个buffer里写数据：\n\n1. 从Channel往buffer里写数据。\n2. 通过buffer的`put()`方法直接往buffer里写数据。\n\n以下是一个从Channel往buffer里写数据的例子：\n\n```java\nint bytesRead = inChannel.read(buf); //read into buffer.\n```\n\n这是另一个例子，通过`put()`方法往buffer里写数据：\n\n```java\nbuf.put(127)\n```\n\n有很多其他版本的`put()`方法，允许你以各种不同的方式往buffer里写数据。比如，从指定位置开始写入，或者以字节数组的方式写入。可以查看JavaDoc获取更多buffer实现的细节。\n\n### flip()\n\n`flip()`方法用于将buffer从写模式切换成读模式。调用flip()方法会将position重设为0，同时将limit设置为先前position所在位置的值。\n\n换句话说，position现在标记的是读取的位置，而limit标记的是有多少字节，字符被写进了buffer——有多少字节，字符可以被读取。\n\n## 从缓冲区读数据\n\n有两种方式可以从缓冲区读取数据：\n\n1. 将数据从buffer读进channel。\n2. 用get()方法直接从buffer读取数据。\n\n以下是一个将数据从buffer读进channel的例子：\n\n```java\n//read from buffer into channel.\nint bytesWritten = inChannel.write(buf);\n```\n\n以下则是用get()方法从buffer读取数据的例子：\n\n```java\nbyte aByte = buf.get();    \n```\n\n有很多其他版本的get()方法，允许你以各种不同的方式从buffer读取数据。比如，从指定位置开始读取，或者以字节数组的方式读取。可以查看JavaDoc获取buffer实现的更多信息。\n\n### rewind()\n\nBuffer.rewind()方法将position设置为0，这样你可以重新读取buffer里的所有数据。limit保留未触碰的，这样仍然标记有多少元素(字节，字符等)可以从buffer读取。\n\n### clear()和compact()\n\n一旦你已经完成了从buffer里读取数据的工作，你必须让buffer做好再次写入的准备。这可以通过调用clear()方法或者compact()。\n\n如果调用clear()方法，position被设置为0，limit被设置为容量大小。换句话说，缓冲区被清空了。缓冲区里的数据没有被清除。只是这些标记告诉我们可以从哪里开始往buffer里写数据。\n\n如果缓冲区里还有未读的数据，当你调用clear()方法时，数据会被\"遗忘\"，这意味着你将不再有任何标记可以告知你哪些数据已被读取，哪些数据还未被读取。\n\n如果缓冲区里仍然有未读的数据，而你想要在之后继续读取，因为目前需要进行一些写操作，那么可以用compact()方法来取代clear()。\n\ncompact()方法会复制所有未读的数据放到缓冲区的开始位置。然后它会将position设置在最后未读元素的下一个位置。limit属性依然被设置为容量大小，就像clear()方法一样。现在buffer已经做好了写入的准备，而你不会覆盖未读的数据。\n\n### mark()和reset()\n\n你可以通过调用Buffer.mark()方法标记buffer里的某个位置。然后你在之后可以重置position到标记的位置。举例如下：\n\n```java\nbuffer.mark();\n\n//call buffer.get() a couple of times, e.g. during parsing.\n\nbuffer.reset();  //set position back to mark.  \n```\n\n### equals()和compareTo()\n\n比较两个缓冲区可以通过equals()方法和compareTo()方法。\n\n#### equals()\n\n两个buffer相等的条件如下：\n\n1. 类型相同(字节，字符，整形等)。\n2. buffer里有等量的剩余数据。\n3. 所有剩余的数据相等。\n\n如你所见，equals()方法仅比较buffer的一部分，并不比较里面所有的单个元素。实际上，它只比较buffer里剩余的数据。\n\n#### compareTo()\n\ncompareTo()方法比较两个buffer剩余元素，用于例如常规排序。一个buffer比另一个buffer小的条件如下：\n\n1. buffer的首个元素小于另一个buffer。\n2. 所有元素相等，但是第一个buffer比另一个buffer更早用完(它拥有更少的元素)。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/buffers.html) \t作者：Jakob Jenkov\n\n","slug":"Java_NIO_Buffer","published":1,"updated":"2020-12-23T15:02:16.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qq000ds2b99ljqt7jb","content":"<blockquote>\n<p>Java NIO 缓冲区和通道配合使用。如你所知，数据可以从通道读进缓冲区，也可以从缓冲区写进通道。<br>\n缓冲区本质上是一块用于数据读写的内存。这块内存被包装成NIO Buffer对象，并提供了一系列的方法使得操作内存变得更加容易。</p>\n</blockquote>\n<h2 id=\"buffer的简单用法\">Buffer的简单用法</h2>\n<p>用Buffer读写数据一般分为以下4个步骤：</p>\n<ol>\n<li>将数据写入Buffer</li>\n<li>调用buffer.flip()方法</li>\n<li>从Buffer读取数据</li>\n<li>调用buffer.clear()方法或者buffer.compact()方法</li>\n</ol>\n<p>当你往一个buffer里写数据的时候，buffer会记录你已经写了多少数据。一旦你需要读取数据，你需要调用flip()方法将buffer从写模式切换为读模式。在读模式下，你可以读取之前写入到buffer的所有数据。</p>\n<p>一旦你已经读完了所有数据，你需要情况缓冲区，使之可以再次被写入。有两种方法可以清理buffer：调用clear()方法或者调用compact()方法。clear()方法会清空整个缓冲区。compact()方法只清除已经读过的数据。任何未被读取的数据被移动到缓冲区的起始处，之后数据将从那些未读数据的后面位置开始写入。</p>\n<p>以下是一个简单的Buffer使用举例：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">RandomAccessFile</span> aFile = new RandomAccessFile(<span class=\"string\">\"data/nio-data.txt\"</span>, <span class=\"string\">\"rw\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">FileChannel</span> inChannel = aFile.getChannel()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//create <span class=\"keyword\">buffer </span>with capacity of <span class=\"number\">48</span> <span class=\"keyword\">bytes</span></span><br><span class=\"line\"><span class=\"keyword\">ByteBuffer </span><span class=\"keyword\">buf </span>= <span class=\"keyword\">ByteBuffer.allocate(48);</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">int </span><span class=\"keyword\">bytesRead </span>= inChannel.read(<span class=\"keyword\">buf); </span>//read into <span class=\"keyword\">buffer.</span></span><br><span class=\"line\"><span class=\"keyword\">while </span>(<span class=\"keyword\">bytesRead </span>!= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">buf.flip(); </span> //make <span class=\"keyword\">buffer </span>ready for read</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">while</span>(<span class=\"keyword\">buf.hasRemaining())&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>     System.out.print((char) <span class=\"keyword\">buf.get()); </span>// read <span class=\"number\">1</span> <span class=\"keyword\">byte </span>at a time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">buf.clear(); </span>//make <span class=\"keyword\">buffer </span>ready for writing</span><br><span class=\"line\">  <span class=\"keyword\">bytesRead </span>= inChannel.read(<span class=\"keyword\">buf);</span></span><br><span class=\"line\"><span class=\"keyword\">&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">aFile.close();</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"buffer的capacityposition和limit\">Buffer的Capacity，Position和Limit</h2>\n<p>buffer本质上是一块可读写的内存区域。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>\n<p>为了理解buffer的工作原理，你需要熟悉下buffer的三个属性。它们是：</p>\n<ul>\n<li>capacity</li>\n<li>position</li>\n<li>limit</li>\n</ul>\n<p><code>position</code>和<code>limit</code>的含义取决于buffer是处于读模式还是写模式。<code>capacity</code>则在读模式和写模式下拥有相同的含义。下文会详细解释，先看下原理图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/buffers-modes.png\" alt></p>\n<h3 id=\"capacity\">Capacity</h3>\n<p>作为一块内存区域，buffer有一个固定的大小值，称为&quot;capacity&quot;。你最多可以往buffer里写入capacity个byte、long、char等类型的数据。一旦buffer满了，在你往你写入更多数据前，你需要清空它(通过读取数据或者清除数据)。</p>\n<h3 id=\"position\">Position</h3>\n<p>当往buffer里写数据时，position表示当前的位置。初始的position值为0。当一个byte、long等类型数据写到buffer后，position会向前移动到下一个可插入数据的buffer单元。position最大可为capacity - 1。</p>\n<p>当从buffer读数据时，也是从某个特定位置读。当你将buffer从写模式切换到读模式，position被重置为0。这样读数据的时候就从position所在位置往前移动指向下一个位置进行数据读取。</p>\n<h3 id=\"limit\">Limit</h3>\n<p>limit在buffer写模式里的含义是你最多可以写入的数据量。写模式下limit的值等于buffer的capacity。</p>\n<p>当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）</p>\n<h2 id=\"缓冲区类型\">缓冲区类型</h2>\n<p>Java NIO 有以下缓冲区类型：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>MappedByteBuffer</li>\n<li>CharBuffer</li>\n<li>DoubleBuffer</li>\n<li>FloatBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>ShortBuffer</li>\n</ul>\n<p>如你所见，这些buffer代表了不同的数据类型。换句话说，它们可以让你在缓冲区里以char，short，int，long，float或者double类型来处理字节。</p>\n<p>MappedByteBuffer有一点特殊，会单独介绍。</p>\n<h2 id=\"分配缓冲区\">分配缓冲区</h2>\n<p>为了获得一个Buffer对象你必须先为它分配内存。每一个buffer类都有一个allocate()方法用来完成这项工作。以下是一个用<code>ByteBuffer</code>分配内存的例子，缓冲区容量大小48字节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">48</span>);</span><br></pre></td></tr></table></figure>\n<p>这是另一个例子，用<code>CharBuffer</code>类分配1024个字符大小的缓冲区：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharBuffer buf = CharBuffer.allocate(<span class=\"number\">1024</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"向缓冲区写数据\">向缓冲区写数据</h2>\n<p>有两种方式可以往一个buffer里写数据：</p>\n<ol>\n<li>从Channel往buffer里写数据。</li>\n<li>通过buffer的<code>put()</code>方法直接往buffer里写数据。</li>\n</ol>\n<p>以下是一个从Channel往buffer里写数据的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> bytesRead = inChannel.read(buf); <span class=\"comment\">//read into buffer.</span></span><br></pre></td></tr></table></figure>\n<p>这是另一个例子，通过<code>put()</code>方法往buffer里写数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.put(<span class=\"number\">127</span>)</span><br></pre></td></tr></table></figure>\n<p>有很多其他版本的<code>put()</code>方法，允许你以各种不同的方式往buffer里写数据。比如，从指定位置开始写入，或者以字节数组的方式写入。可以查看JavaDoc获取更多buffer实现的细节。</p>\n<h3 id=\"flip\">flip()</h3>\n<p><code>flip()</code>方法用于将buffer从写模式切换成读模式。调用flip()方法会将position重设为0，同时将limit设置为先前position所在位置的值。</p>\n<p>换句话说，position现在标记的是读取的位置，而limit标记的是有多少字节，字符被写进了buffer——有多少字节，字符可以被读取。</p>\n<h2 id=\"从缓冲区读数据\">从缓冲区读数据</h2>\n<p>有两种方式可以从缓冲区读取数据：</p>\n<ol>\n<li>将数据从buffer读进channel。</li>\n<li>用get()方法直接从buffer读取数据。</li>\n</ol>\n<p>以下是一个将数据从buffer读进channel的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//read from buffer into channel.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure>\n<p>以下则是用get()方法从buffer读取数据的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure>\n<p>有很多其他版本的get()方法，允许你以各种不同的方式从buffer读取数据。比如，从指定位置开始读取，或者以字节数组的方式读取。可以查看JavaDoc获取buffer实现的更多信息。</p>\n<h3 id=\"rewind\">rewind()</h3>\n<p>Buffer.rewind()方法将position设置为0，这样你可以重新读取buffer里的所有数据。limit保留未触碰的，这样仍然标记有多少元素(字节，字符等)可以从buffer读取。</p>\n<h3 id=\"clear和compact\">clear()和compact()</h3>\n<p>一旦你已经完成了从buffer里读取数据的工作，你必须让buffer做好再次写入的准备。这可以通过调用clear()方法或者compact()。</p>\n<p>如果调用clear()方法，position被设置为0，limit被设置为容量大小。换句话说，缓冲区被清空了。缓冲区里的数据没有被清除。只是这些标记告诉我们可以从哪里开始往buffer里写数据。</p>\n<p>如果缓冲区里还有未读的数据，当你调用clear()方法时，数据会被&quot;遗忘&quot;，这意味着你将不再有任何标记可以告知你哪些数据已被读取，哪些数据还未被读取。</p>\n<p>如果缓冲区里仍然有未读的数据，而你想要在之后继续读取，因为目前需要进行一些写操作，那么可以用compact()方法来取代clear()。</p>\n<p>compact()方法会复制所有未读的数据放到缓冲区的开始位置。然后它会将position设置在最后未读元素的下一个位置。limit属性依然被设置为容量大小，就像clear()方法一样。现在buffer已经做好了写入的准备，而你不会覆盖未读的数据。</p>\n<h3 id=\"mark和reset\">mark()和reset()</h3>\n<p>你可以通过调用Buffer.mark()方法标记buffer里的某个位置。然后你在之后可以重置position到标记的位置。举例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffer.mark();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call buffer.get() a couple of times, e.g. during parsing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">buffer.reset();  <span class=\"comment\">//set position back to mark.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"equals和compareto\">equals()和compareTo()</h3>\n<p>比较两个缓冲区可以通过equals()方法和compareTo()方法。</p>\n<h4 id=\"equals\">equals()</h4>\n<p>两个buffer相等的条件如下：</p>\n<ol>\n<li>类型相同(字节，字符，整形等)。</li>\n<li>buffer里有等量的剩余数据。</li>\n<li>所有剩余的数据相等。</li>\n</ol>\n<p>如你所见，equals()方法仅比较buffer的一部分，并不比较里面所有的单个元素。实际上，它只比较buffer里剩余的数据。</p>\n<h4 id=\"compareto\">compareTo()</h4>\n<p>compareTo()方法比较两个buffer剩余元素，用于例如常规排序。一个buffer比另一个buffer小的条件如下：</p>\n<ol>\n<li>buffer的首个元素小于另一个buffer。</li>\n<li>所有元素相等，但是第一个buffer比另一个buffer更早用完(它拥有更少的元素)。</li>\n</ol>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/buffers.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Java NIO 缓冲区和通道配合使用。如你所知，数据可以从通道读进缓冲区，也可以从缓冲区写进通道。<br>\n缓冲区本质上是一块用于数据读写的内存。这块内存被包装成NIO Buffer对象，并提供了一系列的方法使得操作内存变得更加容易。</p>\n</blockquote>\n<h2>Buffer的简单用法</h2>\n<p>用Buffer读写数据一般分为以下4个步骤：</p>\n<ol>\n<li>将数据写入Buffer</li>\n<li>调用buffer.flip()方法</li>\n<li>从Buffer读取数据</li>\n<li>调用buffer.clear()方法或者buffer.compact()方法</li>\n</ol>\n<p>当你往一个buffer里写数据的时候，buffer会记录你已经写了多少数据。一旦你需要读取数据，你需要调用flip()方法将buffer从写模式切换为读模式。在读模式下，你可以读取之前写入到buffer的所有数据。</p>\n<p>一旦你已经读完了所有数据，你需要情况缓冲区，使之可以再次被写入。有两种方法可以清理buffer：调用clear()方法或者调用compact()方法。clear()方法会清空整个缓冲区。compact()方法只清除已经读过的数据。任何未被读取的数据被移动到缓冲区的起始处，之后数据将从那些未读数据的后面位置开始写入。</p>\n<p>以下是一个简单的Buffer使用举例：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">RandomAccessFile</span> aFile = new RandomAccessFile(<span class=\"string\">\"data/nio-data.txt\"</span>, <span class=\"string\">\"rw\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">FileChannel</span> inChannel = aFile.getChannel()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//create <span class=\"keyword\">buffer </span>with capacity of <span class=\"number\">48</span> <span class=\"keyword\">bytes</span></span><br><span class=\"line\"><span class=\"keyword\">ByteBuffer </span><span class=\"keyword\">buf </span>= <span class=\"keyword\">ByteBuffer.allocate(48);</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">int </span><span class=\"keyword\">bytesRead </span>= inChannel.read(<span class=\"keyword\">buf); </span>//read into <span class=\"keyword\">buffer.</span></span><br><span class=\"line\"><span class=\"keyword\">while </span>(<span class=\"keyword\">bytesRead </span>!= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">buf.flip(); </span> //make <span class=\"keyword\">buffer </span>ready for read</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">while</span>(<span class=\"keyword\">buf.hasRemaining())&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>     System.out.print((char) <span class=\"keyword\">buf.get()); </span>// read <span class=\"number\">1</span> <span class=\"keyword\">byte </span>at a time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">buf.clear(); </span>//make <span class=\"keyword\">buffer </span>ready for writing</span><br><span class=\"line\">  <span class=\"keyword\">bytesRead </span>= inChannel.read(<span class=\"keyword\">buf);</span></span><br><span class=\"line\"><span class=\"keyword\">&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">aFile.close();</span></span><br></pre></td></tr></table></figure>\n<h2>Buffer的Capacity，Position和Limit</h2>\n<p>buffer本质上是一块可读写的内存区域。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>\n<p>为了理解buffer的工作原理，你需要熟悉下buffer的三个属性。它们是：</p>\n<ul>\n<li>capacity</li>\n<li>position</li>\n<li>limit</li>\n</ul>\n<p><code>position</code>和<code>limit</code>的含义取决于buffer是处于读模式还是写模式。<code>capacity</code>则在读模式和写模式下拥有相同的含义。下文会详细解释，先看下原理图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/buffers-modes.png\" alt></p>\n<h3>Capacity</h3>\n<p>作为一块内存区域，buffer有一个固定的大小值，称为&quot;capacity&quot;。你最多可以往buffer里写入capacity个byte、long、char等类型的数据。一旦buffer满了，在你往你写入更多数据前，你需要清空它(通过读取数据或者清除数据)。</p>\n<h3>Position</h3>\n<p>当往buffer里写数据时，position表示当前的位置。初始的position值为0。当一个byte、long等类型数据写到buffer后，position会向前移动到下一个可插入数据的buffer单元。position最大可为capacity - 1。</p>\n<p>当从buffer读数据时，也是从某个特定位置读。当你将buffer从写模式切换到读模式，position被重置为0。这样读数据的时候就从position所在位置往前移动指向下一个位置进行数据读取。</p>\n<h3>Limit</h3>\n<p>limit在buffer写模式里的含义是你最多可以写入的数据量。写模式下limit的值等于buffer的capacity。</p>\n<p>当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）</p>\n<h2>缓冲区类型</h2>\n<p>Java NIO 有以下缓冲区类型：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>MappedByteBuffer</li>\n<li>CharBuffer</li>\n<li>DoubleBuffer</li>\n<li>FloatBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>ShortBuffer</li>\n</ul>\n<p>如你所见，这些buffer代表了不同的数据类型。换句话说，它们可以让你在缓冲区里以char，short，int，long，float或者double类型来处理字节。</p>\n<p>MappedByteBuffer有一点特殊，会单独介绍。</p>\n<h2>分配缓冲区</h2>\n<p>为了获得一个Buffer对象你必须先为它分配内存。每一个buffer类都有一个allocate()方法用来完成这项工作。以下是一个用<code>ByteBuffer</code>分配内存的例子，缓冲区容量大小48字节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">48</span>);</span><br></pre></td></tr></table></figure>\n<p>这是另一个例子，用<code>CharBuffer</code>类分配1024个字符大小的缓冲区：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharBuffer buf = CharBuffer.allocate(<span class=\"number\">1024</span>);</span><br></pre></td></tr></table></figure>\n<h2>向缓冲区写数据</h2>\n<p>有两种方式可以往一个buffer里写数据：</p>\n<ol>\n<li>从Channel往buffer里写数据。</li>\n<li>通过buffer的<code>put()</code>方法直接往buffer里写数据。</li>\n</ol>\n<p>以下是一个从Channel往buffer里写数据的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> bytesRead = inChannel.read(buf); <span class=\"comment\">//read into buffer.</span></span><br></pre></td></tr></table></figure>\n<p>这是另一个例子，通过<code>put()</code>方法往buffer里写数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.put(<span class=\"number\">127</span>)</span><br></pre></td></tr></table></figure>\n<p>有很多其他版本的<code>put()</code>方法，允许你以各种不同的方式往buffer里写数据。比如，从指定位置开始写入，或者以字节数组的方式写入。可以查看JavaDoc获取更多buffer实现的细节。</p>\n<h3>flip()</h3>\n<p><code>flip()</code>方法用于将buffer从写模式切换成读模式。调用flip()方法会将position重设为0，同时将limit设置为先前position所在位置的值。</p>\n<p>换句话说，position现在标记的是读取的位置，而limit标记的是有多少字节，字符被写进了buffer——有多少字节，字符可以被读取。</p>\n<h2>从缓冲区读数据</h2>\n<p>有两种方式可以从缓冲区读取数据：</p>\n<ol>\n<li>将数据从buffer读进channel。</li>\n<li>用get()方法直接从buffer读取数据。</li>\n</ol>\n<p>以下是一个将数据从buffer读进channel的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//read from buffer into channel.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure>\n<p>以下则是用get()方法从buffer读取数据的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure>\n<p>有很多其他版本的get()方法，允许你以各种不同的方式从buffer读取数据。比如，从指定位置开始读取，或者以字节数组的方式读取。可以查看JavaDoc获取buffer实现的更多信息。</p>\n<h3>rewind()</h3>\n<p>Buffer.rewind()方法将position设置为0，这样你可以重新读取buffer里的所有数据。limit保留未触碰的，这样仍然标记有多少元素(字节，字符等)可以从buffer读取。</p>\n<h3>clear()和compact()</h3>\n<p>一旦你已经完成了从buffer里读取数据的工作，你必须让buffer做好再次写入的准备。这可以通过调用clear()方法或者compact()。</p>\n<p>如果调用clear()方法，position被设置为0，limit被设置为容量大小。换句话说，缓冲区被清空了。缓冲区里的数据没有被清除。只是这些标记告诉我们可以从哪里开始往buffer里写数据。</p>\n<p>如果缓冲区里还有未读的数据，当你调用clear()方法时，数据会被&quot;遗忘&quot;，这意味着你将不再有任何标记可以告知你哪些数据已被读取，哪些数据还未被读取。</p>\n<p>如果缓冲区里仍然有未读的数据，而你想要在之后继续读取，因为目前需要进行一些写操作，那么可以用compact()方法来取代clear()。</p>\n<p>compact()方法会复制所有未读的数据放到缓冲区的开始位置。然后它会将position设置在最后未读元素的下一个位置。limit属性依然被设置为容量大小，就像clear()方法一样。现在buffer已经做好了写入的准备，而你不会覆盖未读的数据。</p>\n<h3>mark()和reset()</h3>\n<p>你可以通过调用Buffer.mark()方法标记buffer里的某个位置。然后你在之后可以重置position到标记的位置。举例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffer.mark();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call buffer.get() a couple of times, e.g. during parsing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">buffer.reset();  <span class=\"comment\">//set position back to mark.</span></span><br></pre></td></tr></table></figure>\n<h3>equals()和compareTo()</h3>\n<p>比较两个缓冲区可以通过equals()方法和compareTo()方法。</p>\n<h4>equals()</h4>\n<p>两个buffer相等的条件如下：</p>\n<ol>\n<li>类型相同(字节，字符，整形等)。</li>\n<li>buffer里有等量的剩余数据。</li>\n<li>所有剩余的数据相等。</li>\n</ol>\n<p>如你所见，equals()方法仅比较buffer的一部分，并不比较里面所有的单个元素。实际上，它只比较buffer里剩余的数据。</p>\n<h4>compareTo()</h4>\n<p>compareTo()方法比较两个buffer剩余元素，用于例如常规排序。一个buffer比另一个buffer小的条件如下：</p>\n<ol>\n<li>buffer的首个元素小于另一个buffer。</li>\n<li>所有元素相等，但是第一个buffer比另一个buffer更早用完(它拥有更少的元素)。</li>\n</ol>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/buffers.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n"},{"title":"Raspbian安装Vim","date":"2018-09-30T16:00:00.000Z","catalog":true,"_content":"## 安装：\n执行如下命令：\n\n``` bash\nsudo apt-get remove vim-common\nsudo apt-get install vim -y\n```\n## 配置\n用命令`vim ~/.vimrc`打开配置文件，输入以下配置：\n```\nsyn on\nset number\n```","source":"_posts/Install_Vim_for_Raspbian.md","raw":"---\ntitle: Raspbian安装Vim\ndate: 2018-10-01\ncatalog: true\ntags:\n- 树莓派\n---\n## 安装：\n执行如下命令：\n\n``` bash\nsudo apt-get remove vim-common\nsudo apt-get install vim -y\n```\n## 配置\n用命令`vim ~/.vimrc`打开配置文件，输入以下配置：\n```\nsyn on\nset number\n```","slug":"Install_Vim_for_Raspbian","published":1,"updated":"2020-12-23T15:02:16.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qr000fs2b91hbym0ss","content":"<h2 id=\"安装\">安装：</h2>\n<p>执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\">配置</h2>\n<p>用命令<code>vim ~/.vimrc</code>打开配置文件，输入以下配置：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syn <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">number</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>安装：</h2>\n<p>执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure>\n<h2>配置</h2>\n<p>用命令<code>vim ~/.vimrc</code>打开配置文件，输入以下配置：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syn <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">number</span></span><br></pre></td></tr></table></figure>"},{"title":"无线无屏幕安装树莓派","date":"2019-02-17T16:00:00.000Z","catalog":true,"_content":"\n## 准备材料\n\n- 一张micro SD卡，推荐容量8G以上\n- 一个读卡器\n- 一台mac电脑\n- 一个5V 2A的USB Micro接口的电源\n- 一个下载好的系统镜像\n\n## 安装步骤\n\n### 制作系统盘\n\n1. 把SD卡插进读卡器，再插进Mac，用自带应用Disk Utility将sd卡格式化为FAT32（FAT或MS-DOS）分区格式。\n\n2. 用Etcher将镜像文件烧进sd卡。\n\n3. 在sd卡根目录(`/Volumes/boot`)创建一个`wpa_supplicant.conf`文件，内容如下：\n\n   ```\n   country=CN\n   ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n   update_config=1\n   \n   network={\n       ssid=\"WiFi名称\"\n       psk=\"WiFi密码\"\n       key_mgmt=WPA-PSK\n       priority=1\n   }\n   ```\n\n4. 在sd卡根目录创建一个空的ssh文件，这将允许树莓派启用ssh。\n\n### SSH免密登录\n\n1. 将sd卡插入树莓派，接上电源，等指示灯停止闪烁之后，从路由器管理后台查看树莓派的ip地址。  \n2. 通过以下命令将电脑公钥发送给树莓派：  \n```\n   ssh-copy-id pi@192.168.21.172\n```\n之后将提示输入pi用户的密码，初始密码为：raspberry\n\n3. 使用`ssh pi@192.168.21.172`免密登录服务器\n\n## 系统配置\n### 启用root账号\n\n解锁root账号\n\n`sudo passwd --unlock root`\n\n设置root密码\n\n`sudo passwd root`\n\n### 安装vim\n``` bash\nsudo apt-get remove vim-common\nsudo apt-get install vim -y\n```\n用命令`vim ~/.vimrc`打开配置文件，配置语法高亮：\n\n```\nsyn on\n```\n### 修改主机名\n\n`sudo vim /etc/hostname`\n\n替换内容为model3B\n\n`sudo vim /etc/hosts`\n\n替换`127.0.0.1 raspberry` 为`127.0.0.1 model3B`\n\n\n### 替换Raspbian软件源\n\n#### 备用原文件\n\n```bash\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\nsudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak\n```\n\n#### 编辑软件源配置\n\n1. 用命令`sudo vim /etc/apt/sources.list`打开配置文件。\n2. 删除原文件内容，用以下内容取代：\n\n```bash\ndeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi\n```\n\n*注：此处示例为**stretch**系统，**jessie**和**wheezy**类推。*\n\n#### 编辑系统源配置\n\n1. 编辑系统更新源文件，参考命令：`sudo vim /etc/apt/sources.list.d/raspi.list`。\n2. 修改首行网址，如下：\n\n```bash\ndeb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui\ndeb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui\n# Uncomment line below then 'apt-get update' to enable 'apt-get source'\n#deb-src http://archive.raspberrypi.org/debian/ stretch main ui\n```\n\n#### 更新\n\n```bash\n#更新软件源列表\nsudo apt-get update\n#更新软件版本\nsudo apt-get upgrade（耗时操作）\nsudo apt-get dist-upgrade\n#更新系统内核\nsudo rpi-update（耗时操作）\n```\n\n#### 配置npm镜像\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n### 更改分区文件大小\n\n#### 编辑分区文件\n\n```bash\nsudo vim /etc/dphys-swapfile\n```\n\n#### 修改配置\n\n```\nCONF_SWAPSIZE=1024\n```\n\n*备注：默认配置为100（M）*\n\n#### 重启服务\n\n```bash\nsudo /etc/init.d/dphys-swapfile stop\nsudo /etc/init.d/dphys-swapfile start\n```\n\n#### 查看内存\n\n```bash\nfree -m\n```\n\n","source":"_posts/Install_Raspbian_for_Raspberry_Pi.md","raw":"---\ntitle: 无线无屏幕安装树莓派\ndate: 2019-02-18\ncatalog: true\ntags:\n- 树莓派\n---\n\n## 准备材料\n\n- 一张micro SD卡，推荐容量8G以上\n- 一个读卡器\n- 一台mac电脑\n- 一个5V 2A的USB Micro接口的电源\n- 一个下载好的系统镜像\n\n## 安装步骤\n\n### 制作系统盘\n\n1. 把SD卡插进读卡器，再插进Mac，用自带应用Disk Utility将sd卡格式化为FAT32（FAT或MS-DOS）分区格式。\n\n2. 用Etcher将镜像文件烧进sd卡。\n\n3. 在sd卡根目录(`/Volumes/boot`)创建一个`wpa_supplicant.conf`文件，内容如下：\n\n   ```\n   country=CN\n   ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n   update_config=1\n   \n   network={\n       ssid=\"WiFi名称\"\n       psk=\"WiFi密码\"\n       key_mgmt=WPA-PSK\n       priority=1\n   }\n   ```\n\n4. 在sd卡根目录创建一个空的ssh文件，这将允许树莓派启用ssh。\n\n### SSH免密登录\n\n1. 将sd卡插入树莓派，接上电源，等指示灯停止闪烁之后，从路由器管理后台查看树莓派的ip地址。  \n2. 通过以下命令将电脑公钥发送给树莓派：  \n```\n   ssh-copy-id pi@192.168.21.172\n```\n之后将提示输入pi用户的密码，初始密码为：raspberry\n\n3. 使用`ssh pi@192.168.21.172`免密登录服务器\n\n## 系统配置\n### 启用root账号\n\n解锁root账号\n\n`sudo passwd --unlock root`\n\n设置root密码\n\n`sudo passwd root`\n\n### 安装vim\n``` bash\nsudo apt-get remove vim-common\nsudo apt-get install vim -y\n```\n用命令`vim ~/.vimrc`打开配置文件，配置语法高亮：\n\n```\nsyn on\n```\n### 修改主机名\n\n`sudo vim /etc/hostname`\n\n替换内容为model3B\n\n`sudo vim /etc/hosts`\n\n替换`127.0.0.1 raspberry` 为`127.0.0.1 model3B`\n\n\n### 替换Raspbian软件源\n\n#### 备用原文件\n\n```bash\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\nsudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak\n```\n\n#### 编辑软件源配置\n\n1. 用命令`sudo vim /etc/apt/sources.list`打开配置文件。\n2. 删除原文件内容，用以下内容取代：\n\n```bash\ndeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi\n```\n\n*注：此处示例为**stretch**系统，**jessie**和**wheezy**类推。*\n\n#### 编辑系统源配置\n\n1. 编辑系统更新源文件，参考命令：`sudo vim /etc/apt/sources.list.d/raspi.list`。\n2. 修改首行网址，如下：\n\n```bash\ndeb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui\ndeb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui\n# Uncomment line below then 'apt-get update' to enable 'apt-get source'\n#deb-src http://archive.raspberrypi.org/debian/ stretch main ui\n```\n\n#### 更新\n\n```bash\n#更新软件源列表\nsudo apt-get update\n#更新软件版本\nsudo apt-get upgrade（耗时操作）\nsudo apt-get dist-upgrade\n#更新系统内核\nsudo rpi-update（耗时操作）\n```\n\n#### 配置npm镜像\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n### 更改分区文件大小\n\n#### 编辑分区文件\n\n```bash\nsudo vim /etc/dphys-swapfile\n```\n\n#### 修改配置\n\n```\nCONF_SWAPSIZE=1024\n```\n\n*备注：默认配置为100（M）*\n\n#### 重启服务\n\n```bash\nsudo /etc/init.d/dphys-swapfile stop\nsudo /etc/init.d/dphys-swapfile start\n```\n\n#### 查看内存\n\n```bash\nfree -m\n```\n\n","slug":"Install_Raspbian_for_Raspberry_Pi","published":1,"updated":"2020-12-23T15:02:16.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qu000is2b90miq2z1z","content":"<h2 id=\"准备材料\">准备材料</h2>\n<ul>\n<li>一张micro SD卡，推荐容量8G以上</li>\n<li>一个读卡器</li>\n<li>一台mac电脑</li>\n<li>一个5V 2A的USB Micro接口的电源</li>\n<li>一个下载好的系统镜像</li>\n</ul>\n<h2 id=\"安装步骤\">安装步骤</h2>\n<h3 id=\"制作系统盘\">制作系统盘</h3>\n<ol>\n<li>\n<p>把SD卡插进读卡器，再插进Mac，用自带应用Disk Utility将sd卡格式化为FAT32（FAT或MS-DOS）分区格式。</p>\n</li>\n<li>\n<p>用Etcher将镜像文件烧进sd卡。</p>\n</li>\n<li>\n<p>在sd卡根目录(<code>/Volumes/boot</code>)创建一个<code>wpa_supplicant.conf</code>文件，内容如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">country</span>=CN</span><br><span class=\"line\"><span class=\"attribute\">ctrl_interface</span>=DIR=/var/run/wpa_supplicant <span class=\"attribute\">GROUP</span>=netdev</span><br><span class=\"line\"><span class=\"attribute\">update_config</span>=1</span><br><span class=\"line\"></span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">    <span class=\"attribute\">ssid</span>=<span class=\"string\">\"WiFi名称\"</span></span><br><span class=\"line\">    <span class=\"attribute\">psk</span>=<span class=\"string\">\"WiFi密码\"</span></span><br><span class=\"line\">    <span class=\"attribute\">key_mgmt</span>=WPA-PSK</span><br><span class=\"line\">    <span class=\"attribute\">priority</span>=1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在sd卡根目录创建一个空的ssh文件，这将允许树莓派启用ssh。</p>\n</li>\n</ol>\n<h3 id=\"ssh免密登录\">SSH免密登录</h3>\n<ol>\n<li>将sd卡插入树莓派，接上电源，等指示灯停止闪烁之后，从路由器管理后台查看树莓派的ip地址。</li>\n<li>通过以下命令将电脑公钥发送给树莓派：</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh-copy-id</span> <span class=\"selector-tag\">pi</span>@<span class=\"keyword\">192</span>.<span class=\"keyword\">168</span>.<span class=\"keyword\">21</span>.<span class=\"keyword\">172</span></span><br></pre></td></tr></table></figure>\n<p>之后将提示输入pi用户的密码，初始密码为：raspberry</p>\n<ol start=\"3\">\n<li>使用<code>ssh pi@192.168.21.172</code>免密登录服务器</li>\n</ol>\n<h2 id=\"系统配置\">系统配置</h2>\n<h3 id=\"启用root账号\">启用root账号</h3>\n<p>解锁root账号</p>\n<p><code>sudo passwd --unlock root</code></p>\n<p>设置root密码</p>\n<p><code>sudo passwd root</code></p>\n<h3 id=\"安装vim\">安装vim</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure>\n<p>用命令<code>vim ~/.vimrc</code>打开配置文件，配置语法高亮：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syn <span class=\"keyword\">on</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改主机名\">修改主机名</h3>\n<p><code>sudo vim /etc/hostname</code></p>\n<p>替换内容为model3B</p>\n<p><code>sudo vim /etc/hosts</code></p>\n<p>替换<code>127.0.0.1 raspberry</code> 为<code>127.0.0.1 model3B</code></p>\n<h3 id=\"替换raspbian软件源\">替换Raspbian软件源</h3>\n<h4 id=\"备用原文件\">备用原文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑软件源配置\">编辑软件源配置</h4>\n<ol>\n<li>用命令<code>sudo vim /etc/apt/sources.list</code>打开配置文件。</li>\n<li>删除原文件内容，用以下内容取代：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class=\"line\">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure>\n<p><em>注：此处示例为</em><em>stretch</em><em>系统，<strong>jessie</strong>和</em><em>wheezy</em><em>类推。</em></p>\n<h4 id=\"编辑系统源配置\">编辑系统源配置</h4>\n<ol>\n<li>编辑系统更新源文件，参考命令：<code>sudo vim /etc/apt/sources.list.d/raspi.list</code>。</li>\n<li>修改首行网址，如下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class=\"line\">deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class=\"line\"><span class=\"comment\"># Uncomment line below then 'apt-get update' to enable 'apt-get source'</span></span><br><span class=\"line\"><span class=\"comment\">#deb-src http://archive.raspberrypi.org/debian/ stretch main ui</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"更新\">更新</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#更新软件源列表</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"comment\">#更新软件版本</span></span><br><span class=\"line\">sudo apt-get upgrade（耗时操作）</span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\"><span class=\"comment\">#更新系统内核</span></span><br><span class=\"line\">sudo rpi-update（耗时操作）</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置npm镜像\">配置npm镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改分区文件大小\">更改分区文件大小</h3>\n<h4 id=\"编辑分区文件\">编辑分区文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/dphys-swapfile</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改配置\">修改配置</h4>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">1024</span></span><br></pre></td></tr></table></figure>\n<p><em>备注：默认配置为100（M）</em></p>\n<h4 id=\"重启服务\">重启服务</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/dphys-swapfile stop</span><br><span class=\"line\">sudo /etc/init.d/dphys-swapfile start</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看内存\">查看内存</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>准备材料</h2>\n<ul>\n<li>一张micro SD卡，推荐容量8G以上</li>\n<li>一个读卡器</li>\n<li>一台mac电脑</li>\n<li>一个5V 2A的USB Micro接口的电源</li>\n<li>一个下载好的系统镜像</li>\n</ul>\n<h2>安装步骤</h2>\n<h3>制作系统盘</h3>\n<ol>\n<li>\n<p>把SD卡插进读卡器，再插进Mac，用自带应用Disk Utility将sd卡格式化为FAT32（FAT或MS-DOS）分区格式。</p>\n</li>\n<li>\n<p>用Etcher将镜像文件烧进sd卡。</p>\n</li>\n<li>\n<p>在sd卡根目录(<code>/Volumes/boot</code>)创建一个<code>wpa_supplicant.conf</code>文件，内容如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">country</span>=CN</span><br><span class=\"line\"><span class=\"attribute\">ctrl_interface</span>=DIR=/var/run/wpa_supplicant <span class=\"attribute\">GROUP</span>=netdev</span><br><span class=\"line\"><span class=\"attribute\">update_config</span>=1</span><br><span class=\"line\"></span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">    <span class=\"attribute\">ssid</span>=<span class=\"string\">\"WiFi名称\"</span></span><br><span class=\"line\">    <span class=\"attribute\">psk</span>=<span class=\"string\">\"WiFi密码\"</span></span><br><span class=\"line\">    <span class=\"attribute\">key_mgmt</span>=WPA-PSK</span><br><span class=\"line\">    <span class=\"attribute\">priority</span>=1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在sd卡根目录创建一个空的ssh文件，这将允许树莓派启用ssh。</p>\n</li>\n</ol>\n<h3>SSH免密登录</h3>\n<ol>\n<li>将sd卡插入树莓派，接上电源，等指示灯停止闪烁之后，从路由器管理后台查看树莓派的ip地址。</li>\n<li>通过以下命令将电脑公钥发送给树莓派：</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh-copy-id</span> <span class=\"selector-tag\">pi</span>@<span class=\"keyword\">192</span>.<span class=\"keyword\">168</span>.<span class=\"keyword\">21</span>.<span class=\"keyword\">172</span></span><br></pre></td></tr></table></figure>\n<p>之后将提示输入pi用户的密码，初始密码为：raspberry</p>\n<ol start=\"3\">\n<li>使用<code>ssh pi@192.168.21.172</code>免密登录服务器</li>\n</ol>\n<h2>系统配置</h2>\n<h3>启用root账号</h3>\n<p>解锁root账号</p>\n<p><code>sudo passwd --unlock root</code></p>\n<p>设置root密码</p>\n<p><code>sudo passwd root</code></p>\n<h3>安装vim</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure>\n<p>用命令<code>vim ~/.vimrc</code>打开配置文件，配置语法高亮：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syn <span class=\"keyword\">on</span></span><br></pre></td></tr></table></figure>\n<h3>修改主机名</h3>\n<p><code>sudo vim /etc/hostname</code></p>\n<p>替换内容为model3B</p>\n<p><code>sudo vim /etc/hosts</code></p>\n<p>替换<code>127.0.0.1 raspberry</code> 为<code>127.0.0.1 model3B</code></p>\n<h3>替换Raspbian软件源</h3>\n<h4>备用原文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure>\n<h4>编辑软件源配置</h4>\n<ol>\n<li>用命令<code>sudo vim /etc/apt/sources.list</code>打开配置文件。</li>\n<li>删除原文件内容，用以下内容取代：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class=\"line\">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure>\n<p><em>注：此处示例为</em><em>stretch</em><em>系统，<strong>jessie</strong>和</em><em>wheezy</em><em>类推。</em></p>\n<h4>编辑系统源配置</h4>\n<ol>\n<li>编辑系统更新源文件，参考命令：<code>sudo vim /etc/apt/sources.list.d/raspi.list</code>。</li>\n<li>修改首行网址，如下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class=\"line\">deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class=\"line\"><span class=\"comment\"># Uncomment line below then 'apt-get update' to enable 'apt-get source'</span></span><br><span class=\"line\"><span class=\"comment\">#deb-src http://archive.raspberrypi.org/debian/ stretch main ui</span></span><br></pre></td></tr></table></figure>\n<h4>更新</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#更新软件源列表</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"comment\">#更新软件版本</span></span><br><span class=\"line\">sudo apt-get upgrade（耗时操作）</span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\"><span class=\"comment\">#更新系统内核</span></span><br><span class=\"line\">sudo rpi-update（耗时操作）</span><br></pre></td></tr></table></figure>\n<h4>配置npm镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3>更改分区文件大小</h3>\n<h4>编辑分区文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/dphys-swapfile</span><br></pre></td></tr></table></figure>\n<h4>修改配置</h4>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">1024</span></span><br></pre></td></tr></table></figure>\n<p><em>备注：默认配置为100（M）</em></p>\n<h4>重启服务</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/dphys-swapfile stop</span><br><span class=\"line\">sudo /etc/init.d/dphys-swapfile start</span><br></pre></td></tr></table></figure>\n<h4>查看内存</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n"},{"title":"Java NIO 通道","date":"2019-03-19T16:00:00.000Z","catalog":true,"_content":"Java NIO 通道和流很像，但有一些区别：\n\n- 你既可以往通道里写数据，也可以从通道读数据。流一般只支持读或写。\n- 通道可以支持异步读写。\n- 通道要么将数据读入缓冲区，要么从缓冲区写数据到通道。\n\n上文提到，你可以从通道将数据读入缓冲区，也可以从缓冲区将数据写入通道。以下是一个示意图：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png)\n\n## 通道实现\n\n以下是Java NIO框架里最重要的几个通道的具体实现：\n\n- FileChannel\n- DatagramChannel\n- SocketChannel\n- ServerSocketChannel\n\nFileChannel 用于文件之间的数据读写。\n\nDatagramChannel 可以在网络上基于UDP进行数据读写。\n\nSocketChannel 可以在网络上基于TCP进行数据读写。\n\nServerSocketChannel 允许你监听TCP连接请求，就像web服务器那样。对于每一个连接请求会创建一个SocketChannel。\n\n## 通道简单例子\n\n以下是一个使用FileChannel将一些数据读进一个缓冲区的例子：\n\n```java\n\tRandomAccessFile aFile = new RandomAccessFile(\"data/nio-data.txt\", \"rw\");\n    FileChannel inChannel = aFile.getChannel();\n\n    ByteBuffer buf = ByteBuffer.allocate(48);\n\n    int bytesRead = inChannel.read(buf);\n    while (bytesRead != -1) {\n\n      System.out.println(\"Read \" + bytesRead);\n      buf.flip();\n\n      while(buf.hasRemaining()){\n          System.out.print((char) buf.get());\n      }\n\n      buf.clear();\n      bytesRead = inChannel.read(buf);\n    }\n    aFile.close();\n```\n\n这里要留意下`buf.flip()`的调用。首先将数据读进缓冲区。然后反转它。接着你就可以从里面往外读数据。在下一节我将会进一步讲解更加详细的细节。                            \n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/channels.html) \t作者：Jakob Jenkov","source":"_posts/Java_NIO_Channel.md","raw":"---\ntitle: Java NIO 通道\ndate: 2019-03-20\ncatalog: true\ntags:\n- NIO\n---\nJava NIO 通道和流很像，但有一些区别：\n\n- 你既可以往通道里写数据，也可以从通道读数据。流一般只支持读或写。\n- 通道可以支持异步读写。\n- 通道要么将数据读入缓冲区，要么从缓冲区写数据到通道。\n\n上文提到，你可以从通道将数据读入缓冲区，也可以从缓冲区将数据写入通道。以下是一个示意图：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png)\n\n## 通道实现\n\n以下是Java NIO框架里最重要的几个通道的具体实现：\n\n- FileChannel\n- DatagramChannel\n- SocketChannel\n- ServerSocketChannel\n\nFileChannel 用于文件之间的数据读写。\n\nDatagramChannel 可以在网络上基于UDP进行数据读写。\n\nSocketChannel 可以在网络上基于TCP进行数据读写。\n\nServerSocketChannel 允许你监听TCP连接请求，就像web服务器那样。对于每一个连接请求会创建一个SocketChannel。\n\n## 通道简单例子\n\n以下是一个使用FileChannel将一些数据读进一个缓冲区的例子：\n\n```java\n\tRandomAccessFile aFile = new RandomAccessFile(\"data/nio-data.txt\", \"rw\");\n    FileChannel inChannel = aFile.getChannel();\n\n    ByteBuffer buf = ByteBuffer.allocate(48);\n\n    int bytesRead = inChannel.read(buf);\n    while (bytesRead != -1) {\n\n      System.out.println(\"Read \" + bytesRead);\n      buf.flip();\n\n      while(buf.hasRemaining()){\n          System.out.print((char) buf.get());\n      }\n\n      buf.clear();\n      bytesRead = inChannel.read(buf);\n    }\n    aFile.close();\n```\n\n这里要留意下`buf.flip()`的调用。首先将数据读进缓冲区。然后反转它。接着你就可以从里面往外读数据。在下一节我将会进一步讲解更加详细的细节。                            \n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/channels.html) \t作者：Jakob Jenkov","slug":"Java_NIO_Channel","published":1,"updated":"2020-12-23T15:02:16.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qv000js2b9z8kk4rvz","content":"<p>Java NIO 通道和流很像，但有一些区别：</p>\n<ul>\n<li>你既可以往通道里写数据，也可以从通道读数据。流一般只支持读或写。</li>\n<li>通道可以支持异步读写。</li>\n<li>通道要么将数据读入缓冲区，要么从缓冲区写数据到通道。</li>\n</ul>\n<p>上文提到，你可以从通道将数据读入缓冲区，也可以从缓冲区将数据写入通道。以下是一个示意图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png\" alt></p>\n<h2 id=\"通道实现\">通道实现</h2>\n<p>以下是Java NIO框架里最重要的几个通道的具体实现：</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>FileChannel 用于文件之间的数据读写。</p>\n<p>DatagramChannel 可以在网络上基于UDP进行数据读写。</p>\n<p>SocketChannel 可以在网络上基于TCP进行数据读写。</p>\n<p>ServerSocketChannel 允许你监听TCP连接请求，就像web服务器那样。对于每一个连接请求会创建一个SocketChannel。</p>\n<h2 id=\"通道简单例子\">通道简单例子</h2>\n<p>以下是一个使用FileChannel将一些数据读进一个缓冲区的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile aFile = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"data/nio-data.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">   FileChannel inChannel = aFile.getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">   ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">48</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> bytesRead = inChannel.read(buf);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (bytesRead != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Read \"</span> + bytesRead);</span><br><span class=\"line\">     buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(buf.hasRemaining())&#123;</span><br><span class=\"line\">         System.out.print((<span class=\"keyword\">char</span>) buf.get());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     buf.clear();</span><br><span class=\"line\">     bytesRead = inChannel.read(buf);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   aFile.close();</span><br></pre></td></tr></table></figure>\n<p>这里要留意下<code>buf.flip()</code>的调用。首先将数据读进缓冲区。然后反转它。接着你就可以从里面往外读数据。在下一节我将会进一步讲解更加详细的细节。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/channels.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java NIO 通道和流很像，但有一些区别：</p>\n<ul>\n<li>你既可以往通道里写数据，也可以从通道读数据。流一般只支持读或写。</li>\n<li>通道可以支持异步读写。</li>\n<li>通道要么将数据读入缓冲区，要么从缓冲区写数据到通道。</li>\n</ul>\n<p>上文提到，你可以从通道将数据读入缓冲区，也可以从缓冲区将数据写入通道。以下是一个示意图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png\" alt></p>\n<h2>通道实现</h2>\n<p>以下是Java NIO框架里最重要的几个通道的具体实现：</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>FileChannel 用于文件之间的数据读写。</p>\n<p>DatagramChannel 可以在网络上基于UDP进行数据读写。</p>\n<p>SocketChannel 可以在网络上基于TCP进行数据读写。</p>\n<p>ServerSocketChannel 允许你监听TCP连接请求，就像web服务器那样。对于每一个连接请求会创建一个SocketChannel。</p>\n<h2>通道简单例子</h2>\n<p>以下是一个使用FileChannel将一些数据读进一个缓冲区的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile aFile = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"data/nio-data.txt\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">   FileChannel inChannel = aFile.getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">   ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">48</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> bytesRead = inChannel.read(buf);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (bytesRead != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Read \"</span> + bytesRead);</span><br><span class=\"line\">     buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(buf.hasRemaining())&#123;</span><br><span class=\"line\">         System.out.print((<span class=\"keyword\">char</span>) buf.get());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     buf.clear();</span><br><span class=\"line\">     bytesRead = inChannel.read(buf);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   aFile.close();</span><br></pre></td></tr></table></figure>\n<p>这里要留意下<code>buf.flip()</code>的调用。首先将数据读进缓冲区。然后反转它。接着你就可以从里面往外读数据。在下一节我将会进一步讲解更加详细的细节。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/channels.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n"},{"title":"Java NIO 教程","date":"2019-03-08T16:00:00.000Z","catalog":true,"_content":">Java NIO（New IO）是Java提供的IO API的另一种实现(jdk1.4+)，这意味着标准的Java IO和网络API不再是唯一的选择方案。相对于标准IO，Java NIO框架提供了一种不同的工作机制来实现流。\n\n## 通道和缓冲区\n\n标准IO基于字节流和字符流来实现。NIO基于通道和缓冲区来实现。数据总是从一个通道读进缓冲区，或者从缓冲区写入通道。\n\n## 非阻塞IO\n\nJava NIO可以让你非阻塞地执行IO操作。例如，一个线程可以要求一个通道把数据读进缓冲区，当通道开始往缓冲区里写数据的时候，线程此时可以做其他的事情。一旦数据全部被读进缓冲区，线程再回来接着处理。从缓冲区往通道写数据同理。\n\n## 选择器\n\nJava NIO 框架引入了一个名为“选择器”的概念。选择器可以监听多个通道的事件（像：连接被打开，数据到达等等）。这样，单个线程可以监听多个通道的数据。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/index.html) \t作者：Jakob Jenkov\n\n","source":"_posts/Java_NIO_Tutorial.md","raw":"---\ntitle: Java NIO 教程\ndate: 2019-03-09\ncatalog: true\ntags:\n- NIO\n---\n>Java NIO（New IO）是Java提供的IO API的另一种实现(jdk1.4+)，这意味着标准的Java IO和网络API不再是唯一的选择方案。相对于标准IO，Java NIO框架提供了一种不同的工作机制来实现流。\n\n## 通道和缓冲区\n\n标准IO基于字节流和字符流来实现。NIO基于通道和缓冲区来实现。数据总是从一个通道读进缓冲区，或者从缓冲区写入通道。\n\n## 非阻塞IO\n\nJava NIO可以让你非阻塞地执行IO操作。例如，一个线程可以要求一个通道把数据读进缓冲区，当通道开始往缓冲区里写数据的时候，线程此时可以做其他的事情。一旦数据全部被读进缓冲区，线程再回来接着处理。从缓冲区往通道写数据同理。\n\n## 选择器\n\nJava NIO 框架引入了一个名为“选择器”的概念。选择器可以监听多个通道的事件（像：连接被打开，数据到达等等）。这样，单个线程可以监听多个通道的数据。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/index.html) \t作者：Jakob Jenkov\n\n","slug":"Java_NIO_Tutorial","published":1,"updated":"2020-12-23T15:02:16.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qw000ls2b9lz798sck","content":"<blockquote>\n<p>Java NIO（New IO）是Java提供的IO API的另一种实现(jdk1.4+)，这意味着标准的Java IO和网络API不再是唯一的选择方案。相对于标准IO，Java NIO框架提供了一种不同的工作机制来实现流。</p>\n</blockquote>\n<h2 id=\"通道和缓冲区\">通道和缓冲区</h2>\n<p>标准IO基于字节流和字符流来实现。NIO基于通道和缓冲区来实现。数据总是从一个通道读进缓冲区，或者从缓冲区写入通道。</p>\n<h2 id=\"非阻塞io\">非阻塞IO</h2>\n<p>Java NIO可以让你非阻塞地执行IO操作。例如，一个线程可以要求一个通道把数据读进缓冲区，当通道开始往缓冲区里写数据的时候，线程此时可以做其他的事情。一旦数据全部被读进缓冲区，线程再回来接着处理。从缓冲区往通道写数据同理。</p>\n<h2 id=\"选择器\">选择器</h2>\n<p>Java NIO 框架引入了一个名为“选择器”的概念。选择器可以监听多个通道的事件（像：连接被打开，数据到达等等）。这样，单个线程可以监听多个通道的数据。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/index.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Java NIO（New IO）是Java提供的IO API的另一种实现(jdk1.4+)，这意味着标准的Java IO和网络API不再是唯一的选择方案。相对于标准IO，Java NIO框架提供了一种不同的工作机制来实现流。</p>\n</blockquote>\n<h2>通道和缓冲区</h2>\n<p>标准IO基于字节流和字符流来实现。NIO基于通道和缓冲区来实现。数据总是从一个通道读进缓冲区，或者从缓冲区写入通道。</p>\n<h2>非阻塞IO</h2>\n<p>Java NIO可以让你非阻塞地执行IO操作。例如，一个线程可以要求一个通道把数据读进缓冲区，当通道开始往缓冲区里写数据的时候，线程此时可以做其他的事情。一旦数据全部被读进缓冲区，线程再回来接着处理。从缓冲区往通道写数据同理。</p>\n<h2>选择器</h2>\n<p>Java NIO 框架引入了一个名为“选择器”的概念。选择器可以监听多个通道的事件（像：连接被打开，数据到达等等）。这样，单个线程可以监听多个通道的数据。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/index.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n"},{"title":"Linux 常用命令","date":"2018-08-27T16:00:00.000Z","catalog":true,"_content":"* 查看端口占用：`netstat -ntulp |grep 80`\n* 查看程序进程：`ps aux | grep nginx`\n","source":"_posts/Linux_command.md","raw":"---\ntitle: Linux 常用命令\ndate: 2018-08-28\ncatalog: true\ntags:\n- Linux\n---\n* 查看端口占用：`netstat -ntulp |grep 80`\n* 查看程序进程：`ps aux | grep nginx`\n","slug":"Linux_command","published":1,"updated":"2020-12-23T15:02:16.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qx000ns2b9j6tr6rnp","content":"<ul>\n<li>查看端口占用：<code>netstat -ntulp |grep 80</code></li>\n<li>查看程序进程：<code>ps aux | grep nginx</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>查看端口占用：<code>netstat -ntulp |grep 80</code></li>\n<li>查看程序进程：<code>ps aux | grep nginx</code></li>\n</ul>\n"},{"title":"Java NIO 概览","date":"2019-03-09T16:00:00.000Z","catalog":true,"_content":">Java NIO 由以下核心组件构成：\n>- 通道\n>- 缓冲区\n>- 选择器\n>\n>Java NIO 框架包含了很多类和组件，但是Channel，Buffer 和 Selector 是核心。其他的组件，像 Pipe 和 FileLock 只不过是结合了那三个组件作为工具类来使用。所以，在这篇概览里我会着重介绍这三个组件。\n\n\n## 通道和缓冲区\n\n一般地，NIO框架里所有的IO操作都始于一个通道。一个通道有点像一个流。数据可以从通道读入缓冲区，也可以从缓冲区写入通道。如图：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png)\n\n 通道和缓冲区有很多种。以下是Java NIO框架里Channel的主要实现类：\n\n- FileChannel\n- DatagramChannel\n- SocketChannel\n- ServerSocketChannel\n\n如你所见，这些通道涵盖了UDP + TCP 网络IO和文件IO。\n\n伴随着这些类还有一些有趣的接口，但是简单起见，在这篇概览里我会先忽略他们。他们会在后续相关文章里再做介绍。\n\n以下是Java NIO框架里Buffer接口的主要实现类：\n\n- ByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer\n- ShortBuffer\n\n这些Buffer类涵盖了通过IO可以发送的基础数据类型：byte,short,int,long,float,double和字符。\n\nJava NIO还包含了一个MappedByteBuffer，用于表示内存映射文件。\n\n## 选择器\n\n选择器允许单线程处理多个通道。如果你的应用需要维护很多打开的连接（通道），但是每个连接只有少量的流量，这会使你受益。例如，在一个聊天服务器里。\n\n以下是一个单线程通过一个选择器处理3个通道的示意图 ：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-selectors.png)\n\n要使用选择器，得向它注册通道。然后调用它的select()方法。这个方法会阻塞直到有某个注册通道有事件就绪。一旦这个方法返回，线程就可以开始处理这些事件。事件包括即将到来的连接，数据已收到等。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/overview.html) \t作者：Jakob Jenkov","source":"_posts/Java_NIO_Overview.md","raw":"---\ntitle: Java NIO 概览\ndate: 2019-03-10\ncatalog: true\ntags:\n- NIO\n---\n>Java NIO 由以下核心组件构成：\n>- 通道\n>- 缓冲区\n>- 选择器\n>\n>Java NIO 框架包含了很多类和组件，但是Channel，Buffer 和 Selector 是核心。其他的组件，像 Pipe 和 FileLock 只不过是结合了那三个组件作为工具类来使用。所以，在这篇概览里我会着重介绍这三个组件。\n\n\n## 通道和缓冲区\n\n一般地，NIO框架里所有的IO操作都始于一个通道。一个通道有点像一个流。数据可以从通道读入缓冲区，也可以从缓冲区写入通道。如图：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png)\n\n 通道和缓冲区有很多种。以下是Java NIO框架里Channel的主要实现类：\n\n- FileChannel\n- DatagramChannel\n- SocketChannel\n- ServerSocketChannel\n\n如你所见，这些通道涵盖了UDP + TCP 网络IO和文件IO。\n\n伴随着这些类还有一些有趣的接口，但是简单起见，在这篇概览里我会先忽略他们。他们会在后续相关文章里再做介绍。\n\n以下是Java NIO框架里Buffer接口的主要实现类：\n\n- ByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer\n- ShortBuffer\n\n这些Buffer类涵盖了通过IO可以发送的基础数据类型：byte,short,int,long,float,double和字符。\n\nJava NIO还包含了一个MappedByteBuffer，用于表示内存映射文件。\n\n## 选择器\n\n选择器允许单线程处理多个通道。如果你的应用需要维护很多打开的连接（通道），但是每个连接只有少量的流量，这会使你受益。例如，在一个聊天服务器里。\n\n以下是一个单线程通过一个选择器处理3个通道的示意图 ：\n\n![](http://tutorials.jenkov.com/images/java-nio/overview-selectors.png)\n\n要使用选择器，得向它注册通道。然后调用它的select()方法。这个方法会阻塞直到有某个注册通道有事件就绪。一旦这个方法返回，线程就可以开始处理这些事件。事件包括即将到来的连接，数据已收到等。\n\n------\n[原文链接](http://tutorials.jenkov.com/java-nio/overview.html) \t作者：Jakob Jenkov","slug":"Java_NIO_Overview","published":1,"updated":"2020-12-23T15:02:16.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qy000qs2b9xvmzb68l","content":"<blockquote>\n<p>Java NIO 由以下核心组件构成：</p>\n<ul>\n<li>通道</li>\n<li>缓冲区</li>\n<li>选择器</li>\n</ul>\n<p>Java NIO 框架包含了很多类和组件，但是Channel，Buffer 和 Selector 是核心。其他的组件，像 Pipe 和 FileLock 只不过是结合了那三个组件作为工具类来使用。所以，在这篇概览里我会着重介绍这三个组件。</p>\n</blockquote>\n<h2 id=\"通道和缓冲区\">通道和缓冲区</h2>\n<p>一般地，NIO框架里所有的IO操作都始于一个通道。一个通道有点像一个流。数据可以从通道读入缓冲区，也可以从缓冲区写入通道。如图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png\" alt></p>\n<p>通道和缓冲区有很多种。以下是Java NIO框架里Channel的主要实现类：</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>如你所见，这些通道涵盖了UDP + TCP 网络IO和文件IO。</p>\n<p>伴随着这些类还有一些有趣的接口，但是简单起见，在这篇概览里我会先忽略他们。他们会在后续相关文章里再做介绍。</p>\n<p>以下是Java NIO框架里Buffer接口的主要实现类：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>CharBuffer</li>\n<li>DoubleBuffer</li>\n<li>FloatBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>ShortBuffer</li>\n</ul>\n<p>这些Buffer类涵盖了通过IO可以发送的基础数据类型：byte,short,int,long,float,double和字符。</p>\n<p>Java NIO还包含了一个MappedByteBuffer，用于表示内存映射文件。</p>\n<h2 id=\"选择器\">选择器</h2>\n<p>选择器允许单线程处理多个通道。如果你的应用需要维护很多打开的连接（通道），但是每个连接只有少量的流量，这会使你受益。例如，在一个聊天服务器里。</p>\n<p>以下是一个单线程通过一个选择器处理3个通道的示意图 ：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-selectors.png\" alt></p>\n<p>要使用选择器，得向它注册通道。然后调用它的select()方法。这个方法会阻塞直到有某个注册通道有事件就绪。一旦这个方法返回，线程就可以开始处理这些事件。事件包括即将到来的连接，数据已收到等。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/overview.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Java NIO 由以下核心组件构成：</p>\n<ul>\n<li>通道</li>\n<li>缓冲区</li>\n<li>选择器</li>\n</ul>\n<p>Java NIO 框架包含了很多类和组件，但是Channel，Buffer 和 Selector 是核心。其他的组件，像 Pipe 和 FileLock 只不过是结合了那三个组件作为工具类来使用。所以，在这篇概览里我会着重介绍这三个组件。</p>\n</blockquote>\n<h2>通道和缓冲区</h2>\n<p>一般地，NIO框架里所有的IO操作都始于一个通道。一个通道有点像一个流。数据可以从通道读入缓冲区，也可以从缓冲区写入通道。如图：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png\" alt></p>\n<p>通道和缓冲区有很多种。以下是Java NIO框架里Channel的主要实现类：</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>如你所见，这些通道涵盖了UDP + TCP 网络IO和文件IO。</p>\n<p>伴随着这些类还有一些有趣的接口，但是简单起见，在这篇概览里我会先忽略他们。他们会在后续相关文章里再做介绍。</p>\n<p>以下是Java NIO框架里Buffer接口的主要实现类：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>CharBuffer</li>\n<li>DoubleBuffer</li>\n<li>FloatBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>ShortBuffer</li>\n</ul>\n<p>这些Buffer类涵盖了通过IO可以发送的基础数据类型：byte,short,int,long,float,double和字符。</p>\n<p>Java NIO还包含了一个MappedByteBuffer，用于表示内存映射文件。</p>\n<h2>选择器</h2>\n<p>选择器允许单线程处理多个通道。如果你的应用需要维护很多打开的连接（通道），但是每个连接只有少量的流量，这会使你受益。例如，在一个聊天服务器里。</p>\n<p>以下是一个单线程通过一个选择器处理3个通道的示意图 ：</p>\n<p><img src=\"http://tutorials.jenkov.com/images/java-nio/overview-selectors.png\" alt></p>\n<p>要使用选择器，得向它注册通道。然后调用它的select()方法。这个方法会阻塞直到有某个注册通道有事件就绪。一旦这个方法返回，线程就可以开始处理这些事件。事件包括即将到来的连接，数据已收到等。</p>\n<hr>\n<p><a href=\"http://tutorials.jenkov.com/java-nio/overview.html\" target=\"_blank\" rel=\"noopener\">原文链接</a> \t作者：Jakob Jenkov</p>\n"},{"title":"如何优雅地发布博客","date":"2020-10-23T16:00:00.000Z","catalog":true,"_content":"# 背景\n1.目前获取信息已经很便利了，但是信息太多，而且重复、错误、干扰信息太多，搜索引擎也很难快速找到自己真正需要的信息，因此建立个人信息检索库相当有必要。\n2.写博客是一种比较好的管理自己知识库的方式，最好放到万维网上，能随时随地访问，还需要支持全文检索。\n3.最好能部署在自己的服务器上，那么问题来了，怎样才能拥有自己的服务器？一般都是买的云主机，但是我只是要托管下自己的博客，每个月还要掏一笔服务器的租赁费用，成本太高，不可持续。最好能有一次开销，一劳永逸的方案。\n\n# 需求\n1.搭建个人博客站点，要求低成本，一次性开销。\n2.响应速度要快，支持全文检索。\n3.支持markdown格式，发布简单。\n\n# 方案\n\n树莓派+花生壳+Hexo+Nginx\n\n1.花生壳花6元就可以买到一个壳域名，支持内网穿透，永久使用，每个月1G流量，个人使用足够。\n\n2.树莓派Model3A+，成本不到200人民币，功率5w，每个月电费基本可以忽略不计。\n\n3.Hexo支持markdown，可以生成成静态HTML文件，GitHub上相关主题丰富。\n\n4.Nginx作为web服务器，实现站点高性能访问。\n\nNginx配置：\n\n```\nserver {\n\tlisten 80;\n\tserver_name forgus.vicp.io;\n\tlocation / {\n\t\troot /home/pi/blog/public;\n\t\tindex index.html index.htm;\n\t}\n\tlocation ^~ /resources {\n\t\troot /home/pi/;\n\t}\n\tlocation /pi-dashboard {\n\t\tproxy_pass http://localhost;\n\t}\n}\n```\n\n待续。。。","source":"_posts/Manage_blog.md","raw":"---\ntitle: 如何优雅地发布博客\ndate: 2020-10-24\ncatalog: true\ntags:\n- 建站\n- 博客\n---\n# 背景\n1.目前获取信息已经很便利了，但是信息太多，而且重复、错误、干扰信息太多，搜索引擎也很难快速找到自己真正需要的信息，因此建立个人信息检索库相当有必要。\n2.写博客是一种比较好的管理自己知识库的方式，最好放到万维网上，能随时随地访问，还需要支持全文检索。\n3.最好能部署在自己的服务器上，那么问题来了，怎样才能拥有自己的服务器？一般都是买的云主机，但是我只是要托管下自己的博客，每个月还要掏一笔服务器的租赁费用，成本太高，不可持续。最好能有一次开销，一劳永逸的方案。\n\n# 需求\n1.搭建个人博客站点，要求低成本，一次性开销。\n2.响应速度要快，支持全文检索。\n3.支持markdown格式，发布简单。\n\n# 方案\n\n树莓派+花生壳+Hexo+Nginx\n\n1.花生壳花6元就可以买到一个壳域名，支持内网穿透，永久使用，每个月1G流量，个人使用足够。\n\n2.树莓派Model3A+，成本不到200人民币，功率5w，每个月电费基本可以忽略不计。\n\n3.Hexo支持markdown，可以生成成静态HTML文件，GitHub上相关主题丰富。\n\n4.Nginx作为web服务器，实现站点高性能访问。\n\nNginx配置：\n\n```\nserver {\n\tlisten 80;\n\tserver_name forgus.vicp.io;\n\tlocation / {\n\t\troot /home/pi/blog/public;\n\t\tindex index.html index.htm;\n\t}\n\tlocation ^~ /resources {\n\t\troot /home/pi/;\n\t}\n\tlocation /pi-dashboard {\n\t\tproxy_pass http://localhost;\n\t}\n}\n```\n\n待续。。。","slug":"Manage_blog","published":1,"updated":"2020-12-23T15:02:16.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84qz000ss2b9bp4p3ef3","content":"<h1 id=\"背景\">背景</h1>\n<p>1.目前获取信息已经很便利了，但是信息太多，而且重复、错误、干扰信息太多，搜索引擎也很难快速找到自己真正需要的信息，因此建立个人信息检索库相当有必要。<br>\n2.写博客是一种比较好的管理自己知识库的方式，最好放到万维网上，能随时随地访问，还需要支持全文检索。<br>\n3.最好能部署在自己的服务器上，那么问题来了，怎样才能拥有自己的服务器？一般都是买的云主机，但是我只是要托管下自己的博客，每个月还要掏一笔服务器的租赁费用，成本太高，不可持续。最好能有一次开销，一劳永逸的方案。</p>\n<h1 id=\"需求\">需求</h1>\n<p>1.搭建个人博客站点，要求低成本，一次性开销。<br>\n2.响应速度要快，支持全文检索。<br>\n3.支持markdown格式，发布简单。</p>\n<h1 id=\"方案\">方案</h1>\n<p>树莓派+花生壳+Hexo+Nginx</p>\n<p>1.花生壳花6元就可以买到一个壳域名，支持内网穿透，永久使用，每个月1G流量，个人使用足够。</p>\n<p>2.树莓派Model3A+，成本不到200人民币，功率5w，每个月电费基本可以忽略不计。</p>\n<p>3.Hexo支持markdown，可以生成成静态HTML文件，GitHub上相关主题丰富。</p>\n<p>4.Nginx作为web服务器，实现站点高性能访问。</p>\n<p>Nginx配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> forgus.vicp.io;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> /home/pi/blog/public;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /resources &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> /home/pi/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /pi-dashboard &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_pass</span> http://localhost;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>背景</h1>\n<p>1.目前获取信息已经很便利了，但是信息太多，而且重复、错误、干扰信息太多，搜索引擎也很难快速找到自己真正需要的信息，因此建立个人信息检索库相当有必要。<br>\n2.写博客是一种比较好的管理自己知识库的方式，最好放到万维网上，能随时随地访问，还需要支持全文检索。<br>\n3.最好能部署在自己的服务器上，那么问题来了，怎样才能拥有自己的服务器？一般都是买的云主机，但是我只是要托管下自己的博客，每个月还要掏一笔服务器的租赁费用，成本太高，不可持续。最好能有一次开销，一劳永逸的方案。</p>\n<h1>需求</h1>\n<p>1.搭建个人博客站点，要求低成本，一次性开销。<br>\n2.响应速度要快，支持全文检索。<br>\n3.支持markdown格式，发布简单。</p>\n<h1>方案</h1>\n<p>树莓派+花生壳+Hexo+Nginx</p>\n<p>1.花生壳花6元就可以买到一个壳域名，支持内网穿透，永久使用，每个月1G流量，个人使用足够。</p>\n<p>2.树莓派Model3A+，成本不到200人民币，功率5w，每个月电费基本可以忽略不计。</p>\n<p>3.Hexo支持markdown，可以生成成静态HTML文件，GitHub上相关主题丰富。</p>\n<p>4.Nginx作为web服务器，实现站点高性能访问。</p>\n<p>Nginx配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> forgus.vicp.io;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> /home/pi/blog/public;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /resources &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> /home/pi/;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /pi-dashboard &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_pass</span> http://localhost;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n"},{"_content":"# 复印\n\n# 身份证双面复印\n\n1.放身份证。\n\n2.同时按住开始键和电源键，两个灯常亮。\n\n3.按开始键，扫描第一面，两个灯慢闪。\n\n4.身份证翻面，按开始键，扫描第二面并打印。","source":"_posts/M7268打印机操作手册.md","raw":"# 复印\n\n# 身份证双面复印\n\n1.放身份证。\n\n2.同时按住开始键和电源键，两个灯常亮。\n\n3.按开始键，扫描第一面，两个灯慢闪。\n\n4.身份证翻面，按开始键，扫描第二面并打印。","slug":"M7268打印机操作手册","published":1,"date":"2020-12-23T15:02:16.658Z","updated":"2020-12-23T15:02:16.658Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r1000us2b9dtt00c7d","content":"<h1 id=\"复印\">复印</h1>\n<h1 id=\"身份证双面复印\">身份证双面复印</h1>\n<p>1.放身份证。</p>\n<p>2.同时按住开始键和电源键，两个灯常亮。</p>\n<p>3.按开始键，扫描第一面，两个灯慢闪。</p>\n<p>4.身份证翻面，按开始键，扫描第二面并打印。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>复印</h1>\n<h1>身份证双面复印</h1>\n<p>1.放身份证。</p>\n<p>2.同时按住开始键和电源键，两个灯常亮。</p>\n<p>3.按开始键，扫描第一面，两个灯慢闪。</p>\n<p>4.身份证翻面，按开始键，扫描第二面并打印。</p>\n"},{"title":"微服务介绍","date":"2019-01-19T16:00:00.000Z","catalog":true,"_content":"### 什么是微服务\n\n微服务就是一些协同工作的小而自治的服务。\n\n### 微服务的优点\n\n1. 技术异构性\n2. 弹性\n3. 扩展\n4. 简化部署\n5. 与组织结构相匹配\n6. 可组合性\n7. 对可替代性的优化","source":"_posts/Microservice_introduction.md","raw":"---\ntitle: 微服务介绍\ndate: 2019-01-20\ncatalog: true\ntags:\n- 分布式\n---\n### 什么是微服务\n\n微服务就是一些协同工作的小而自治的服务。\n\n### 微服务的优点\n\n1. 技术异构性\n2. 弹性\n3. 扩展\n4. 简化部署\n5. 与组织结构相匹配\n6. 可组合性\n7. 对可替代性的优化","slug":"Microservice_introduction","published":1,"updated":"2020-12-23T15:02:16.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r2000ws2b9vdgromfv","content":"<h3 id=\"什么是微服务\">什么是微服务</h3>\n<p>微服务就是一些协同工作的小而自治的服务。</p>\n<h3 id=\"微服务的优点\">微服务的优点</h3>\n<ol>\n<li>技术异构性</li>\n<li>弹性</li>\n<li>扩展</li>\n<li>简化部署</li>\n<li>与组织结构相匹配</li>\n<li>可组合性</li>\n<li>对可替代性的优化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3>什么是微服务</h3>\n<p>微服务就是一些协同工作的小而自治的服务。</p>\n<h3>微服务的优点</h3>\n<ol>\n<li>技术异构性</li>\n<li>弹性</li>\n<li>扩展</li>\n<li>简化部署</li>\n<li>与组织结构相匹配</li>\n<li>可组合性</li>\n<li>对可替代性的优化</li>\n</ol>\n"},{"title":"Vim 实用技巧","date":"2018-09-24T16:00:00.000Z","catalog":true,"_content":"## 模式\n### 普通模式\n### 操作符待决模式\n### 插入模式\n### 可视模式\n#### 字符可视模式\nv\n#### 行可视模式\nV\n#### 列可视模式\n`<C-v>`\n\n#### 选择模式\n用`<C-g>`切换选择模式和可视模式\n\n### 命令模式 \n\n## 移动\n按键操作|效果\n---|---\nG|跳到最后一行\n{n}G|跳到第n行\ngg|跳到第一行\nctrl+f|向前翻一页\nctrl+b|向后翻一页\n\n## 查找\n\n### 行内查找\n\n按键操作|效果\n---|---\nf{char}|正向查找\nF{char} |反向查找\n;|重复上次查找命令\n,|反转方向重复上次查找命令\n\n\n### 全文查找\n按键操作|效果\n---|---\n/{string}|根据字符串检索\nn|跳转到下一处匹配\nN|跳转到上一处匹配\n","source":"_posts/Practical_Vim.md","raw":"---\ntitle: Vim 实用技巧\ndate: 2018-09-25\ncatalog: true\ntags:\n- Vim\n---\n## 模式\n### 普通模式\n### 操作符待决模式\n### 插入模式\n### 可视模式\n#### 字符可视模式\nv\n#### 行可视模式\nV\n#### 列可视模式\n`<C-v>`\n\n#### 选择模式\n用`<C-g>`切换选择模式和可视模式\n\n### 命令模式 \n\n## 移动\n按键操作|效果\n---|---\nG|跳到最后一行\n{n}G|跳到第n行\ngg|跳到第一行\nctrl+f|向前翻一页\nctrl+b|向后翻一页\n\n## 查找\n\n### 行内查找\n\n按键操作|效果\n---|---\nf{char}|正向查找\nF{char} |反向查找\n;|重复上次查找命令\n,|反转方向重复上次查找命令\n\n\n### 全文查找\n按键操作|效果\n---|---\n/{string}|根据字符串检索\nn|跳转到下一处匹配\nN|跳转到上一处匹配\n","slug":"Practical_Vim","published":1,"updated":"2020-12-23T15:02:16.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r3000xs2b9dyj7ebgk","content":"<h2 id=\"模式\">模式</h2>\n<h3 id=\"普通模式\">普通模式</h3>\n<h3 id=\"操作符待决模式\">操作符待决模式</h3>\n<h3 id=\"插入模式\">插入模式</h3>\n<h3 id=\"可视模式\">可视模式</h3>\n<h4 id=\"字符可视模式\">字符可视模式</h4>\n<p>v</p>\n<h4 id=\"行可视模式\">行可视模式</h4>\n<p>V</p>\n<h4 id=\"列可视模式\">列可视模式</h4>\n<p><code>&lt;C-v&gt;</code></p>\n<h4 id=\"选择模式\">选择模式</h4>\n<p>用<code>&lt;C-g&gt;</code>切换选择模式和可视模式</p>\n<h3 id=\"命令模式\">命令模式</h3>\n<h2 id=\"移动\">移动</h2>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>G</td>\n<td>跳到最后一行</td>\n</tr>\n<tr>\n<td>{n}G</td>\n<td>跳到第n行</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>跳到第一行</td>\n</tr>\n<tr>\n<td>ctrl+f</td>\n<td>向前翻一页</td>\n</tr>\n<tr>\n<td>ctrl+b</td>\n<td>向后翻一页</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查找\">查找</h2>\n<h3 id=\"行内查找\">行内查找</h3>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>f{char}</td>\n<td>正向查找</td>\n</tr>\n<tr>\n<td>F{char}</td>\n<td>反向查找</td>\n</tr>\n<tr>\n<td>;</td>\n<td>重复上次查找命令</td>\n</tr>\n<tr>\n<td>,</td>\n<td>反转方向重复上次查找命令</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"全文查找\">全文查找</h3>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/{string}</td>\n<td>根据字符串检索</td>\n</tr>\n<tr>\n<td>n</td>\n<td>跳转到下一处匹配</td>\n</tr>\n<tr>\n<td>N</td>\n<td>跳转到上一处匹配</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2>模式</h2>\n<h3>普通模式</h3>\n<h3>操作符待决模式</h3>\n<h3>插入模式</h3>\n<h3>可视模式</h3>\n<h4>字符可视模式</h4>\n<p>v</p>\n<h4>行可视模式</h4>\n<p>V</p>\n<h4>列可视模式</h4>\n<p><code>&lt;C-v&gt;</code></p>\n<h4>选择模式</h4>\n<p>用<code>&lt;C-g&gt;</code>切换选择模式和可视模式</p>\n<h3>命令模式</h3>\n<h2>移动</h2>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>G</td>\n<td>跳到最后一行</td>\n</tr>\n<tr>\n<td>{n}G</td>\n<td>跳到第n行</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>跳到第一行</td>\n</tr>\n<tr>\n<td>ctrl+f</td>\n<td>向前翻一页</td>\n</tr>\n<tr>\n<td>ctrl+b</td>\n<td>向后翻一页</td>\n</tr>\n</tbody>\n</table>\n<h2>查找</h2>\n<h3>行内查找</h3>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>f{char}</td>\n<td>正向查找</td>\n</tr>\n<tr>\n<td>F{char}</td>\n<td>反向查找</td>\n</tr>\n<tr>\n<td>;</td>\n<td>重复上次查找命令</td>\n</tr>\n<tr>\n<td>,</td>\n<td>反转方向重复上次查找命令</td>\n</tr>\n</tbody>\n</table>\n<h3>全文查找</h3>\n<table>\n<thead>\n<tr>\n<th>按键操作</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/{string}</td>\n<td>根据字符串检索</td>\n</tr>\n<tr>\n<td>n</td>\n<td>跳转到下一处匹配</td>\n</tr>\n<tr>\n<td>N</td>\n<td>跳转到上一处匹配</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"二叉树的搜索算法","date":"2020-05-07T16:00:00.000Z","catalog":true,"_content":"\n## 深度优先搜索\n\n深度优先搜索（Depth First Search），一般用递归实现，算法比较巧妙，关键在于寻找遍历的套路。\n\n### 前序遍历\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  //do something\n  dfs(x.left);\n  dfs(x.right);\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  stack.push(x);\n  while(!stack.empty()) {\n    TreeNode node = stack.pop();\n    //do something\n    if(node.right != null) {\n      stack.push(node.right);\n    }\n    if(node.left != null) {\n      stack.push(node.left);\n    }\n  }\n}\n```\n\n\n\n### 中序遍历\n\n中序遍历可以按顺序访问二叉搜索树中的节点。\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  dfs(x.left);\n  //do something\n  dfs(x.right);\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  TreeNode curr = x;\n  while(curr != null || !stack.empty()) {\n    while(curr != null) {\n      stack.push(curr);\n      curr = curr.left;\n    }\n    curr = stack.pop();\n    //do something\n    curr = curr.right;\n  }\n}\n```\n\n\n\n### 后序遍历\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  dfs(x.left);\n  dfs(x.right);\n  //do something\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  Stack<TreeNode> result = new Stack<>();\n  stack.push(x);\n  while(!stack.empty()) {\n    TreeNode node = stack.pop();\n\t\tresult.push(node);\n    if(node.left != null) {\n      stack.push(node.letf);\n    }\n    if(node.right != null) {\n      stack.push(node.right);\n    }\n  }\n  while(!result.empty()) {\n    TreeNode node = result.pop();\n    //do something\n  }\n}\n```\n\n\n\n## 广度优先搜索\n\n广度优先搜索（Breadth First Search），即层序遍历，一般用队列加两层循环实现，外层循环遍历树的层次，内循环遍历每一层的节点。\n\n### 自顶向下层序遍历\n\n```java\npublic void bfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Queue<TreeNode> queue = new LinkedList<>();\n  queue.add(x);\n  while(!queue.isEmpty()) {\n    int count = queue.size();\n    while(count > 0) {\n      TreeNode node = queue.poll();\n    \t//do something\n      if(node.left != null) queue.add(node.left);\n      if(node.right != null) queue.add(node.right);\n      count --;\n    }\n  }\n}\n```\n\n### 自底向上层序遍历\n\n可以用自顶向下遍历法的套路，在具体处理上反转结果。","source":"_posts/Traversal_Binary_Tree.md","raw":"---\ntitle: 二叉树的搜索算法\ndate: 2020-05-08\ncatalog: true\ntags:\n- 算法\n---\n\n## 深度优先搜索\n\n深度优先搜索（Depth First Search），一般用递归实现，算法比较巧妙，关键在于寻找遍历的套路。\n\n### 前序遍历\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  //do something\n  dfs(x.left);\n  dfs(x.right);\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  stack.push(x);\n  while(!stack.empty()) {\n    TreeNode node = stack.pop();\n    //do something\n    if(node.right != null) {\n      stack.push(node.right);\n    }\n    if(node.left != null) {\n      stack.push(node.left);\n    }\n  }\n}\n```\n\n\n\n### 中序遍历\n\n中序遍历可以按顺序访问二叉搜索树中的节点。\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  dfs(x.left);\n  //do something\n  dfs(x.right);\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  TreeNode curr = x;\n  while(curr != null || !stack.empty()) {\n    while(curr != null) {\n      stack.push(curr);\n      curr = curr.left;\n    }\n    curr = stack.pop();\n    //do something\n    curr = curr.right;\n  }\n}\n```\n\n\n\n### 后序遍历\n\n#### 递归法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  dfs(x.left);\n  dfs(x.right);\n  //do something\n}\n```\n\n#### 迭代法\n\n```java\npublic void dfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Stack<TreeNode> stack = new Stack<>();\n  Stack<TreeNode> result = new Stack<>();\n  stack.push(x);\n  while(!stack.empty()) {\n    TreeNode node = stack.pop();\n\t\tresult.push(node);\n    if(node.left != null) {\n      stack.push(node.letf);\n    }\n    if(node.right != null) {\n      stack.push(node.right);\n    }\n  }\n  while(!result.empty()) {\n    TreeNode node = result.pop();\n    //do something\n  }\n}\n```\n\n\n\n## 广度优先搜索\n\n广度优先搜索（Breadth First Search），即层序遍历，一般用队列加两层循环实现，外层循环遍历树的层次，内循环遍历每一层的节点。\n\n### 自顶向下层序遍历\n\n```java\npublic void bfs(TreeNode x) {\n  if(x == null) {\n    return;\n  }\n  Queue<TreeNode> queue = new LinkedList<>();\n  queue.add(x);\n  while(!queue.isEmpty()) {\n    int count = queue.size();\n    while(count > 0) {\n      TreeNode node = queue.poll();\n    \t//do something\n      if(node.left != null) queue.add(node.left);\n      if(node.right != null) queue.add(node.right);\n      count --;\n    }\n  }\n}\n```\n\n### 自底向上层序遍历\n\n可以用自顶向下遍历法的套路，在具体处理上反转结果。","slug":"Traversal_Binary_Tree","published":1,"updated":"2020-12-23T15:02:16.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r40010s2b960wid9ao","content":"<h2 id=\"深度优先搜索\">深度优先搜索</h2>\n<p>深度优先搜索（Depth First Search），一般用递归实现，算法比较巧妙，关键在于寻找遍历的套路。</p>\n<h3 id=\"前序遍历\">前序遍历</h3>\n<h4 id=\"递归法\">递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代法\">迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  stack.push(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!stack.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = stack.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中序遍历\">中序遍历</h3>\n<p>中序遍历可以按顺序访问二叉搜索树中的节点。</p>\n<h4 id=\"递归法\">递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代法\">迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  TreeNode curr = x;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(curr != <span class=\"keyword\">null</span> || !stack.empty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(curr);</span><br><span class=\"line\">      curr = curr.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curr = stack.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    curr = curr.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"后序遍历\">后序遍历</h3>\n<h4 id=\"递归法\">递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代法\">迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; result = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  stack.push(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!stack.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = stack.pop();</span><br><span class=\"line\">\t\tresult.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.letf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!result.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = result.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"广度优先搜索\">广度优先搜索</h2>\n<p>广度优先搜索（Breadth First Search），即层序遍历，一般用队列加两层循环实现，外层循环遍历树的层次，内循环遍历每一层的节点。</p>\n<h3 id=\"自顶向下层序遍历\">自顶向下层序遍历</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">  queue.add(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!queue.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = queue.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      TreeNode node = queue.poll();</span><br><span class=\"line\">    \t<span class=\"comment\">//do something</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) queue.add(node.left);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) queue.add(node.right);</span><br><span class=\"line\">      count --;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自底向上层序遍历\">自底向上层序遍历</h3>\n<p>可以用自顶向下遍历法的套路，在具体处理上反转结果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>深度优先搜索</h2>\n<p>深度优先搜索（Depth First Search），一般用递归实现，算法比较巧妙，关键在于寻找遍历的套路。</p>\n<h3>前序遍历</h3>\n<h4>递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  stack.push(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!stack.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = stack.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>中序遍历</h3>\n<p>中序遍历可以按顺序访问二叉搜索树中的节点。</p>\n<h4>递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  TreeNode curr = x;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(curr != <span class=\"keyword\">null</span> || !stack.empty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(curr);</span><br><span class=\"line\">      curr = curr.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    curr = stack.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    curr = curr.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>后序遍历</h3>\n<h4>递归法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dfs(x.left);</span><br><span class=\"line\">  dfs(x.right);</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>迭代法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  Stack&lt;TreeNode&gt; result = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">  stack.push(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!stack.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = stack.pop();</span><br><span class=\"line\">\t\tresult.push(node);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.letf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!result.empty()) &#123;</span><br><span class=\"line\">    TreeNode node = result.pop();</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>广度优先搜索</h2>\n<p>广度优先搜索（Breadth First Search），即层序遍历，一般用队列加两层循环实现，外层循环遍历树的层次，内循环遍历每一层的节点。</p>\n<h3>自顶向下层序遍历</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(TreeNode x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">  queue.add(x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!queue.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = queue.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      TreeNode node = queue.poll();</span><br><span class=\"line\">    \t<span class=\"comment\">//do something</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>) queue.add(node.left);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>) queue.add(node.right);</span><br><span class=\"line\">      count --;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>自底向上层序遍历</h3>\n<p>可以用自顶向下遍历法的套路，在具体处理上反转结果。</p>\n"},{"title":"Tmux入门","date":"2019-02-02T16:00:00.000Z","catalog":true,"_content":"\n## 前言\n\n很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。\n\n## 简介\n\n>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。\n\n## 功能特性\n\n>- 一个虚拟终端可以管理多个会话，窗口和面板\n>\n>- 窗口、面板可以在会话间自由移动，切换\n>\n>- 丰富灵活的状态行展示\n>\n>- 支持自定义快捷键，依照个人习惯配置令操作更高效\n>\n>- 不受断网影响，避免丢失重要工作进度\n>\n>- 结对编程，方便演示与协作\n>\n>- 自带复制粘贴缓冲区管理\n>\n>- 脚本化配置，可配置多种操作环境\n>\n### 层次结构\n\n![img](https://woodenrobot.me/images/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png)tmux主要元素分为三层\n- Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。\n- Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。\n- Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。\n\n## 安装tmux\n\n### Linux安装\n\n```bash\nsudo apt-get install tmux\n```\n\n### Mac OS安装\n\n```bash\nbrew install tmux\n```\n\n### 基本操作\n\n首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。\n\n### 查询所有会话（Session）\n\n在命令行输入下列命令查询当前所有会话。\n\n```bash\ntmux ls\n```\n\n你会发现`no server running on /private/tmp/tmux-501/default`，这是因为我们还没有创建会话（Session）。\n\n### 创建会话（Session)\n\n```bash\ntmux new -s session-name\n```\n\n通过上述命令新建一个有特定名称的会话。\n一般情况下我们不会使用下列命令创建不指定名字的会话。\n\n```bash\ntmux new\n```\n\n### 断开会话（Session）\n\n使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）\n\n```bash\ntmux detach\n```\n\n或者使用tmux中的快捷键\n\n```\nCtrl+b d(即先使用Ctrl+b快捷键前缀，然后再按d)\n```\n\n### 重新连接会话（Session）\n\n在命令行输入`tmux a`即可快速连接第一个所有会话中的第一个。\n\n```bash\ntmux a\n```\n\n或者通过会话名连接该一个会话\n\n```bash\ntmux a -t session-name\n```\n\n### 关闭会话\n\n```bash\ntmux kill-session -t session-name\n```\n\n当然你也可以通过直接按`Ctrl+d`关闭会话、窗口或窗格。\n\n### tmux中的快捷键参考\n\n注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀`Ctrl+b`。\n\n#### 帮助\n\n- ？ 获取帮助信息  \n\n#### 会话（Session）管理\n\n- s 列出所有会话\n\n- $ 重命名当前的会话\n\n- d 断开当前的会话\n\n#### 窗口（Window）管理\n\n- c 创建一个新窗口\n- , 重命名当前窗口\n- w 列出所有窗口\n- % 水平分割窗口\n- “ 竖直分割窗口\n- n 选择下一个窗口\n- p 选择上一个窗口\n- 0~9 选择0~9对应的窗口\n#### 窗格（Pane）管理\n\n- % 创建一个水平窗格\n- “ 创建一个竖直窗格\n- q 显示窗格的编号\n- o 在窗格间切换\n- } 与下一个窗格交换位置\n- { 与上一个窗格交换位置\n- ! 在新窗口中显示当前窗格\n- x 关闭当前窗格\n#### 其他\n- t 在当前窗格显示时间\n\n---\n\n原文出处：[Tmux入门教程](https://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/)\n\n","source":"_posts/Tmux_Introduction.md","raw":"---\ntitle: Tmux入门\ndate: 2019-02-03\ncatalog: true\ntags:\n- tmux\n- Linux\n---\n\n## 前言\n\n很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。\n\n## 简介\n\n>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。\n\n## 功能特性\n\n>- 一个虚拟终端可以管理多个会话，窗口和面板\n>\n>- 窗口、面板可以在会话间自由移动，切换\n>\n>- 丰富灵活的状态行展示\n>\n>- 支持自定义快捷键，依照个人习惯配置令操作更高效\n>\n>- 不受断网影响，避免丢失重要工作进度\n>\n>- 结对编程，方便演示与协作\n>\n>- 自带复制粘贴缓冲区管理\n>\n>- 脚本化配置，可配置多种操作环境\n>\n### 层次结构\n\n![img](https://woodenrobot.me/images/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png)tmux主要元素分为三层\n- Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。\n- Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。\n- Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。\n\n## 安装tmux\n\n### Linux安装\n\n```bash\nsudo apt-get install tmux\n```\n\n### Mac OS安装\n\n```bash\nbrew install tmux\n```\n\n### 基本操作\n\n首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。\n\n### 查询所有会话（Session）\n\n在命令行输入下列命令查询当前所有会话。\n\n```bash\ntmux ls\n```\n\n你会发现`no server running on /private/tmp/tmux-501/default`，这是因为我们还没有创建会话（Session）。\n\n### 创建会话（Session)\n\n```bash\ntmux new -s session-name\n```\n\n通过上述命令新建一个有特定名称的会话。\n一般情况下我们不会使用下列命令创建不指定名字的会话。\n\n```bash\ntmux new\n```\n\n### 断开会话（Session）\n\n使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）\n\n```bash\ntmux detach\n```\n\n或者使用tmux中的快捷键\n\n```\nCtrl+b d(即先使用Ctrl+b快捷键前缀，然后再按d)\n```\n\n### 重新连接会话（Session）\n\n在命令行输入`tmux a`即可快速连接第一个所有会话中的第一个。\n\n```bash\ntmux a\n```\n\n或者通过会话名连接该一个会话\n\n```bash\ntmux a -t session-name\n```\n\n### 关闭会话\n\n```bash\ntmux kill-session -t session-name\n```\n\n当然你也可以通过直接按`Ctrl+d`关闭会话、窗口或窗格。\n\n### tmux中的快捷键参考\n\n注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀`Ctrl+b`。\n\n#### 帮助\n\n- ？ 获取帮助信息  \n\n#### 会话（Session）管理\n\n- s 列出所有会话\n\n- $ 重命名当前的会话\n\n- d 断开当前的会话\n\n#### 窗口（Window）管理\n\n- c 创建一个新窗口\n- , 重命名当前窗口\n- w 列出所有窗口\n- % 水平分割窗口\n- “ 竖直分割窗口\n- n 选择下一个窗口\n- p 选择上一个窗口\n- 0~9 选择0~9对应的窗口\n#### 窗格（Pane）管理\n\n- % 创建一个水平窗格\n- “ 创建一个竖直窗格\n- q 显示窗格的编号\n- o 在窗格间切换\n- } 与下一个窗格交换位置\n- { 与上一个窗格交换位置\n- ! 在新窗口中显示当前窗格\n- x 关闭当前窗格\n#### 其他\n- t 在当前窗格显示时间\n\n---\n\n原文出处：[Tmux入门教程](https://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/)\n\n","slug":"Tmux_Introduction","published":1,"updated":"2020-12-23T15:02:16.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r50011s2b9ub196h25","content":"<h2 id=\"前言\">前言</h2>\n<p>很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。</p>\n<h2 id=\"简介\">简介</h2>\n<blockquote>\n<p>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。</p>\n</blockquote>\n<h2 id=\"功能特性\">功能特性</h2>\n<blockquote>\n<ul>\n<li>\n<p>一个虚拟终端可以管理多个会话，窗口和面板</p>\n</li>\n<li>\n<p>窗口、面板可以在会话间自由移动，切换</p>\n</li>\n<li>\n<p>丰富灵活的状态行展示</p>\n</li>\n<li>\n<p>支持自定义快捷键，依照个人习惯配置令操作更高效</p>\n</li>\n<li>\n<p>不受断网影响，避免丢失重要工作进度</p>\n</li>\n<li>\n<p>结对编程，方便演示与协作</p>\n</li>\n<li>\n<p>自带复制粘贴缓冲区管理</p>\n</li>\n<li>\n<p>脚本化配置，可配置多种操作环境</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"层次结构\">层次结构</h3>\n<p><img src=\"https://woodenrobot.me/images/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png\" alt=\"img\">tmux主要元素分为三层</p>\n<ul>\n<li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li>\n<li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li>\n<li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li>\n</ul>\n<h2 id=\"安装tmux\">安装tmux</h2>\n<h3 id=\"linux安装\">Linux安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tmux</span><br></pre></td></tr></table></figure>\n<h3 id=\"mac-os安装\">Mac OS安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tmux</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本操作\">基本操作</h3>\n<p>首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。</p>\n<h3 id=\"查询所有会话session\">查询所有会话（Session）</h3>\n<p>在命令行输入下列命令查询当前所有会话。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux ls</span><br></pre></td></tr></table></figure>\n<p>你会发现<code>no server running on /private/tmp/tmux-501/default</code>，这是因为我们还没有创建会话（Session）。</p>\n<h3 id=\"创建会话session\">创建会话（Session)</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s session-name</span><br></pre></td></tr></table></figure>\n<p>通过上述命令新建一个有特定名称的会话。<br>\n一般情况下我们不会使用下列命令创建不指定名字的会话。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new</span><br></pre></td></tr></table></figure>\n<h3 id=\"断开会话session\">断开会话（Session）</h3>\n<p>使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>或者使用tmux中的快捷键</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+<span class=\"selector-tag\">b</span> d(即先使用Ctrl+b快捷键前缀，然后再按d)</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新连接会话session\">重新连接会话（Session）</h3>\n<p>在命令行输入<code>tmux a</code>即可快速连接第一个所有会话中的第一个。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux a</span><br></pre></td></tr></table></figure>\n<p>或者通过会话名连接该一个会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux a -t session-name</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭会话\">关闭会话</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t session-name</span><br></pre></td></tr></table></figure>\n<p>当然你也可以通过直接按<code>Ctrl+d</code>关闭会话、窗口或窗格。</p>\n<h3 id=\"tmux中的快捷键参考\">tmux中的快捷键参考</h3>\n<p>注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀<code>Ctrl+b</code>。</p>\n<h4 id=\"帮助\">帮助</h4>\n<ul>\n<li>？ 获取帮助信息</li>\n</ul>\n<h4 id=\"会话session管理\">会话（Session）管理</h4>\n<ul>\n<li>\n<p>s 列出所有会话</p>\n</li>\n<li>\n<p>$ 重命名当前的会话</p>\n</li>\n<li>\n<p>d 断开当前的会话</p>\n</li>\n</ul>\n<h4 id=\"窗口window管理\">窗口（Window）管理</h4>\n<ul>\n<li>c 创建一个新窗口</li>\n<li>, 重命名当前窗口</li>\n<li>w 列出所有窗口</li>\n<li>% 水平分割窗口</li>\n<li>“ 竖直分割窗口</li>\n<li>n 选择下一个窗口</li>\n<li>p 选择上一个窗口</li>\n<li>0~9 选择0~9对应的窗口</li>\n</ul>\n<h4 id=\"窗格pane管理\">窗格（Pane）管理</h4>\n<ul>\n<li>% 创建一个水平窗格</li>\n<li>“ 创建一个竖直窗格</li>\n<li>q 显示窗格的编号</li>\n<li>o 在窗格间切换</li>\n<li>} 与下一个窗格交换位置</li>\n<li>{ 与上一个窗格交换位置</li>\n<li>! 在新窗口中显示当前窗格</li>\n<li>x 关闭当前窗格</li>\n</ul>\n<h4 id=\"其他\">其他</h4>\n<ul>\n<li>t 在当前窗格显示时间</li>\n</ul>\n<hr>\n<p>原文出处：<a href=\"https://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">Tmux入门教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。</p>\n<h2>简介</h2>\n<blockquote>\n<p>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。</p>\n</blockquote>\n<h2>功能特性</h2>\n<blockquote>\n<ul>\n<li>\n<p>一个虚拟终端可以管理多个会话，窗口和面板</p>\n</li>\n<li>\n<p>窗口、面板可以在会话间自由移动，切换</p>\n</li>\n<li>\n<p>丰富灵活的状态行展示</p>\n</li>\n<li>\n<p>支持自定义快捷键，依照个人习惯配置令操作更高效</p>\n</li>\n<li>\n<p>不受断网影响，避免丢失重要工作进度</p>\n</li>\n<li>\n<p>结对编程，方便演示与协作</p>\n</li>\n<li>\n<p>自带复制粘贴缓冲区管理</p>\n</li>\n<li>\n<p>脚本化配置，可配置多种操作环境</p>\n</li>\n</ul>\n</blockquote>\n<h3>层次结构</h3>\n<p><img src=\"https://woodenrobot.me/images/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png\" alt=\"img\">tmux主要元素分为三层</p>\n<ul>\n<li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li>\n<li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li>\n<li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li>\n</ul>\n<h2>安装tmux</h2>\n<h3>Linux安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tmux</span><br></pre></td></tr></table></figure>\n<h3>Mac OS安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tmux</span><br></pre></td></tr></table></figure>\n<h3>基本操作</h3>\n<p>首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。</p>\n<h3>查询所有会话（Session）</h3>\n<p>在命令行输入下列命令查询当前所有会话。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux ls</span><br></pre></td></tr></table></figure>\n<p>你会发现<code>no server running on /private/tmp/tmux-501/default</code>，这是因为我们还没有创建会话（Session）。</p>\n<h3>创建会话（Session)</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s session-name</span><br></pre></td></tr></table></figure>\n<p>通过上述命令新建一个有特定名称的会话。<br>\n一般情况下我们不会使用下列命令创建不指定名字的会话。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new</span><br></pre></td></tr></table></figure>\n<h3>断开会话（Session）</h3>\n<p>使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>或者使用tmux中的快捷键</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+<span class=\"selector-tag\">b</span> d(即先使用Ctrl+b快捷键前缀，然后再按d)</span><br></pre></td></tr></table></figure>\n<h3>重新连接会话（Session）</h3>\n<p>在命令行输入<code>tmux a</code>即可快速连接第一个所有会话中的第一个。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux a</span><br></pre></td></tr></table></figure>\n<p>或者通过会话名连接该一个会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux a -t session-name</span><br></pre></td></tr></table></figure>\n<h3>关闭会话</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux <span class=\"built_in\">kill</span>-session -t session-name</span><br></pre></td></tr></table></figure>\n<p>当然你也可以通过直接按<code>Ctrl+d</code>关闭会话、窗口或窗格。</p>\n<h3>tmux中的快捷键参考</h3>\n<p>注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀<code>Ctrl+b</code>。</p>\n<h4>帮助</h4>\n<ul>\n<li>？ 获取帮助信息</li>\n</ul>\n<h4>会话（Session）管理</h4>\n<ul>\n<li>\n<p>s 列出所有会话</p>\n</li>\n<li>\n<p>$ 重命名当前的会话</p>\n</li>\n<li>\n<p>d 断开当前的会话</p>\n</li>\n</ul>\n<h4>窗口（Window）管理</h4>\n<ul>\n<li>c 创建一个新窗口</li>\n<li>, 重命名当前窗口</li>\n<li>w 列出所有窗口</li>\n<li>% 水平分割窗口</li>\n<li>“ 竖直分割窗口</li>\n<li>n 选择下一个窗口</li>\n<li>p 选择上一个窗口</li>\n<li>0~9 选择0~9对应的窗口</li>\n</ul>\n<h4>窗格（Pane）管理</h4>\n<ul>\n<li>% 创建一个水平窗格</li>\n<li>“ 创建一个竖直窗格</li>\n<li>q 显示窗格的编号</li>\n<li>o 在窗格间切换</li>\n<li>} 与下一个窗格交换位置</li>\n<li>{ 与上一个窗格交换位置</li>\n<li>! 在新窗口中显示当前窗格</li>\n<li>x 关闭当前窗格</li>\n</ul>\n<h4>其他</h4>\n<ul>\n<li>t 在当前窗格显示时间</li>\n</ul>\n<hr>\n<p>原文出处：<a href=\"https://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">Tmux入门教程</a></p>\n"},{"title":"Python简明手册","date":"2020-05-13T16:00:00.000Z","catalog":true,"_content":"\n## 数据结构\n\n```python\n# 字符串\nchild_name = '小明'\n# 列表\nchildren_name = []\nchildren_name.append('小刚')\n# 字典\nchildren = {}\nchildren['1','小刚']\nchildren['1'] = '小明'\ndel children['1']\nchildren = {\n  '1':'小刚',\n  '2':'小明'\n}\n# 遍历key-value\nfor key,value in children.items():\n  print(\"\\nKey: \" + key)\n  print(\"Value: \" + value)\n# 遍历key\nfor key in children.keys():\n    print(\"\\nKey: \" + key)\n# 按顺序遍历key\nfor key in sorted(children.keys()):\n    print(\"\\nKey: \" + key)\n# 遍历值\nfor value in children.values():\n    print(\"Value: \" + value)\n# 遍历值并去重\nfor value in set(children.values()):\n    print(\"Value: \" + value)\n```\n\n## 函数\n\n```python\n# 定义函数\ndef describe_pet(pet_name,animal_type='dog'):\n  \"\"\"显示宠物的信息\"\"\"\n  print(\"\\nI have a \" + animal_type + \".\")\n  print(\"My \" + animal_type + \"'s name is\" + pet_name.title() + \".\")\n  \n# 调用函数\ndescribe_pet('willie',animal_type='cat')\n```\n\n## 面向对象\n\n```python\n# 创建类\nclass Car:\n  \"\"\"类注释写这里\"\"\"\n  def __init__(self,make,model,year):\n    self.make = make\n    self.model = model\n    self.year = year\n    self.odometer_reading = 0\n# 创建实例\ncar = Car('audi','a4',2020)\n# 继承\nclass ElectricCar(Car):\n  def __int__(self,make,model,year):\n    super()._init_(make,model,year)\n# 导入类\nfrom car import Car,ElectricCar\n# 导入模块\nimport car\n# 导入模块中所有类\nfrom car import *\n```\n\n\n\n\n\n","source":"_posts/Use_Python.md","raw":"---\ntitle: Python简明手册\ndate: 2020-05-14\ncatalog: true\ntags:\n- Python\n---\n\n## 数据结构\n\n```python\n# 字符串\nchild_name = '小明'\n# 列表\nchildren_name = []\nchildren_name.append('小刚')\n# 字典\nchildren = {}\nchildren['1','小刚']\nchildren['1'] = '小明'\ndel children['1']\nchildren = {\n  '1':'小刚',\n  '2':'小明'\n}\n# 遍历key-value\nfor key,value in children.items():\n  print(\"\\nKey: \" + key)\n  print(\"Value: \" + value)\n# 遍历key\nfor key in children.keys():\n    print(\"\\nKey: \" + key)\n# 按顺序遍历key\nfor key in sorted(children.keys()):\n    print(\"\\nKey: \" + key)\n# 遍历值\nfor value in children.values():\n    print(\"Value: \" + value)\n# 遍历值并去重\nfor value in set(children.values()):\n    print(\"Value: \" + value)\n```\n\n## 函数\n\n```python\n# 定义函数\ndef describe_pet(pet_name,animal_type='dog'):\n  \"\"\"显示宠物的信息\"\"\"\n  print(\"\\nI have a \" + animal_type + \".\")\n  print(\"My \" + animal_type + \"'s name is\" + pet_name.title() + \".\")\n  \n# 调用函数\ndescribe_pet('willie',animal_type='cat')\n```\n\n## 面向对象\n\n```python\n# 创建类\nclass Car:\n  \"\"\"类注释写这里\"\"\"\n  def __init__(self,make,model,year):\n    self.make = make\n    self.model = model\n    self.year = year\n    self.odometer_reading = 0\n# 创建实例\ncar = Car('audi','a4',2020)\n# 继承\nclass ElectricCar(Car):\n  def __int__(self,make,model,year):\n    super()._init_(make,model,year)\n# 导入类\nfrom car import Car,ElectricCar\n# 导入模块\nimport car\n# 导入模块中所有类\nfrom car import *\n```\n\n\n\n\n\n","slug":"Use_Python","published":1,"updated":"2020-12-23T15:02:16.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r60013s2b9qq4th363","content":"<h2 id=\"数据结构\">数据结构</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\">child_name = <span class=\"string\">'小明'</span></span><br><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\">children_name = []</span><br><span class=\"line\">children_name.append(<span class=\"string\">'小刚'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 字典</span></span><br><span class=\"line\">children = &#123;&#125;</span><br><span class=\"line\">children[<span class=\"string\">'1'</span>,<span class=\"string\">'小刚'</span>]</span><br><span class=\"line\">children[<span class=\"string\">'1'</span>] = <span class=\"string\">'小明'</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> children[<span class=\"string\">'1'</span>]</span><br><span class=\"line\">children = &#123;</span><br><span class=\"line\">  <span class=\"string\">'1'</span>:<span class=\"string\">'小刚'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>:<span class=\"string\">'小明'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历key-value</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> children.items():</span><br><span class=\"line\">  print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\">  print(<span class=\"string\">\"Value: \"</span> + value)</span><br><span class=\"line\"><span class=\"comment\"># 遍历key</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> children.keys():</span><br><span class=\"line\">    print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\"><span class=\"comment\"># 按顺序遍历key</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sorted(children.keys()):</span><br><span class=\"line\">    print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\"><span class=\"comment\"># 遍历值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> children.values():</span><br><span class=\"line\">    print(<span class=\"string\">\"Value: \"</span> + value)</span><br><span class=\"line\"><span class=\"comment\"># 遍历值并去重</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> set(children.values()):</span><br><span class=\"line\">    print(<span class=\"string\">\"Value: \"</span> + value)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\">函数</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_pet</span><span class=\"params\">(pet_name,animal_type=<span class=\"string\">'dog'</span>)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"显示宠物的信息\"\"\"</span></span><br><span class=\"line\">  print(<span class=\"string\">\"\\nI have a \"</span> + animal_type + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"My \"</span> + animal_type + <span class=\"string\">\"'s name is\"</span> + pet_name.title() + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\">describe_pet(<span class=\"string\">'willie'</span>,animal_type=<span class=\"string\">'cat'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象\">面向对象</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"类注释写这里\"\"\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,make,model,year)</span>:</span></span><br><span class=\"line\">    self.make = make</span><br><span class=\"line\">    self.model = model</span><br><span class=\"line\">    self.year = year</span><br><span class=\"line\">    self.odometer_reading = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">car = Car(<span class=\"string\">'audi'</span>,<span class=\"string\">'a4'</span>,<span class=\"number\">2020</span>)</span><br><span class=\"line\"><span class=\"comment\"># 继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span><span class=\"params\">(Car)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__int__</span><span class=\"params\">(self,make,model,year)</span>:</span></span><br><span class=\"line\">    super()._init_(make,model,year)</span><br><span class=\"line\"><span class=\"comment\"># 导入类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car,ElectricCar</span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> car</span><br><span class=\"line\"><span class=\"comment\"># 导入模块中所有类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>数据结构</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\">child_name = <span class=\"string\">'小明'</span></span><br><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\">children_name = []</span><br><span class=\"line\">children_name.append(<span class=\"string\">'小刚'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 字典</span></span><br><span class=\"line\">children = &#123;&#125;</span><br><span class=\"line\">children[<span class=\"string\">'1'</span>,<span class=\"string\">'小刚'</span>]</span><br><span class=\"line\">children[<span class=\"string\">'1'</span>] = <span class=\"string\">'小明'</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> children[<span class=\"string\">'1'</span>]</span><br><span class=\"line\">children = &#123;</span><br><span class=\"line\">  <span class=\"string\">'1'</span>:<span class=\"string\">'小刚'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>:<span class=\"string\">'小明'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历key-value</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> children.items():</span><br><span class=\"line\">  print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\">  print(<span class=\"string\">\"Value: \"</span> + value)</span><br><span class=\"line\"><span class=\"comment\"># 遍历key</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> children.keys():</span><br><span class=\"line\">    print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\"><span class=\"comment\"># 按顺序遍历key</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sorted(children.keys()):</span><br><span class=\"line\">    print(<span class=\"string\">\"\\nKey: \"</span> + key)</span><br><span class=\"line\"><span class=\"comment\"># 遍历值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> children.values():</span><br><span class=\"line\">    print(<span class=\"string\">\"Value: \"</span> + value)</span><br><span class=\"line\"><span class=\"comment\"># 遍历值并去重</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> set(children.values()):</span><br><span class=\"line\">    print(<span class=\"string\">\"Value: \"</span> + value)</span><br></pre></td></tr></table></figure>\n<h2>函数</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_pet</span><span class=\"params\">(pet_name,animal_type=<span class=\"string\">'dog'</span>)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"显示宠物的信息\"\"\"</span></span><br><span class=\"line\">  print(<span class=\"string\">\"\\nI have a \"</span> + animal_type + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  print(<span class=\"string\">\"My \"</span> + animal_type + <span class=\"string\">\"'s name is\"</span> + pet_name.title() + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\">describe_pet(<span class=\"string\">'willie'</span>,animal_type=<span class=\"string\">'cat'</span>)</span><br></pre></td></tr></table></figure>\n<h2>面向对象</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"类注释写这里\"\"\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,make,model,year)</span>:</span></span><br><span class=\"line\">    self.make = make</span><br><span class=\"line\">    self.model = model</span><br><span class=\"line\">    self.year = year</span><br><span class=\"line\">    self.odometer_reading = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">car = Car(<span class=\"string\">'audi'</span>,<span class=\"string\">'a4'</span>,<span class=\"number\">2020</span>)</span><br><span class=\"line\"><span class=\"comment\"># 继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span><span class=\"params\">(Car)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__int__</span><span class=\"params\">(self,make,model,year)</span>:</span></span><br><span class=\"line\">    super()._init_(make,model,year)</span><br><span class=\"line\"><span class=\"comment\"># 导入类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car,ElectricCar</span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> car</span><br><span class=\"line\"><span class=\"comment\"># 导入模块中所有类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n"},{"title":"使用Neovim打造Python IDE","date":"2020-06-05T16:00:00.000Z","catalog":true,"_content":"\n","source":"_posts/Use_neovim_as_python_IDE.md","raw":"---\ntitle: 使用Neovim打造Python IDE\ndate: 2020-06-06\ncatalog: true\ntags:\n- Neovim\n---\n\n","slug":"Use_neovim_as_python_IDE","published":1,"updated":"2020-12-23T15:15:07.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r70014s2b9f3gbja3b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"用Redis实现分布式锁","date":"2019-03-31T16:00:00.000Z","catalog":true,"_content":"\n### 用SETNX、GET、GETSET做分布式锁\n\n#### GETSET命令\n\n该命令接收两个参数：key，value。命令效果为，设置key的值为value，同时返回该key存储的旧值。该操作是原子操作。\n\n#### 使用步骤\n\n1. 计算expireTime = 当前时间 + 过期超时时间，执行SETNX key expireTime，如果返回1，则代表获取锁成功；如果返回0，\n\n   则没有获取到锁，执行第2步。\n\n2. GET key 获取oldExpireTime，并与当前时间进行比较，如果小于当前时间，则认为这个锁已经超时，可以允许别的请求重新获取，执行第3步。\n\n3. 计算newExpireTime = 当前时间 + 过期超时时间，执行GETSET key，newExpireTime 会返回currentExpireTime。\n\n4. 判断currentExpireTime 与 oldExpireTime是否相等，如果相等，说明获取锁成功，如果不相等，说明获取锁失败。\n\n5. 获取锁之后，当前线程执行业务处理，处理完毕后，应检查锁对应的过期时间是否大于当前时间，如果是，则执行DEL命令释放锁。\n\n#### 伪代码\n\n```java\npublic final class RedisLockUtil {\n  \n\tpublic static boolean lock(String key, int expire) {\n        RedisService redisService = SpringUtils.getBean(RedisService.class);\n\n        long expireTime = System.currentTimeMillis() + expire;\n        long status = redisService.setnx(key, String.valueOf(expireTime));\n\n        if(status == 1) {\n            return true;\n        }\n        long oldExpireTime = Long.parseLong(redisService.get(key, \"0\"));\n        if(oldExpireTime < System.currentTimeMillis()) {\n            //超时\n            long newExpireTime = System.currentTimeMillis() + expire;\n            long currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));\n            if(currentExpireTime == oldExpireTime) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void unLock(String key) {    \n        RedisService redisService = SpringUtils.getBean(RedisService.class);    \n        long oldExpireTime = Long.parseLong(redisService.get(key, \"0\"));   \n        if(oldExpireTime > System.currentTimeMillis()) {        \n            redisService.del(key);    \n        }\n   }\n}\n```\n\n------\n[原文链接](https://www.cnblogs.com/seesun2012/p/9214653.html) \t\n\n","source":"_posts/Use_Redis_Implement_Distributed_Lock.md","raw":"---\ntitle: 用Redis实现分布式锁\ndate: 2019-04-01\ncatalog: true\ntags:\n- Redis\n- 分布式\n---\n\n### 用SETNX、GET、GETSET做分布式锁\n\n#### GETSET命令\n\n该命令接收两个参数：key，value。命令效果为，设置key的值为value，同时返回该key存储的旧值。该操作是原子操作。\n\n#### 使用步骤\n\n1. 计算expireTime = 当前时间 + 过期超时时间，执行SETNX key expireTime，如果返回1，则代表获取锁成功；如果返回0，\n\n   则没有获取到锁，执行第2步。\n\n2. GET key 获取oldExpireTime，并与当前时间进行比较，如果小于当前时间，则认为这个锁已经超时，可以允许别的请求重新获取，执行第3步。\n\n3. 计算newExpireTime = 当前时间 + 过期超时时间，执行GETSET key，newExpireTime 会返回currentExpireTime。\n\n4. 判断currentExpireTime 与 oldExpireTime是否相等，如果相等，说明获取锁成功，如果不相等，说明获取锁失败。\n\n5. 获取锁之后，当前线程执行业务处理，处理完毕后，应检查锁对应的过期时间是否大于当前时间，如果是，则执行DEL命令释放锁。\n\n#### 伪代码\n\n```java\npublic final class RedisLockUtil {\n  \n\tpublic static boolean lock(String key, int expire) {\n        RedisService redisService = SpringUtils.getBean(RedisService.class);\n\n        long expireTime = System.currentTimeMillis() + expire;\n        long status = redisService.setnx(key, String.valueOf(expireTime));\n\n        if(status == 1) {\n            return true;\n        }\n        long oldExpireTime = Long.parseLong(redisService.get(key, \"0\"));\n        if(oldExpireTime < System.currentTimeMillis()) {\n            //超时\n            long newExpireTime = System.currentTimeMillis() + expire;\n            long currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));\n            if(currentExpireTime == oldExpireTime) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void unLock(String key) {    \n        RedisService redisService = SpringUtils.getBean(RedisService.class);    \n        long oldExpireTime = Long.parseLong(redisService.get(key, \"0\"));   \n        if(oldExpireTime > System.currentTimeMillis()) {        \n            redisService.del(key);    \n        }\n   }\n}\n```\n\n------\n[原文链接](https://www.cnblogs.com/seesun2012/p/9214653.html) \t\n\n","slug":"Use_Redis_Implement_Distributed_Lock","published":1,"updated":"2020-12-23T15:02:16.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r80016s2b9zydcuvei","content":"<h3 id=\"用setnx-get-getset做分布式锁\">用SETNX、GET、GETSET做分布式锁</h3>\n<h4 id=\"getset命令\">GETSET命令</h4>\n<p>该命令接收两个参数：key，value。命令效果为，设置key的值为value，同时返回该key存储的旧值。该操作是原子操作。</p>\n<h4 id=\"使用步骤\">使用步骤</h4>\n<ol>\n<li>\n<p>计算expireTime = 当前时间 + 过期超时时间，执行SETNX key expireTime，如果返回1，则代表获取锁成功；如果返回0，</p>\n<p>则没有获取到锁，执行第2步。</p>\n</li>\n<li>\n<p>GET key 获取oldExpireTime，并与当前时间进行比较，如果小于当前时间，则认为这个锁已经超时，可以允许别的请求重新获取，执行第3步。</p>\n</li>\n<li>\n<p>计算newExpireTime = 当前时间 + 过期超时时间，执行GETSET key，newExpireTime 会返回currentExpireTime。</p>\n</li>\n<li>\n<p>判断currentExpireTime 与 oldExpireTime是否相等，如果相等，说明获取锁成功，如果不相等，说明获取锁失败。</p>\n</li>\n<li>\n<p>获取锁之后，当前线程执行业务处理，处理完毕后，应检查锁对应的过期时间是否大于当前时间，如果是，则执行DEL命令释放锁。</p>\n</li>\n</ol>\n<h4 id=\"伪代码\">伪代码</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisLockUtil</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lock</span><span class=\"params\">(String key, <span class=\"keyword\">int</span> expire)</span> </span>&#123;</span><br><span class=\"line\">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> expireTime = System.currentTimeMillis() + expire;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> status = redisService.setnx(key, String.valueOf(expireTime));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldExpireTime &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//超时</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> newExpireTime = System.currentTimeMillis() + expire;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentExpireTime == oldExpireTime) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unLock</span><span class=\"params\">(String key)</span> </span>&#123;    </span><br><span class=\"line\">        RedisService redisService = SpringUtils.getBean(RedisService.class);    </span><br><span class=\"line\">        <span class=\"keyword\">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class=\"string\">\"0\"</span>));   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldExpireTime &gt; System.currentTimeMillis()) &#123;        </span><br><span class=\"line\">            redisService.del(key);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/seesun2012/p/9214653.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>用SETNX、GET、GETSET做分布式锁</h3>\n<h4>GETSET命令</h4>\n<p>该命令接收两个参数：key，value。命令效果为，设置key的值为value，同时返回该key存储的旧值。该操作是原子操作。</p>\n<h4>使用步骤</h4>\n<ol>\n<li>\n<p>计算expireTime = 当前时间 + 过期超时时间，执行SETNX key expireTime，如果返回1，则代表获取锁成功；如果返回0，</p>\n<p>则没有获取到锁，执行第2步。</p>\n</li>\n<li>\n<p>GET key 获取oldExpireTime，并与当前时间进行比较，如果小于当前时间，则认为这个锁已经超时，可以允许别的请求重新获取，执行第3步。</p>\n</li>\n<li>\n<p>计算newExpireTime = 当前时间 + 过期超时时间，执行GETSET key，newExpireTime 会返回currentExpireTime。</p>\n</li>\n<li>\n<p>判断currentExpireTime 与 oldExpireTime是否相等，如果相等，说明获取锁成功，如果不相等，说明获取锁失败。</p>\n</li>\n<li>\n<p>获取锁之后，当前线程执行业务处理，处理完毕后，应检查锁对应的过期时间是否大于当前时间，如果是，则执行DEL命令释放锁。</p>\n</li>\n</ol>\n<h4>伪代码</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisLockUtil</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lock</span><span class=\"params\">(String key, <span class=\"keyword\">int</span> expire)</span> </span>&#123;</span><br><span class=\"line\">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> expireTime = System.currentTimeMillis() + expire;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> status = redisService.setnx(key, String.valueOf(expireTime));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldExpireTime &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//超时</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> newExpireTime = System.currentTimeMillis() + expire;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentExpireTime == oldExpireTime) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unLock</span><span class=\"params\">(String key)</span> </span>&#123;    </span><br><span class=\"line\">        RedisService redisService = SpringUtils.getBean(RedisService.class);    </span><br><span class=\"line\">        <span class=\"keyword\">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class=\"string\">\"0\"</span>));   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldExpireTime &gt; System.currentTimeMillis()) &#123;        </span><br><span class=\"line\">            redisService.del(key);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/seesun2012/p/9214653.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n"},{"title":"正确理解RESTful API","date":"2019-05-11T16:00:00.000Z","catalog":true,"_content":">\"你总提及的那个词，它的含义与你想表达的意思并不一样。\"\n\n## 前言\n\n眼下，在技术圈，REST俨然已经成为一个时髦的流行词汇，很多人声称自己设计的API是\"RESTful API\"。但据我观察，大部分人对REST的真正含义知之甚少，很多人对REST的一些核心概念尚未真正理解，甚至存在误解。那么，到底什么是REST，什么样的API可以叫做”RESTful API“呢？本文试图回答这两个问题。\n\n## REST\n\n### 来源\n\nREST一词来源于[Roy Thomas Fielding](http://www.ics.uci.edu/~fielding/)在2000年发表的[博士论文](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm)，是\"Representational State Transfer\"的缩写，这个词组可以翻译为\"表述性状态转移\"。\n\n### 概念\n\nREST是一种为分布式超媒体系统设计的架构风格。万维网是REST架构风格的一个应用实例。\n\n### 特点\n\n- 客户-服务器\n- 无状态\n- 缓存\n- 统一接口\n- 分层系统\n- 按需代码\n\n### 架构约束\n\nREST架构风格区别于其他基于网络的架构风格的核心特征是，它强调**组件**之间要有一个统一的接口。实现与它们所提供的服务是解耦的，这促进了独立的可进化性。为了获得统一的接口，需要有多个架构约束来指导组件的行为。\nREST由四个接口架构约束来定义：\n\n- **资源**的识别\n- 通过**表述**来操作资源\n- 自描述的消息\n- **超媒体**作为应用状态的引擎。\n\n#### 组件\n\nREST组件可根据它们在整个应用动作中的角色来进行分类，如下表所示：\n组件|例子\n--|--\norigin server|Apache httpd\ngateway|Nginx\nproxy|Netscape代理\nuser agent|web浏览器\n统一接口理解起来比较抽象，这里，我们拿origin server 和 user agent举例说明，前者可以理解为服务器，后者可以理解为客户端，基于HTTP的REST接口，客户端并不关心提供接口的服务端是采用何种语言编写，也不关心服务端的架构，因此在接口协议不变的情况下，客户端和服务器可以独立进化，因此达到解耦。\n\n#### 数据元素\n\nREST的关键方面之一是架构的数据元素的性质和状态。REST聚焦于分享对于数据类型的理解，但是对于作为标准化接口暴露的操作的范围进行了限制。REST组件之间通过以一种数据格式移交资源的表述来进行通信。\nREST的数据元素如下表所示：\n数据元素|现代web实例\n--|--\n资源|一份文档或一张图片\n资源标识符|URL、URN\n表述|HTML、JSON\n表述元数据|媒体类型\n\n#### 资源\n\n任何能够被命名的信息都能够作为一个资源，任何一个URL都应该符合资源的定义。\n\n#### 表述\n\n某个资源的当前状态或预期状态。实例：HTTP消息实体。\n\n#### 媒体类型\n\n表述的数据格式被称为媒体类型。\n\n#### 超媒体\n\n**包含原生超链接元素的媒体类型，称为超媒体类型，简称超媒体。**\n\n这个定义比较抽象，你可以这样来理解：\n超媒体是对类似于HTML链接、表单等的事物抽象出来的通用术语，服务器端可以通过这种技术来向客户端说明下一步的操作。\nREST的灵魂HATEOAS（超媒体作为应用状态的引擎）该如何理解呢？\n回想一下我们是如何浏览Web的，是不是大体上可以总结为要么填写表单要么访问各种链接？\n我们所说的超媒体作为应用状态的引擎，类比的就是这种场景。\n\n## RESTful API\n\n### RESTful架构\n\n如果一个架构满足REST约束，就称它为RESTful架构。\n同理，如果一个Web API满足REST约束，就称它为RESTful API。\n\n### Web API落后于Web\n\n现今大部分的API都有着一个很大的问题：一旦部署，它们将无法改变。\n它们通常有如下几个特征：\n- Web API经常有大量的阅读文档来告诉你API提供者是如何为不同的接口设计URL的。在REST的世界中，将有关构造URL的信息放到单独的阅读文档中违背了连通性和自描述信息的原则。\n- 现今的Web API呈现资源的方式更像是一个巨型的选项菜单，而不是一张相互连通的网。这使得API使用者很难了解资源之间的相互影响。\n- 要集成一个新的API不可避免地需要编写新的定制化软件，或者安装别人编写的一次性的代码库。\n- 当Web API发生了变化以后，定制化的API客户端就不能正常使用了，并且需要维护者为此进行一些代码修复。\n\n### 超媒体的好处\n\n上文简单列举了现今大部分API存在的一些问题，这些问题通常也比较难以简单解决，尤其是最后两个问题，相当棘手。\n如何解决？超媒体正是解决之道，利用超媒体，可以构建因时而变的服务。\n当API发生变化之后，API提供者不再需要考虑是否要兼容旧的API版本，而是可以像Web开发者一样，在客户端无感知的情况下平滑升级API。因为基于超媒体约束，API提供者和消费者是解耦的，就好比针对接口编程和针对实现编程的差异。\n因此，利用超媒体，可以创建可不断演进的超媒体应用。\n\n### 超媒体很难\n\n尽管超媒体是解决现今一些API痛点问题的关键，但大部分API提供者并没有使用它。其中的原因，除了难以理解之外，还有一个更重要的因素：语义挑战。\n\n#### 语义挑战\n\n回想一下我们是如何上网的：给我们一个网址，不需要借助额外的说明文档，我们就可以愉快并且顺利地进行网上冲浪了，我们点击了一些页面的超链接或者提交了某个表单，都是对资源的操作，要么从一个资源跳到另一个资源，要么改变了资源的状态，我们访问网站的过程非常顺利，这要归功于一个运行速度很慢但是又非常昂贵的硬件：人。因为人类可以理解表单背后的语义信息，以及一个超链接即将跳转的去处，而这却是计算机的弱项。\n\nRESTful API的目标是没有人类参与的前提下完成相应的工作。但是我们该如何编写程序让计算机来决定单击哪个链接呢？计算机可以解析HTML标签`<a href=\"/messages\">Get Started</a>`。但是它并不理解\"Get Started\"这个词组。如果提供的自描述信息不能被软件理解，我们又何苦设计这种提供自描述信息的API呢？\n\nRESTful API设计最大的挑战是：消除\"理解文档的结构\"和\"理解文档的含义\"之间的语义鸿沟。即：语义挑战。\n\n目前，这方面的进展非常小，我们也不可能完全解决它。\n\n## 如何达成REST\n\n正是因为完全符合Fielding博士REST约束的架构很难实现，目前应用REST的成功案例也仅有一个万维网。\n\nRichardson在考察了数百种web service设计案例之后，提出了一种成熟度模型，用来评估一个web service接近REST的程度。\n\n### Richardson成熟度模型\n\n![img](http://forgus.vicp.io/resources/images/maturity_model.png)\n\n如图所示，该成熟度模型用4个层级来评估一个web service满足REST约束的程度，分别是：\n\n- 第0级：基于HTTP协议\n- 第1级：抽象资源\n- 第2级：利用HTTP动词\n- 第3级：超媒体控制\n\n#### 第0级：基于HTTP协议\n\n![level_zero](http://forgus.vicp.io/resources/images/level_zero.png)\n\n\n这一级的web service仅仅将HTTP当做一种传输协议来使用，通常只有一个URI，只使用POST或GET方法，\n\n使用方式上更像远程过程调用。\n\n#### 第1级：有清晰的资源抽象\n\n![img](http://forgus.vicp.io/resources/images/level_one.png)\n\n这一级的web service不再使用单一URI，而是使用很多不一样的URI来映射不同的接口，初步具有了资源的概念，但一个URI通常依旧只使用GET或POST其中一种方法。\n\n#### 第2级：合理使用HTTP动词\n\n![img](http://forgus.vicp.io/resources/images/level_two.png)\n\n这一级的web service除了严格按照ROA（Resource-Oriented Architecture，面向资源架构）来设计URI，更加充分地利用了HTTP动词的语义，每一个URI可支持多个不同的HTTP方法，用来映射对资源的不同操作。\n\n#### 第3级：能够完美支持HATEOAS\n\n![img](http://forgus.vicp.io/resources/images/level_three.png)\n\n这一级的web service在第2级的基础上应用了超媒体类型，在资源表述中加入了自描述的消息和超媒体控件，实现了超文本驱动，即HATEOAS（超媒体作为应用状态的引擎）。\n\n## 结束语\n\n正是因为设计出完全满足REST约束的API很难，目前大部分的Web API还停留在第1级或第2级的阶段，但是REST是值得我们追求的，因为它是构建可不断演进的API的解决方案。\n目前来说，只要我们大体上能朝着第3级成熟度去努力，先部分拥抱REST的一些约束，使我们的API能够达到第2级，快速解决手头的一些问题，就可以认为这是一个RESTful API了。","source":"_posts/Understand_RESTful_API.md","raw":"---\ntitle: 正确理解RESTful API\ndate: 2019-05-12\ncatalog: true\ntags:\n- RESTful\n---\n>\"你总提及的那个词，它的含义与你想表达的意思并不一样。\"\n\n## 前言\n\n眼下，在技术圈，REST俨然已经成为一个时髦的流行词汇，很多人声称自己设计的API是\"RESTful API\"。但据我观察，大部分人对REST的真正含义知之甚少，很多人对REST的一些核心概念尚未真正理解，甚至存在误解。那么，到底什么是REST，什么样的API可以叫做”RESTful API“呢？本文试图回答这两个问题。\n\n## REST\n\n### 来源\n\nREST一词来源于[Roy Thomas Fielding](http://www.ics.uci.edu/~fielding/)在2000年发表的[博士论文](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm)，是\"Representational State Transfer\"的缩写，这个词组可以翻译为\"表述性状态转移\"。\n\n### 概念\n\nREST是一种为分布式超媒体系统设计的架构风格。万维网是REST架构风格的一个应用实例。\n\n### 特点\n\n- 客户-服务器\n- 无状态\n- 缓存\n- 统一接口\n- 分层系统\n- 按需代码\n\n### 架构约束\n\nREST架构风格区别于其他基于网络的架构风格的核心特征是，它强调**组件**之间要有一个统一的接口。实现与它们所提供的服务是解耦的，这促进了独立的可进化性。为了获得统一的接口，需要有多个架构约束来指导组件的行为。\nREST由四个接口架构约束来定义：\n\n- **资源**的识别\n- 通过**表述**来操作资源\n- 自描述的消息\n- **超媒体**作为应用状态的引擎。\n\n#### 组件\n\nREST组件可根据它们在整个应用动作中的角色来进行分类，如下表所示：\n组件|例子\n--|--\norigin server|Apache httpd\ngateway|Nginx\nproxy|Netscape代理\nuser agent|web浏览器\n统一接口理解起来比较抽象，这里，我们拿origin server 和 user agent举例说明，前者可以理解为服务器，后者可以理解为客户端，基于HTTP的REST接口，客户端并不关心提供接口的服务端是采用何种语言编写，也不关心服务端的架构，因此在接口协议不变的情况下，客户端和服务器可以独立进化，因此达到解耦。\n\n#### 数据元素\n\nREST的关键方面之一是架构的数据元素的性质和状态。REST聚焦于分享对于数据类型的理解，但是对于作为标准化接口暴露的操作的范围进行了限制。REST组件之间通过以一种数据格式移交资源的表述来进行通信。\nREST的数据元素如下表所示：\n数据元素|现代web实例\n--|--\n资源|一份文档或一张图片\n资源标识符|URL、URN\n表述|HTML、JSON\n表述元数据|媒体类型\n\n#### 资源\n\n任何能够被命名的信息都能够作为一个资源，任何一个URL都应该符合资源的定义。\n\n#### 表述\n\n某个资源的当前状态或预期状态。实例：HTTP消息实体。\n\n#### 媒体类型\n\n表述的数据格式被称为媒体类型。\n\n#### 超媒体\n\n**包含原生超链接元素的媒体类型，称为超媒体类型，简称超媒体。**\n\n这个定义比较抽象，你可以这样来理解：\n超媒体是对类似于HTML链接、表单等的事物抽象出来的通用术语，服务器端可以通过这种技术来向客户端说明下一步的操作。\nREST的灵魂HATEOAS（超媒体作为应用状态的引擎）该如何理解呢？\n回想一下我们是如何浏览Web的，是不是大体上可以总结为要么填写表单要么访问各种链接？\n我们所说的超媒体作为应用状态的引擎，类比的就是这种场景。\n\n## RESTful API\n\n### RESTful架构\n\n如果一个架构满足REST约束，就称它为RESTful架构。\n同理，如果一个Web API满足REST约束，就称它为RESTful API。\n\n### Web API落后于Web\n\n现今大部分的API都有着一个很大的问题：一旦部署，它们将无法改变。\n它们通常有如下几个特征：\n- Web API经常有大量的阅读文档来告诉你API提供者是如何为不同的接口设计URL的。在REST的世界中，将有关构造URL的信息放到单独的阅读文档中违背了连通性和自描述信息的原则。\n- 现今的Web API呈现资源的方式更像是一个巨型的选项菜单，而不是一张相互连通的网。这使得API使用者很难了解资源之间的相互影响。\n- 要集成一个新的API不可避免地需要编写新的定制化软件，或者安装别人编写的一次性的代码库。\n- 当Web API发生了变化以后，定制化的API客户端就不能正常使用了，并且需要维护者为此进行一些代码修复。\n\n### 超媒体的好处\n\n上文简单列举了现今大部分API存在的一些问题，这些问题通常也比较难以简单解决，尤其是最后两个问题，相当棘手。\n如何解决？超媒体正是解决之道，利用超媒体，可以构建因时而变的服务。\n当API发生变化之后，API提供者不再需要考虑是否要兼容旧的API版本，而是可以像Web开发者一样，在客户端无感知的情况下平滑升级API。因为基于超媒体约束，API提供者和消费者是解耦的，就好比针对接口编程和针对实现编程的差异。\n因此，利用超媒体，可以创建可不断演进的超媒体应用。\n\n### 超媒体很难\n\n尽管超媒体是解决现今一些API痛点问题的关键，但大部分API提供者并没有使用它。其中的原因，除了难以理解之外，还有一个更重要的因素：语义挑战。\n\n#### 语义挑战\n\n回想一下我们是如何上网的：给我们一个网址，不需要借助额外的说明文档，我们就可以愉快并且顺利地进行网上冲浪了，我们点击了一些页面的超链接或者提交了某个表单，都是对资源的操作，要么从一个资源跳到另一个资源，要么改变了资源的状态，我们访问网站的过程非常顺利，这要归功于一个运行速度很慢但是又非常昂贵的硬件：人。因为人类可以理解表单背后的语义信息，以及一个超链接即将跳转的去处，而这却是计算机的弱项。\n\nRESTful API的目标是没有人类参与的前提下完成相应的工作。但是我们该如何编写程序让计算机来决定单击哪个链接呢？计算机可以解析HTML标签`<a href=\"/messages\">Get Started</a>`。但是它并不理解\"Get Started\"这个词组。如果提供的自描述信息不能被软件理解，我们又何苦设计这种提供自描述信息的API呢？\n\nRESTful API设计最大的挑战是：消除\"理解文档的结构\"和\"理解文档的含义\"之间的语义鸿沟。即：语义挑战。\n\n目前，这方面的进展非常小，我们也不可能完全解决它。\n\n## 如何达成REST\n\n正是因为完全符合Fielding博士REST约束的架构很难实现，目前应用REST的成功案例也仅有一个万维网。\n\nRichardson在考察了数百种web service设计案例之后，提出了一种成熟度模型，用来评估一个web service接近REST的程度。\n\n### Richardson成熟度模型\n\n![img](http://forgus.vicp.io/resources/images/maturity_model.png)\n\n如图所示，该成熟度模型用4个层级来评估一个web service满足REST约束的程度，分别是：\n\n- 第0级：基于HTTP协议\n- 第1级：抽象资源\n- 第2级：利用HTTP动词\n- 第3级：超媒体控制\n\n#### 第0级：基于HTTP协议\n\n![level_zero](http://forgus.vicp.io/resources/images/level_zero.png)\n\n\n这一级的web service仅仅将HTTP当做一种传输协议来使用，通常只有一个URI，只使用POST或GET方法，\n\n使用方式上更像远程过程调用。\n\n#### 第1级：有清晰的资源抽象\n\n![img](http://forgus.vicp.io/resources/images/level_one.png)\n\n这一级的web service不再使用单一URI，而是使用很多不一样的URI来映射不同的接口，初步具有了资源的概念，但一个URI通常依旧只使用GET或POST其中一种方法。\n\n#### 第2级：合理使用HTTP动词\n\n![img](http://forgus.vicp.io/resources/images/level_two.png)\n\n这一级的web service除了严格按照ROA（Resource-Oriented Architecture，面向资源架构）来设计URI，更加充分地利用了HTTP动词的语义，每一个URI可支持多个不同的HTTP方法，用来映射对资源的不同操作。\n\n#### 第3级：能够完美支持HATEOAS\n\n![img](http://forgus.vicp.io/resources/images/level_three.png)\n\n这一级的web service在第2级的基础上应用了超媒体类型，在资源表述中加入了自描述的消息和超媒体控件，实现了超文本驱动，即HATEOAS（超媒体作为应用状态的引擎）。\n\n## 结束语\n\n正是因为设计出完全满足REST约束的API很难，目前大部分的Web API还停留在第1级或第2级的阶段，但是REST是值得我们追求的，因为它是构建可不断演进的API的解决方案。\n目前来说，只要我们大体上能朝着第3级成熟度去努力，先部分拥抱REST的一些约束，使我们的API能够达到第2级，快速解决手头的一些问题，就可以认为这是一个RESTful API了。","slug":"Understand_RESTful_API","published":1,"updated":"2020-12-23T15:02:16.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84r90018s2b9ras6os8w","content":"<blockquote>\n<p>“你总提及的那个词，它的含义与你想表达的意思并不一样。”</p>\n</blockquote>\n<h2 id=\"前言\">前言</h2>\n<p>眼下，在技术圈，REST俨然已经成为一个时髦的流行词汇，很多人声称自己设计的API是&quot;RESTful API&quot;。但据我观察，大部分人对REST的真正含义知之甚少，很多人对REST的一些核心概念尚未真正理解，甚至存在误解。那么，到底什么是REST，什么样的API可以叫做”RESTful API“呢？本文试图回答这两个问题。</p>\n<h2 id=\"rest\">REST</h2>\n<h3 id=\"来源\">来源</h3>\n<p>REST一词来源于<a href=\"http://www.ics.uci.edu/~fielding/\" target=\"_blank\" rel=\"noopener\">Roy Thomas Fielding</a>在2000年发表的<a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\" target=\"_blank\" rel=\"noopener\">博士论文</a>，是&quot;Representational State Transfer&quot;的缩写，这个词组可以翻译为&quot;表述性状态转移&quot;。</p>\n<h3 id=\"概念\">概念</h3>\n<p>REST是一种为分布式超媒体系统设计的架构风格。万维网是REST架构风格的一个应用实例。</p>\n<h3 id=\"特点\">特点</h3>\n<ul>\n<li>客户-服务器</li>\n<li>无状态</li>\n<li>缓存</li>\n<li>统一接口</li>\n<li>分层系统</li>\n<li>按需代码</li>\n</ul>\n<h3 id=\"架构约束\">架构约束</h3>\n<p>REST架构风格区别于其他基于网络的架构风格的核心特征是，它强调<strong>组件</strong>之间要有一个统一的接口。实现与它们所提供的服务是解耦的，这促进了独立的可进化性。为了获得统一的接口，需要有多个架构约束来指导组件的行为。<br>\nREST由四个接口架构约束来定义：</p>\n<ul>\n<li><strong>资源</strong>的识别</li>\n<li>通过<strong>表述</strong>来操作资源</li>\n<li>自描述的消息</li>\n<li><strong>超媒体</strong>作为应用状态的引擎。</li>\n</ul>\n<h4 id=\"组件\">组件</h4>\n<p>REST组件可根据它们在整个应用动作中的角色来进行分类，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>origin server</td>\n<td>Apache httpd</td>\n</tr>\n<tr>\n<td>gateway</td>\n<td>Nginx</td>\n</tr>\n<tr>\n<td>proxy</td>\n<td>Netscape代理</td>\n</tr>\n<tr>\n<td>user agent</td>\n<td>web浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>统一接口理解起来比较抽象，这里，我们拿origin server 和 user agent举例说明，前者可以理解为服务器，后者可以理解为客户端，基于HTTP的REST接口，客户端并不关心提供接口的服务端是采用何种语言编写，也不关心服务端的架构，因此在接口协议不变的情况下，客户端和服务器可以独立进化，因此达到解耦。</p>\n<h4 id=\"数据元素\">数据元素</h4>\n<p>REST的关键方面之一是架构的数据元素的性质和状态。REST聚焦于分享对于数据类型的理解，但是对于作为标准化接口暴露的操作的范围进行了限制。REST组件之间通过以一种数据格式移交资源的表述来进行通信。<br>\nREST的数据元素如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>数据元素</th>\n<th>现代web实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>资源</td>\n<td>一份文档或一张图片</td>\n</tr>\n<tr>\n<td>资源标识符</td>\n<td>URL、URN</td>\n</tr>\n<tr>\n<td>表述</td>\n<td>HTML、JSON</td>\n</tr>\n<tr>\n<td>表述元数据</td>\n<td>媒体类型</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"资源\">资源</h4>\n<p>任何能够被命名的信息都能够作为一个资源，任何一个URL都应该符合资源的定义。</p>\n<h4 id=\"表述\">表述</h4>\n<p>某个资源的当前状态或预期状态。实例：HTTP消息实体。</p>\n<h4 id=\"媒体类型\">媒体类型</h4>\n<p>表述的数据格式被称为媒体类型。</p>\n<h4 id=\"超媒体\">超媒体</h4>\n<p><strong>包含原生超链接元素的媒体类型，称为超媒体类型，简称超媒体。</strong></p>\n<p>这个定义比较抽象，你可以这样来理解：<br>\n超媒体是对类似于HTML链接、表单等的事物抽象出来的通用术语，服务器端可以通过这种技术来向客户端说明下一步的操作。<br>\nREST的灵魂HATEOAS（超媒体作为应用状态的引擎）该如何理解呢？<br>\n回想一下我们是如何浏览Web的，是不是大体上可以总结为要么填写表单要么访问各种链接？<br>\n我们所说的超媒体作为应用状态的引擎，类比的就是这种场景。</p>\n<h2 id=\"restful-api\">RESTful API</h2>\n<h3 id=\"restful架构\">RESTful架构</h3>\n<p>如果一个架构满足REST约束，就称它为RESTful架构。<br>\n同理，如果一个Web API满足REST约束，就称它为RESTful API。</p>\n<h3 id=\"web-api落后于web\">Web API落后于Web</h3>\n<p>现今大部分的API都有着一个很大的问题：一旦部署，它们将无法改变。<br>\n它们通常有如下几个特征：</p>\n<ul>\n<li>Web API经常有大量的阅读文档来告诉你API提供者是如何为不同的接口设计URL的。在REST的世界中，将有关构造URL的信息放到单独的阅读文档中违背了连通性和自描述信息的原则。</li>\n<li>现今的Web API呈现资源的方式更像是一个巨型的选项菜单，而不是一张相互连通的网。这使得API使用者很难了解资源之间的相互影响。</li>\n<li>要集成一个新的API不可避免地需要编写新的定制化软件，或者安装别人编写的一次性的代码库。</li>\n<li>当Web API发生了变化以后，定制化的API客户端就不能正常使用了，并且需要维护者为此进行一些代码修复。</li>\n</ul>\n<h3 id=\"超媒体的好处\">超媒体的好处</h3>\n<p>上文简单列举了现今大部分API存在的一些问题，这些问题通常也比较难以简单解决，尤其是最后两个问题，相当棘手。<br>\n如何解决？超媒体正是解决之道，利用超媒体，可以构建因时而变的服务。<br>\n当API发生变化之后，API提供者不再需要考虑是否要兼容旧的API版本，而是可以像Web开发者一样，在客户端无感知的情况下平滑升级API。因为基于超媒体约束，API提供者和消费者是解耦的，就好比针对接口编程和针对实现编程的差异。<br>\n因此，利用超媒体，可以创建可不断演进的超媒体应用。</p>\n<h3 id=\"超媒体很难\">超媒体很难</h3>\n<p>尽管超媒体是解决现今一些API痛点问题的关键，但大部分API提供者并没有使用它。其中的原因，除了难以理解之外，还有一个更重要的因素：语义挑战。</p>\n<h4 id=\"语义挑战\">语义挑战</h4>\n<p>回想一下我们是如何上网的：给我们一个网址，不需要借助额外的说明文档，我们就可以愉快并且顺利地进行网上冲浪了，我们点击了一些页面的超链接或者提交了某个表单，都是对资源的操作，要么从一个资源跳到另一个资源，要么改变了资源的状态，我们访问网站的过程非常顺利，这要归功于一个运行速度很慢但是又非常昂贵的硬件：人。因为人类可以理解表单背后的语义信息，以及一个超链接即将跳转的去处，而这却是计算机的弱项。</p>\n<p>RESTful API的目标是没有人类参与的前提下完成相应的工作。但是我们该如何编写程序让计算机来决定单击哪个链接呢？计算机可以解析HTML标签<code>&lt;a href=&quot;/messages&quot;&gt;Get Started&lt;/a&gt;</code>。但是它并不理解&quot;Get Started&quot;这个词组。如果提供的自描述信息不能被软件理解，我们又何苦设计这种提供自描述信息的API呢？</p>\n<p>RESTful API设计最大的挑战是：消除&quot;理解文档的结构&quot;和&quot;理解文档的含义&quot;之间的语义鸿沟。即：语义挑战。</p>\n<p>目前，这方面的进展非常小，我们也不可能完全解决它。</p>\n<h2 id=\"如何达成rest\">如何达成REST</h2>\n<p>正是因为完全符合Fielding博士REST约束的架构很难实现，目前应用REST的成功案例也仅有一个万维网。</p>\n<p>Richardson在考察了数百种web service设计案例之后，提出了一种成熟度模型，用来评估一个web service接近REST的程度。</p>\n<h3 id=\"richardson成熟度模型\">Richardson成熟度模型</h3>\n<p><img src=\"http://forgus.vicp.io/resources/images/maturity_model.png\" alt=\"img\"></p>\n<p>如图所示，该成熟度模型用4个层级来评估一个web service满足REST约束的程度，分别是：</p>\n<ul>\n<li>第0级：基于HTTP协议</li>\n<li>第1级：抽象资源</li>\n<li>第2级：利用HTTP动词</li>\n<li>第3级：超媒体控制</li>\n</ul>\n<h4 id=\"第0级基于http协议\">第0级：基于HTTP协议</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_zero.png\" alt=\"level_zero\"></p>\n<p>这一级的web service仅仅将HTTP当做一种传输协议来使用，通常只有一个URI，只使用POST或GET方法，</p>\n<p>使用方式上更像远程过程调用。</p>\n<h4 id=\"第1级有清晰的资源抽象\">第1级：有清晰的资源抽象</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_one.png\" alt=\"img\"></p>\n<p>这一级的web service不再使用单一URI，而是使用很多不一样的URI来映射不同的接口，初步具有了资源的概念，但一个URI通常依旧只使用GET或POST其中一种方法。</p>\n<h4 id=\"第2级合理使用http动词\">第2级：合理使用HTTP动词</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_two.png\" alt=\"img\"></p>\n<p>这一级的web service除了严格按照ROA（Resource-Oriented Architecture，面向资源架构）来设计URI，更加充分地利用了HTTP动词的语义，每一个URI可支持多个不同的HTTP方法，用来映射对资源的不同操作。</p>\n<h4 id=\"第3级能够完美支持hateoas\">第3级：能够完美支持HATEOAS</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_three.png\" alt=\"img\"></p>\n<p>这一级的web service在第2级的基础上应用了超媒体类型，在资源表述中加入了自描述的消息和超媒体控件，实现了超文本驱动，即HATEOAS（超媒体作为应用状态的引擎）。</p>\n<h2 id=\"结束语\">结束语</h2>\n<p>正是因为设计出完全满足REST约束的API很难，目前大部分的Web API还停留在第1级或第2级的阶段，但是REST是值得我们追求的，因为它是构建可不断演进的API的解决方案。<br>\n目前来说，只要我们大体上能朝着第3级成熟度去努力，先部分拥抱REST的一些约束，使我们的API能够达到第2级，快速解决手头的一些问题，就可以认为这是一个RESTful API了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“你总提及的那个词，它的含义与你想表达的意思并不一样。”</p>\n</blockquote>\n<h2>前言</h2>\n<p>眼下，在技术圈，REST俨然已经成为一个时髦的流行词汇，很多人声称自己设计的API是&quot;RESTful API&quot;。但据我观察，大部分人对REST的真正含义知之甚少，很多人对REST的一些核心概念尚未真正理解，甚至存在误解。那么，到底什么是REST，什么样的API可以叫做”RESTful API“呢？本文试图回答这两个问题。</p>\n<h2>REST</h2>\n<h3>来源</h3>\n<p>REST一词来源于<a href=\"http://www.ics.uci.edu/~fielding/\" target=\"_blank\" rel=\"noopener\">Roy Thomas Fielding</a>在2000年发表的<a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\" target=\"_blank\" rel=\"noopener\">博士论文</a>，是&quot;Representational State Transfer&quot;的缩写，这个词组可以翻译为&quot;表述性状态转移&quot;。</p>\n<h3>概念</h3>\n<p>REST是一种为分布式超媒体系统设计的架构风格。万维网是REST架构风格的一个应用实例。</p>\n<h3>特点</h3>\n<ul>\n<li>客户-服务器</li>\n<li>无状态</li>\n<li>缓存</li>\n<li>统一接口</li>\n<li>分层系统</li>\n<li>按需代码</li>\n</ul>\n<h3>架构约束</h3>\n<p>REST架构风格区别于其他基于网络的架构风格的核心特征是，它强调<strong>组件</strong>之间要有一个统一的接口。实现与它们所提供的服务是解耦的，这促进了独立的可进化性。为了获得统一的接口，需要有多个架构约束来指导组件的行为。<br>\nREST由四个接口架构约束来定义：</p>\n<ul>\n<li><strong>资源</strong>的识别</li>\n<li>通过<strong>表述</strong>来操作资源</li>\n<li>自描述的消息</li>\n<li><strong>超媒体</strong>作为应用状态的引擎。</li>\n</ul>\n<h4>组件</h4>\n<p>REST组件可根据它们在整个应用动作中的角色来进行分类，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>origin server</td>\n<td>Apache httpd</td>\n</tr>\n<tr>\n<td>gateway</td>\n<td>Nginx</td>\n</tr>\n<tr>\n<td>proxy</td>\n<td>Netscape代理</td>\n</tr>\n<tr>\n<td>user agent</td>\n<td>web浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>统一接口理解起来比较抽象，这里，我们拿origin server 和 user agent举例说明，前者可以理解为服务器，后者可以理解为客户端，基于HTTP的REST接口，客户端并不关心提供接口的服务端是采用何种语言编写，也不关心服务端的架构，因此在接口协议不变的情况下，客户端和服务器可以独立进化，因此达到解耦。</p>\n<h4>数据元素</h4>\n<p>REST的关键方面之一是架构的数据元素的性质和状态。REST聚焦于分享对于数据类型的理解，但是对于作为标准化接口暴露的操作的范围进行了限制。REST组件之间通过以一种数据格式移交资源的表述来进行通信。<br>\nREST的数据元素如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>数据元素</th>\n<th>现代web实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>资源</td>\n<td>一份文档或一张图片</td>\n</tr>\n<tr>\n<td>资源标识符</td>\n<td>URL、URN</td>\n</tr>\n<tr>\n<td>表述</td>\n<td>HTML、JSON</td>\n</tr>\n<tr>\n<td>表述元数据</td>\n<td>媒体类型</td>\n</tr>\n</tbody>\n</table>\n<h4>资源</h4>\n<p>任何能够被命名的信息都能够作为一个资源，任何一个URL都应该符合资源的定义。</p>\n<h4>表述</h4>\n<p>某个资源的当前状态或预期状态。实例：HTTP消息实体。</p>\n<h4>媒体类型</h4>\n<p>表述的数据格式被称为媒体类型。</p>\n<h4>超媒体</h4>\n<p><strong>包含原生超链接元素的媒体类型，称为超媒体类型，简称超媒体。</strong></p>\n<p>这个定义比较抽象，你可以这样来理解：<br>\n超媒体是对类似于HTML链接、表单等的事物抽象出来的通用术语，服务器端可以通过这种技术来向客户端说明下一步的操作。<br>\nREST的灵魂HATEOAS（超媒体作为应用状态的引擎）该如何理解呢？<br>\n回想一下我们是如何浏览Web的，是不是大体上可以总结为要么填写表单要么访问各种链接？<br>\n我们所说的超媒体作为应用状态的引擎，类比的就是这种场景。</p>\n<h2>RESTful API</h2>\n<h3>RESTful架构</h3>\n<p>如果一个架构满足REST约束，就称它为RESTful架构。<br>\n同理，如果一个Web API满足REST约束，就称它为RESTful API。</p>\n<h3>Web API落后于Web</h3>\n<p>现今大部分的API都有着一个很大的问题：一旦部署，它们将无法改变。<br>\n它们通常有如下几个特征：</p>\n<ul>\n<li>Web API经常有大量的阅读文档来告诉你API提供者是如何为不同的接口设计URL的。在REST的世界中，将有关构造URL的信息放到单独的阅读文档中违背了连通性和自描述信息的原则。</li>\n<li>现今的Web API呈现资源的方式更像是一个巨型的选项菜单，而不是一张相互连通的网。这使得API使用者很难了解资源之间的相互影响。</li>\n<li>要集成一个新的API不可避免地需要编写新的定制化软件，或者安装别人编写的一次性的代码库。</li>\n<li>当Web API发生了变化以后，定制化的API客户端就不能正常使用了，并且需要维护者为此进行一些代码修复。</li>\n</ul>\n<h3>超媒体的好处</h3>\n<p>上文简单列举了现今大部分API存在的一些问题，这些问题通常也比较难以简单解决，尤其是最后两个问题，相当棘手。<br>\n如何解决？超媒体正是解决之道，利用超媒体，可以构建因时而变的服务。<br>\n当API发生变化之后，API提供者不再需要考虑是否要兼容旧的API版本，而是可以像Web开发者一样，在客户端无感知的情况下平滑升级API。因为基于超媒体约束，API提供者和消费者是解耦的，就好比针对接口编程和针对实现编程的差异。<br>\n因此，利用超媒体，可以创建可不断演进的超媒体应用。</p>\n<h3>超媒体很难</h3>\n<p>尽管超媒体是解决现今一些API痛点问题的关键，但大部分API提供者并没有使用它。其中的原因，除了难以理解之外，还有一个更重要的因素：语义挑战。</p>\n<h4>语义挑战</h4>\n<p>回想一下我们是如何上网的：给我们一个网址，不需要借助额外的说明文档，我们就可以愉快并且顺利地进行网上冲浪了，我们点击了一些页面的超链接或者提交了某个表单，都是对资源的操作，要么从一个资源跳到另一个资源，要么改变了资源的状态，我们访问网站的过程非常顺利，这要归功于一个运行速度很慢但是又非常昂贵的硬件：人。因为人类可以理解表单背后的语义信息，以及一个超链接即将跳转的去处，而这却是计算机的弱项。</p>\n<p>RESTful API的目标是没有人类参与的前提下完成相应的工作。但是我们该如何编写程序让计算机来决定单击哪个链接呢？计算机可以解析HTML标签<code>&lt;a href=&quot;/messages&quot;&gt;Get Started&lt;/a&gt;</code>。但是它并不理解&quot;Get Started&quot;这个词组。如果提供的自描述信息不能被软件理解，我们又何苦设计这种提供自描述信息的API呢？</p>\n<p>RESTful API设计最大的挑战是：消除&quot;理解文档的结构&quot;和&quot;理解文档的含义&quot;之间的语义鸿沟。即：语义挑战。</p>\n<p>目前，这方面的进展非常小，我们也不可能完全解决它。</p>\n<h2>如何达成REST</h2>\n<p>正是因为完全符合Fielding博士REST约束的架构很难实现，目前应用REST的成功案例也仅有一个万维网。</p>\n<p>Richardson在考察了数百种web service设计案例之后，提出了一种成熟度模型，用来评估一个web service接近REST的程度。</p>\n<h3>Richardson成熟度模型</h3>\n<p><img src=\"http://forgus.vicp.io/resources/images/maturity_model.png\" alt=\"img\"></p>\n<p>如图所示，该成熟度模型用4个层级来评估一个web service满足REST约束的程度，分别是：</p>\n<ul>\n<li>第0级：基于HTTP协议</li>\n<li>第1级：抽象资源</li>\n<li>第2级：利用HTTP动词</li>\n<li>第3级：超媒体控制</li>\n</ul>\n<h4>第0级：基于HTTP协议</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_zero.png\" alt=\"level_zero\"></p>\n<p>这一级的web service仅仅将HTTP当做一种传输协议来使用，通常只有一个URI，只使用POST或GET方法，</p>\n<p>使用方式上更像远程过程调用。</p>\n<h4>第1级：有清晰的资源抽象</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_one.png\" alt=\"img\"></p>\n<p>这一级的web service不再使用单一URI，而是使用很多不一样的URI来映射不同的接口，初步具有了资源的概念，但一个URI通常依旧只使用GET或POST其中一种方法。</p>\n<h4>第2级：合理使用HTTP动词</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_two.png\" alt=\"img\"></p>\n<p>这一级的web service除了严格按照ROA（Resource-Oriented Architecture，面向资源架构）来设计URI，更加充分地利用了HTTP动词的语义，每一个URI可支持多个不同的HTTP方法，用来映射对资源的不同操作。</p>\n<h4>第3级：能够完美支持HATEOAS</h4>\n<p><img src=\"http://forgus.vicp.io/resources/images/level_three.png\" alt=\"img\"></p>\n<p>这一级的web service在第2级的基础上应用了超媒体类型，在资源表述中加入了自描述的消息和超媒体控件，实现了超文本驱动，即HATEOAS（超媒体作为应用状态的引擎）。</p>\n<h2>结束语</h2>\n<p>正是因为设计出完全满足REST约束的API很难，目前大部分的Web API还停留在第1级或第2级的阶段，但是REST是值得我们追求的，因为它是构建可不断演进的API的解决方案。<br>\n目前来说，只要我们大体上能朝着第3级成熟度去努力，先部分拥抱REST的一些约束，使我们的API能够达到第2级，快速解决手头的一些问题，就可以认为这是一个RESTful API了。</p>\n"},{"；……………………………………………………title":"各类软件镜像源配置","catalog":true,"date":"2018-11-01T16:00:00.000Z","_content":"## Homebrew 镜像源进行加速\n\n### 替换 / 还原 brew.git 仓库地址\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址: \ncd \"$(brew --repo)\" \ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git** \n# 还原为官方提供的 brew.git 仓库地址 :\ncd \"$(brew --repo)\" \ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n### 替换 / 还原 homebrew-core.git 仓库地址\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址: \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" \ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git \n# 还原为官方提供的 homebrew-core.git 仓库地址 \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" \ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n### 替换 / 还原 homebrew-bottles 访问地址\n```shell\n# ZSH 替换 homebrew-bottles 访问地址: \necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc \nsource ~/.zshrc \n# 还原为官方提供的 homebrew-bottles 访问地址:\nvim ~/.zshrc \n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 \nsource ~/.bash_profile\n```\n\n## Gradle镜像源\n打开全局配置文件\n```shell\nnvim ~/.gradle/init.gradle\n```\n写入如下配置：\n```\nallprojects{\n    repositories {\n        def ALIYUN_REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public'\n        def ALIYUN_JCENTER_URL = 'http://maven.aliyun.com/nexus/content/repositories/jcenter'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL.\"\n                    remove repo\n                }\n                if (url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url ALIYUN_REPOSITORY_URL\n            url ALIYUN_JCENTER_URL\n        }\n    }\n}\n```\n\n\n## NodeJS 修改镜像源\n\n```shell\n# 设置 淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org\n# 查看 使用的 镜像源\nnpm config get registry\n```","source":"_posts/flee_GFW.md","raw":"---\n；……………………………………………………title: 各类软件镜像源配置\ncatalog: true\ndate: 2018-11-02\ntags:\n- mirrors\n- Linux\n---\n## Homebrew 镜像源进行加速\n\n### 替换 / 还原 brew.git 仓库地址\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址: \ncd \"$(brew --repo)\" \ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git** \n# 还原为官方提供的 brew.git 仓库地址 :\ncd \"$(brew --repo)\" \ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n### 替换 / 还原 homebrew-core.git 仓库地址\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址: \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" \ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git \n# 还原为官方提供的 homebrew-core.git 仓库地址 \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" \ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n### 替换 / 还原 homebrew-bottles 访问地址\n```shell\n# ZSH 替换 homebrew-bottles 访问地址: \necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc \nsource ~/.zshrc \n# 还原为官方提供的 homebrew-bottles 访问地址:\nvim ~/.zshrc \n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 \nsource ~/.bash_profile\n```\n\n## Gradle镜像源\n打开全局配置文件\n```shell\nnvim ~/.gradle/init.gradle\n```\n写入如下配置：\n```\nallprojects{\n    repositories {\n        def ALIYUN_REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public'\n        def ALIYUN_JCENTER_URL = 'http://maven.aliyun.com/nexus/content/repositories/jcenter'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL.\"\n                    remove repo\n                }\n                if (url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url ALIYUN_REPOSITORY_URL\n            url ALIYUN_JCENTER_URL\n        }\n    }\n}\n```\n\n\n## NodeJS 修改镜像源\n\n```shell\n# 设置 淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org\n# 查看 使用的 镜像源\nnpm config get registry\n```","slug":"flee_GFW","published":1,"updated":"2020-12-23T15:02:16.668Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rb001bs2b9lg2z792e","content":"<h2 id=\"homebrew-镜像源进行加速\">Homebrew 镜像源进行加速</h2>\n<h3 id=\"替换-还原-brewgit-仓库地址\">替换 / 还原 brew.git 仓库地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换成阿里巴巴的 brew.git 仓库地址: </span></span><br><span class=\"line\">cd \"$(brew --repo)\" </span><br><span class=\"line\">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git** </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 brew.git 仓库地址 :</span></span><br><span class=\"line\">cd \"$(brew --repo)\" </span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换-还原-homebrew-coregit-仓库地址\">替换 / 还原 homebrew-core.git 仓库地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换成阿里巴巴的 homebrew-core.git 仓库地址: </span></span><br><span class=\"line\">cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" </span><br><span class=\"line\">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 homebrew-core.git 仓库地址 </span></span><br><span class=\"line\">cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" </span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换-还原-homebrew-bottles-访问地址\">替换 / 还原 homebrew-bottles 访问地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ZSH 替换 homebrew-bottles 访问地址: </span></span><br><span class=\"line\">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc </span><br><span class=\"line\">source ~/.zshrc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 homebrew-bottles 访问地址:</span></span><br><span class=\"line\">vim ~/.zshrc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 </span></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h2 id=\"gradle镜像源\">Gradle镜像源</h2>\n<p>打开全局配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.gradle/init.gradle</span><br></pre></td></tr></table></figure>\n<p>写入如下配置：</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">    <span class=\"attribute\">repositories &#123;</span></span><br><span class=\"line\"><span class=\"attribute\">        def ALIYUN_REPOSITORY_URL = 'http</span>://maven<span class=\"variable\">.aliyun</span><span class=\"variable\">.com</span>/nexus/content/groups/public'</span><br><span class=\"line\">        def ALIYUN_JCENTER_URL = 'http://maven<span class=\"variable\">.aliyun</span><span class=\"variable\">.com</span>/nexus/content/repositories/jcenter'</span><br><span class=\"line\">        all &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">                def url = repo<span class=\"variable\">.url</span><span class=\"variable\">.toString</span>()</span><br><span class=\"line\">                if (url<span class=\"variable\">.startsWith</span>('https://repo1<span class=\"variable\">.maven</span><span class=\"variable\">.org</span>/maven2')) &#123;</span><br><span class=\"line\">                    project<span class=\"variable\">.logger</span><span class=\"variable\">.lifecycle</span> \"Repository $&#123;repo<span class=\"variable\">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.\"</span><br><span class=\"line\">                    remove repo</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (url<span class=\"variable\">.startsWith</span>('https://jcenter<span class=\"variable\">.bintray</span><span class=\"variable\">.com</span>/')) &#123;</span><br><span class=\"line\">                    project<span class=\"variable\">.logger</span><span class=\"variable\">.lifecycle</span> \"Repository $&#123;repo<span class=\"variable\">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.\"</span><br><span class=\"line\">                    remove repo</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url ALIYUN_REPOSITORY_URL</span><br><span class=\"line\">            url ALIYUN_JCENTER_URL</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"nodejs-修改镜像源\">NodeJS 修改镜像源</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置 淘宝镜像源</span></span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 使用的 镜像源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>Homebrew 镜像源进行加速</h2>\n<h3>替换 / 还原 brew.git 仓库地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换成阿里巴巴的 brew.git 仓库地址: </span></span><br><span class=\"line\">cd \"$(brew --repo)\" </span><br><span class=\"line\">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git** </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 brew.git 仓库地址 :</span></span><br><span class=\"line\">cd \"$(brew --repo)\" </span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>\n<h3>替换 / 还原 homebrew-core.git 仓库地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换成阿里巴巴的 homebrew-core.git 仓库地址: </span></span><br><span class=\"line\">cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" </span><br><span class=\"line\">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 homebrew-core.git 仓库地址 </span></span><br><span class=\"line\">cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" </span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n<h3>替换 / 还原 homebrew-bottles 访问地址</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ZSH 替换 homebrew-bottles 访问地址: </span></span><br><span class=\"line\">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc </span><br><span class=\"line\">source ~/.zshrc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 还原为官方提供的 homebrew-bottles 访问地址:</span></span><br><span class=\"line\">vim ~/.zshrc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 </span></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h2>Gradle镜像源</h2>\n<p>打开全局配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim ~/.gradle/init.gradle</span><br></pre></td></tr></table></figure>\n<p>写入如下配置：</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects&#123;</span><br><span class=\"line\">    <span class=\"attribute\">repositories &#123;</span></span><br><span class=\"line\"><span class=\"attribute\">        def ALIYUN_REPOSITORY_URL = 'http</span>://maven<span class=\"variable\">.aliyun</span><span class=\"variable\">.com</span>/nexus/content/groups/public'</span><br><span class=\"line\">        def ALIYUN_JCENTER_URL = 'http://maven<span class=\"variable\">.aliyun</span><span class=\"variable\">.com</span>/nexus/content/repositories/jcenter'</span><br><span class=\"line\">        all &#123; ArtifactRepository repo -&gt;</span><br><span class=\"line\">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class=\"line\">                def url = repo<span class=\"variable\">.url</span><span class=\"variable\">.toString</span>()</span><br><span class=\"line\">                if (url<span class=\"variable\">.startsWith</span>('https://repo1<span class=\"variable\">.maven</span><span class=\"variable\">.org</span>/maven2')) &#123;</span><br><span class=\"line\">                    project<span class=\"variable\">.logger</span><span class=\"variable\">.lifecycle</span> \"Repository $&#123;repo<span class=\"variable\">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.\"</span><br><span class=\"line\">                    remove repo</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (url<span class=\"variable\">.startsWith</span>('https://jcenter<span class=\"variable\">.bintray</span><span class=\"variable\">.com</span>/')) &#123;</span><br><span class=\"line\">                    project<span class=\"variable\">.logger</span><span class=\"variable\">.lifecycle</span> \"Repository $&#123;repo<span class=\"variable\">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.\"</span><br><span class=\"line\">                    remove repo</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url ALIYUN_REPOSITORY_URL</span><br><span class=\"line\">            url ALIYUN_JCENTER_URL</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>NodeJS 修改镜像源</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置 淘宝镜像源</span></span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 使用的 镜像源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>"},{"title":"配置Manjaro","date":"2020-05-30T16:00:00.000Z","catalog":true,"_content":"\n## 切换源\n\n打开配置文件：\n\n```shell\nsudo nano /etc/pacman.conf\n```\n\n添加如下配置：\n\n```\n[archlinuxcn]\nSigLevel = Never\n# 浙大源\nServer = https://mirrors.zju.edu.cn/archlinuxcn/$arch\n# 清华源\n# Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n更新源：\n\n```shell\nsudo pacman-mirrors -c China\nsudo pacman -Syu -y # 耗时操作\nsudo pacman -S archlinuxcn-keyring -y\n# 设置dpi\nvim ~/.Xresources\nXft.dpi:166\n# 重启\nreboot\n```\n\n## 软件安装\n\n\n### fish\n\n#### 安装\n\n```shell\n# 安装fish\nsudo pacman -S fish\n# 安装oh-my-fish\ngit clone https://github.com/oh-my-fish/oh-my-fish\ncd oh-my-fish\nbin/install --offline\n# 设置fish为默认shell\nwhich fish\nchsh -s /usr/bin/fish\n# 天气插件\nomf install wttr\n```\n#### 配置\n\n```shell\n# 配置主题\nfish_config\n```\n\n#### 使用\n\n```shell\n# 设置快捷键\nalias c clear\nfuncsave c\nalias s screenfetch\nfuncsave s\n```\n\n### 美化\n\n```shell\n# 窗口渲染器\nsudo pacman -S compton\ncompton\n# ui美化\nsudo pacman -S lxappearance\nlxappearance\n# 动态壁纸\nsudo pacman -S feh\nsudo pacman -S variety\nvariety\n```\n### neovim\n\n#### 安装\n\n```shell\nsudo pacman -S neovim\n```\n\n\n### i3\n\n#### 安装\n\n```shell\nsudo pacman -S i3\nreboot\n```\n\n#### 配置\n\n```shell\nvim ~/.config/i3/config\nbindsym $mod+Return exec alacritty\nbindsym $mod+c exec firefox\nexec_always variety\nexec_always compton\nexec_always sleep 1; xmodmap ~/.xmodmap\nexec_always kill screenkey\ngaps inner 15\n#去边框\nnew_window 1pixel\n#刷新配置\nSuper+Shift+r\n```\n\n#### 使用\n\n```shell\n# 分屏\nSuper+return\n# 水平分屏模式\nSuper+v\n# 垂直分屏模式\nSuper+h\n#全屏\nSuper+f\n#窗口切换\nSuper+jkl;\n#调整窗口大小\nSuper+r\n```\n\n### alacritty\n\n#### 安装\n\n```shell\n# alacritty\nsudo pacman -S alacritty\n```\n\n#### 配置\n\n```shell\n# 设置终端透明度\nvim ~/.config/alacritty/alacritty.yml\nbackground_opacity: 0.6\n```\n### ranger\n\n#### 安装\n\n```shell\nsudo pacman -S ranger\n```\n\n\n### 其他\n\n```shell\n#pacman 高亮\nsudo -E vim /etc/pacman.conf\nColor\n# dmenu\nsudo pacman -S dmenu\nSuper+d\n# 改建\nsudo pacman -S xorg\nxmodmap -pke > ~/.xmodmap\nvim ~/.xmodmap\nxev\nxmodmap ~/.xmodmap\n# 中文输入法\nsudo pacman -S fcitx fcitx-im fcitx-configtool\nsudo pacman -S fcitx-googlepinyin\nvim ~/.xprofile\nexport GTK_TM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\nreboot\nfcitx-configtool\n# 谷歌浏览器\nsudo pacman -S chromium\n# office\nsudo pacman -S libreoffice\n# 视频播放软件\nsudo pacman -S vlc \n# 状态栏\nsudo pacman -S polybar\n# i3-gap3\nsudo pacman -S i3-gaps\n```\n\n\n","source":"_posts/config_manjaro.md","raw":"---\ntitle: 配置Manjaro\ndate: 2020-05-31\ncatalog: true\ntags:\n- Linux\n- Manjaro\n---\n\n## 切换源\n\n打开配置文件：\n\n```shell\nsudo nano /etc/pacman.conf\n```\n\n添加如下配置：\n\n```\n[archlinuxcn]\nSigLevel = Never\n# 浙大源\nServer = https://mirrors.zju.edu.cn/archlinuxcn/$arch\n# 清华源\n# Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n更新源：\n\n```shell\nsudo pacman-mirrors -c China\nsudo pacman -Syu -y # 耗时操作\nsudo pacman -S archlinuxcn-keyring -y\n# 设置dpi\nvim ~/.Xresources\nXft.dpi:166\n# 重启\nreboot\n```\n\n## 软件安装\n\n\n### fish\n\n#### 安装\n\n```shell\n# 安装fish\nsudo pacman -S fish\n# 安装oh-my-fish\ngit clone https://github.com/oh-my-fish/oh-my-fish\ncd oh-my-fish\nbin/install --offline\n# 设置fish为默认shell\nwhich fish\nchsh -s /usr/bin/fish\n# 天气插件\nomf install wttr\n```\n#### 配置\n\n```shell\n# 配置主题\nfish_config\n```\n\n#### 使用\n\n```shell\n# 设置快捷键\nalias c clear\nfuncsave c\nalias s screenfetch\nfuncsave s\n```\n\n### 美化\n\n```shell\n# 窗口渲染器\nsudo pacman -S compton\ncompton\n# ui美化\nsudo pacman -S lxappearance\nlxappearance\n# 动态壁纸\nsudo pacman -S feh\nsudo pacman -S variety\nvariety\n```\n### neovim\n\n#### 安装\n\n```shell\nsudo pacman -S neovim\n```\n\n\n### i3\n\n#### 安装\n\n```shell\nsudo pacman -S i3\nreboot\n```\n\n#### 配置\n\n```shell\nvim ~/.config/i3/config\nbindsym $mod+Return exec alacritty\nbindsym $mod+c exec firefox\nexec_always variety\nexec_always compton\nexec_always sleep 1; xmodmap ~/.xmodmap\nexec_always kill screenkey\ngaps inner 15\n#去边框\nnew_window 1pixel\n#刷新配置\nSuper+Shift+r\n```\n\n#### 使用\n\n```shell\n# 分屏\nSuper+return\n# 水平分屏模式\nSuper+v\n# 垂直分屏模式\nSuper+h\n#全屏\nSuper+f\n#窗口切换\nSuper+jkl;\n#调整窗口大小\nSuper+r\n```\n\n### alacritty\n\n#### 安装\n\n```shell\n# alacritty\nsudo pacman -S alacritty\n```\n\n#### 配置\n\n```shell\n# 设置终端透明度\nvim ~/.config/alacritty/alacritty.yml\nbackground_opacity: 0.6\n```\n### ranger\n\n#### 安装\n\n```shell\nsudo pacman -S ranger\n```\n\n\n### 其他\n\n```shell\n#pacman 高亮\nsudo -E vim /etc/pacman.conf\nColor\n# dmenu\nsudo pacman -S dmenu\nSuper+d\n# 改建\nsudo pacman -S xorg\nxmodmap -pke > ~/.xmodmap\nvim ~/.xmodmap\nxev\nxmodmap ~/.xmodmap\n# 中文输入法\nsudo pacman -S fcitx fcitx-im fcitx-configtool\nsudo pacman -S fcitx-googlepinyin\nvim ~/.xprofile\nexport GTK_TM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\nreboot\nfcitx-configtool\n# 谷歌浏览器\nsudo pacman -S chromium\n# office\nsudo pacman -S libreoffice\n# 视频播放软件\nsudo pacman -S vlc \n# 状态栏\nsudo pacman -S polybar\n# i3-gap3\nsudo pacman -S i3-gaps\n```\n\n\n","slug":"config_manjaro","published":1,"updated":"2020-12-23T15:02:16.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rc001ds2b9iptmdrng","content":"<h2 id=\"切换源\">切换源</h2>\n<p>打开配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure>\n<p>添加如下配置：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[archlinuxcn]</span></span><br><span class=\"line\"><span class=\"attr\">SigLevel</span> = Never</span><br><span class=\"line\"><span class=\"comment\"># 浙大源</span></span><br><span class=\"line\"><span class=\"attr\">Server</span> = https://mirrors.zju.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br><span class=\"line\"><span class=\"comment\"># 清华源</span></span><br><span class=\"line\"><span class=\"comment\"># Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span></span><br></pre></td></tr></table></figure>\n<p>更新源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China</span><br><span class=\"line\">sudo pacman -Syu -y # 耗时操作</span><br><span class=\"line\">sudo pacman -S archlinuxcn-keyring -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置dpi</span></span><br><span class=\"line\">vim ~/.Xresources</span><br><span class=\"line\">Xft.dpi:166</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<h2 id=\"软件安装\">软件安装</h2>\n<h3 id=\"fish\">fish</h3>\n<h4 id=\"安装\">安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装fish</span></span><br><span class=\"line\">sudo pacman -S fish</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装oh-my-fish</span></span><br><span class=\"line\">git clone https://github.com/oh-my-fish/oh-my-fish</span><br><span class=\"line\">cd oh-my-fish</span><br><span class=\"line\">bin/install --offline</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置fish为默认shell</span></span><br><span class=\"line\">which fish</span><br><span class=\"line\">chsh -s /usr/bin/fish</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 天气插件</span></span><br><span class=\"line\">omf install wttr</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置主题</span></span><br><span class=\"line\">fish_config</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\">使用</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置快捷键</span></span><br><span class=\"line\">alias c clear</span><br><span class=\"line\">funcsave c</span><br><span class=\"line\">alias s screenfetch</span><br><span class=\"line\">funcsave s</span><br></pre></td></tr></table></figure>\n<h3 id=\"美化\">美化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 窗口渲染器</span></span><br><span class=\"line\">sudo pacman -S compton</span><br><span class=\"line\">compton</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ui美化</span></span><br><span class=\"line\">sudo pacman -S lxappearance</span><br><span class=\"line\">lxappearance</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 动态壁纸</span></span><br><span class=\"line\">sudo pacman -S feh</span><br><span class=\"line\">sudo pacman -S variety</span><br><span class=\"line\">variety</span><br></pre></td></tr></table></figure>\n<h3 id=\"neovim\">neovim</h3>\n<h4 id=\"安装\">安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S neovim</span><br></pre></td></tr></table></figure>\n<h3 id=\"i3\">i3</h3>\n<h4 id=\"安装\">安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S i3</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.config/i3/config</span><br><span class=\"line\">bindsym $mod+Return exec alacritty</span><br><span class=\"line\">bindsym $mod+c exec firefox</span><br><span class=\"line\">exec_always variety</span><br><span class=\"line\">exec_always compton</span><br><span class=\"line\">exec_always sleep 1; xmodmap ~/.xmodmap</span><br><span class=\"line\">exec_always kill screenkey</span><br><span class=\"line\">gaps inner 15</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">去边框</span></span><br><span class=\"line\">new_window 1pixel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">刷新配置</span></span><br><span class=\"line\">Super+Shift+r</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\">使用</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分屏</span></span><br><span class=\"line\">Super+return</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 水平分屏模式</span></span><br><span class=\"line\">Super+v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 垂直分屏模式</span></span><br><span class=\"line\">Super+h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">全屏</span></span><br><span class=\"line\">Super+f</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">窗口切换</span></span><br><span class=\"line\">Super+jkl;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">调整窗口大小</span></span><br><span class=\"line\">Super+r</span><br></pre></td></tr></table></figure>\n<h3 id=\"alacritty\">alacritty</h3>\n<h4 id=\"安装\">安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> alacritty</span></span><br><span class=\"line\">sudo pacman -S alacritty</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置终端透明度</span></span><br><span class=\"line\">vim ~/.config/alacritty/alacritty.yml</span><br><span class=\"line\">background_opacity: 0.6</span><br></pre></td></tr></table></figure>\n<h3 id=\"ranger\">ranger</h3>\n<h4 id=\"安装\">安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S ranger</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\">其他</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pacman 高亮</span></span><br><span class=\"line\">sudo -E vim /etc/pacman.conf</span><br><span class=\"line\">Color</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> dmenu</span></span><br><span class=\"line\">sudo pacman -S dmenu</span><br><span class=\"line\">Super+d</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 改建</span></span><br><span class=\"line\">sudo pacman -S xorg</span><br><span class=\"line\">xmodmap -pke &gt; ~/.xmodmap</span><br><span class=\"line\">vim ~/.xmodmap</span><br><span class=\"line\">xev</span><br><span class=\"line\">xmodmap ~/.xmodmap</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 中文输入法</span></span><br><span class=\"line\">sudo pacman -S fcitx fcitx-im fcitx-configtool</span><br><span class=\"line\">sudo pacman -S fcitx-googlepinyin</span><br><span class=\"line\">vim ~/.xprofile</span><br><span class=\"line\">export GTK_TM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=\"@im=fcitx\"</span><br><span class=\"line\">reboot</span><br><span class=\"line\">fcitx-configtool</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 谷歌浏览器</span></span><br><span class=\"line\">sudo pacman -S chromium</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> office</span></span><br><span class=\"line\">sudo pacman -S libreoffice</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 视频播放软件</span></span><br><span class=\"line\">sudo pacman -S vlc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 状态栏</span></span><br><span class=\"line\">sudo pacman -S polybar</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> i3-gap3</span></span><br><span class=\"line\">sudo pacman -S i3-gaps</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>切换源</h2>\n<p>打开配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure>\n<p>添加如下配置：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[archlinuxcn]</span></span><br><span class=\"line\"><span class=\"attr\">SigLevel</span> = Never</span><br><span class=\"line\"><span class=\"comment\"># 浙大源</span></span><br><span class=\"line\"><span class=\"attr\">Server</span> = https://mirrors.zju.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br><span class=\"line\"><span class=\"comment\"># 清华源</span></span><br><span class=\"line\"><span class=\"comment\"># Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span></span><br></pre></td></tr></table></figure>\n<p>更新源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China</span><br><span class=\"line\">sudo pacman -Syu -y # 耗时操作</span><br><span class=\"line\">sudo pacman -S archlinuxcn-keyring -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置dpi</span></span><br><span class=\"line\">vim ~/.Xresources</span><br><span class=\"line\">Xft.dpi:166</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<h2>软件安装</h2>\n<h3>fish</h3>\n<h4>安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装fish</span></span><br><span class=\"line\">sudo pacman -S fish</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装oh-my-fish</span></span><br><span class=\"line\">git clone https://github.com/oh-my-fish/oh-my-fish</span><br><span class=\"line\">cd oh-my-fish</span><br><span class=\"line\">bin/install --offline</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置fish为默认shell</span></span><br><span class=\"line\">which fish</span><br><span class=\"line\">chsh -s /usr/bin/fish</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 天气插件</span></span><br><span class=\"line\">omf install wttr</span><br></pre></td></tr></table></figure>\n<h4>配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置主题</span></span><br><span class=\"line\">fish_config</span><br></pre></td></tr></table></figure>\n<h4>使用</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置快捷键</span></span><br><span class=\"line\">alias c clear</span><br><span class=\"line\">funcsave c</span><br><span class=\"line\">alias s screenfetch</span><br><span class=\"line\">funcsave s</span><br></pre></td></tr></table></figure>\n<h3>美化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 窗口渲染器</span></span><br><span class=\"line\">sudo pacman -S compton</span><br><span class=\"line\">compton</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ui美化</span></span><br><span class=\"line\">sudo pacman -S lxappearance</span><br><span class=\"line\">lxappearance</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 动态壁纸</span></span><br><span class=\"line\">sudo pacman -S feh</span><br><span class=\"line\">sudo pacman -S variety</span><br><span class=\"line\">variety</span><br></pre></td></tr></table></figure>\n<h3>neovim</h3>\n<h4>安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S neovim</span><br></pre></td></tr></table></figure>\n<h3>i3</h3>\n<h4>安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S i3</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<h4>配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.config/i3/config</span><br><span class=\"line\">bindsym $mod+Return exec alacritty</span><br><span class=\"line\">bindsym $mod+c exec firefox</span><br><span class=\"line\">exec_always variety</span><br><span class=\"line\">exec_always compton</span><br><span class=\"line\">exec_always sleep 1; xmodmap ~/.xmodmap</span><br><span class=\"line\">exec_always kill screenkey</span><br><span class=\"line\">gaps inner 15</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">去边框</span></span><br><span class=\"line\">new_window 1pixel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">刷新配置</span></span><br><span class=\"line\">Super+Shift+r</span><br></pre></td></tr></table></figure>\n<h4>使用</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分屏</span></span><br><span class=\"line\">Super+return</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 水平分屏模式</span></span><br><span class=\"line\">Super+v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 垂直分屏模式</span></span><br><span class=\"line\">Super+h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">全屏</span></span><br><span class=\"line\">Super+f</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">窗口切换</span></span><br><span class=\"line\">Super+jkl;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">调整窗口大小</span></span><br><span class=\"line\">Super+r</span><br></pre></td></tr></table></figure>\n<h3>alacritty</h3>\n<h4>安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> alacritty</span></span><br><span class=\"line\">sudo pacman -S alacritty</span><br></pre></td></tr></table></figure>\n<h4>配置</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置终端透明度</span></span><br><span class=\"line\">vim ~/.config/alacritty/alacritty.yml</span><br><span class=\"line\">background_opacity: 0.6</span><br></pre></td></tr></table></figure>\n<h3>ranger</h3>\n<h4>安装</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S ranger</span><br></pre></td></tr></table></figure>\n<h3>其他</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pacman 高亮</span></span><br><span class=\"line\">sudo -E vim /etc/pacman.conf</span><br><span class=\"line\">Color</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> dmenu</span></span><br><span class=\"line\">sudo pacman -S dmenu</span><br><span class=\"line\">Super+d</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 改建</span></span><br><span class=\"line\">sudo pacman -S xorg</span><br><span class=\"line\">xmodmap -pke &gt; ~/.xmodmap</span><br><span class=\"line\">vim ~/.xmodmap</span><br><span class=\"line\">xev</span><br><span class=\"line\">xmodmap ~/.xmodmap</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 中文输入法</span></span><br><span class=\"line\">sudo pacman -S fcitx fcitx-im fcitx-configtool</span><br><span class=\"line\">sudo pacman -S fcitx-googlepinyin</span><br><span class=\"line\">vim ~/.xprofile</span><br><span class=\"line\">export GTK_TM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=\"@im=fcitx\"</span><br><span class=\"line\">reboot</span><br><span class=\"line\">fcitx-configtool</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 谷歌浏览器</span></span><br><span class=\"line\">sudo pacman -S chromium</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> office</span></span><br><span class=\"line\">sudo pacman -S libreoffice</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 视频播放软件</span></span><br><span class=\"line\">sudo pacman -S vlc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 状态栏</span></span><br><span class=\"line\">sudo pacman -S polybar</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> i3-gap3</span></span><br><span class=\"line\">sudo pacman -S i3-gaps</span><br></pre></td></tr></table></figure>\n"},{"title":"YApi简介","date":"2019-09-27T16:00:00.000Z","catalog":true,"_content":"## YApi是什么？\n\n​\t\tYApi是去哪儿网大前端团队开发的一个接口管理平台，汲取了Rap、Nei、Easy-Mock等产品的设计灵感，同时提供了类postman、restlet等工具的调试能力，打通了前后端分离开发模式下的接口开发流程，解决了协作上的痛点，免费、开源，支持内网部署。\n\n​\t\t简而言之，YApi = 接口文档 + 接口调试 + mockserver + 自动化测试。\n\n## 为什么用YApi？\n\n​\t\t相比较Rap，YApi对HTTP的支持更加全面，并且在提供文档托管能力的基础上，提供了接口调试的功能。\n\n​\t\t同时，利用单一数据源的机制，在调试接口的过程中，如果想修改接口定义，必须先修改接口文档，这一机制又保证了文档的时效性，能够防止出现后端自测完接口，文档忘记更新，导致前端白忙活的情况。\n\n​\t\t除此之外，YApi提供了极简的可视化操作界面，简单易用，功能强大，另外，基于插件机制和开放api，使得它的可扩展性非常高，可以满足各种定制化需求。\n\n### 后端提效\n\n​\t\tYApi支持基于json5格式的请求体和响应体数据结构定义，相比较Rap的基于json-schema的方式，接口录入效率更高，json5格式也更加便于测试人员copy数据结构跑自己的测试用例，推荐使用。开启方法：选择项目-> 设置 -> 开启json5。\n\n​\t\tYApi内嵌了Chrome，可以直接基于文档发起http请求，并且能够根据接口定义预先设置好请求体数据，比单独利用postman等工具进行调试要更加高效。\n\n### 前端提效\n\n​\t\tYApi提供了强大的Mock能力，在提供基本Mock能力的同时，还支持Mock期望的编写。\n\n​\t\tMock期望是什么？Mock期望可以通过设置，根据不同请求参数返回不同的响应数据，也就是提供了可编程的动态Mock的能力，模拟真实响应再也不是难题。有了Mock期望功能，前端同学可以这么说：给我一份准确的接口文档，我能保证接口响应处理没有bug，联调？不存在的。\n\n详见[Mock期望官方文档](https://hellosean1025.github.io/yapi/documents/adv_mock.html#mock-%E6%9C%9F%E6%9C%9B)\n\n### 测试提效\n\n​\t\t据我所了解到的，目前测试人员一般是通过JMeter跑自动化测试用例，一般需要从外部粘贴预先写好的请求体进行用例编写，效率较低。\n\n​\t\tYApi提供了可视化的测试用例编写界面，不懂开发也能写用例，并且预设请求数据，无需重复录入，只需修改必要的数据即可。同时，YApi支持编写具有前后参数依赖的接口的测试用例，因此，用例也具备了可编程的动态测试能力，一个用例覆盖所有场景，再也不需要维护一大堆相似用例了。\n\n详见[自动化测试官方文档](https://hellosean1025.github.io/yapi/documents/case.html)\n\n### 关于联调\n\n如果后端同学利用好YApi，开发完都自测确保定义的接口符合预期，前端利用好mock期望，我相信前端同学的工作将更加高效，Bug率也将更低，同时联调将会是非常薄的一层，如果配合好了说不定还能玩下持续集成（按接口维度集成，而不是版本）。\n\n","source":"_posts/YApi_Introduction.md","raw":"---\ntitle: YApi简介\ndate: 2019-09-28\ncatalog: true\ntags:\n- YApi\n- 开发工具\n---\n## YApi是什么？\n\n​\t\tYApi是去哪儿网大前端团队开发的一个接口管理平台，汲取了Rap、Nei、Easy-Mock等产品的设计灵感，同时提供了类postman、restlet等工具的调试能力，打通了前后端分离开发模式下的接口开发流程，解决了协作上的痛点，免费、开源，支持内网部署。\n\n​\t\t简而言之，YApi = 接口文档 + 接口调试 + mockserver + 自动化测试。\n\n## 为什么用YApi？\n\n​\t\t相比较Rap，YApi对HTTP的支持更加全面，并且在提供文档托管能力的基础上，提供了接口调试的功能。\n\n​\t\t同时，利用单一数据源的机制，在调试接口的过程中，如果想修改接口定义，必须先修改接口文档，这一机制又保证了文档的时效性，能够防止出现后端自测完接口，文档忘记更新，导致前端白忙活的情况。\n\n​\t\t除此之外，YApi提供了极简的可视化操作界面，简单易用，功能强大，另外，基于插件机制和开放api，使得它的可扩展性非常高，可以满足各种定制化需求。\n\n### 后端提效\n\n​\t\tYApi支持基于json5格式的请求体和响应体数据结构定义，相比较Rap的基于json-schema的方式，接口录入效率更高，json5格式也更加便于测试人员copy数据结构跑自己的测试用例，推荐使用。开启方法：选择项目-> 设置 -> 开启json5。\n\n​\t\tYApi内嵌了Chrome，可以直接基于文档发起http请求，并且能够根据接口定义预先设置好请求体数据，比单独利用postman等工具进行调试要更加高效。\n\n### 前端提效\n\n​\t\tYApi提供了强大的Mock能力，在提供基本Mock能力的同时，还支持Mock期望的编写。\n\n​\t\tMock期望是什么？Mock期望可以通过设置，根据不同请求参数返回不同的响应数据，也就是提供了可编程的动态Mock的能力，模拟真实响应再也不是难题。有了Mock期望功能，前端同学可以这么说：给我一份准确的接口文档，我能保证接口响应处理没有bug，联调？不存在的。\n\n详见[Mock期望官方文档](https://hellosean1025.github.io/yapi/documents/adv_mock.html#mock-%E6%9C%9F%E6%9C%9B)\n\n### 测试提效\n\n​\t\t据我所了解到的，目前测试人员一般是通过JMeter跑自动化测试用例，一般需要从外部粘贴预先写好的请求体进行用例编写，效率较低。\n\n​\t\tYApi提供了可视化的测试用例编写界面，不懂开发也能写用例，并且预设请求数据，无需重复录入，只需修改必要的数据即可。同时，YApi支持编写具有前后参数依赖的接口的测试用例，因此，用例也具备了可编程的动态测试能力，一个用例覆盖所有场景，再也不需要维护一大堆相似用例了。\n\n详见[自动化测试官方文档](https://hellosean1025.github.io/yapi/documents/case.html)\n\n### 关于联调\n\n如果后端同学利用好YApi，开发完都自测确保定义的接口符合预期，前端利用好mock期望，我相信前端同学的工作将更加高效，Bug率也将更低，同时联调将会是非常薄的一层，如果配合好了说不定还能玩下持续集成（按接口维度集成，而不是版本）。\n\n","slug":"YApi_Introduction","published":1,"updated":"2020-12-23T15:02:16.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rd001es2b9q1bf3fek","content":"<h2 id=\"yapi是什么\">YApi是什么？</h2>\n<p>​\t\tYApi是去哪儿网大前端团队开发的一个接口管理平台，汲取了Rap、Nei、Easy-Mock等产品的设计灵感，同时提供了类postman、restlet等工具的调试能力，打通了前后端分离开发模式下的接口开发流程，解决了协作上的痛点，免费、开源，支持内网部署。</p>\n<p>​\t\t简而言之，YApi = 接口文档 + 接口调试 + mockserver + 自动化测试。</p>\n<h2 id=\"为什么用yapi\">为什么用YApi？</h2>\n<p>​\t\t相比较Rap，YApi对HTTP的支持更加全面，并且在提供文档托管能力的基础上，提供了接口调试的功能。</p>\n<p>​\t\t同时，利用单一数据源的机制，在调试接口的过程中，如果想修改接口定义，必须先修改接口文档，这一机制又保证了文档的时效性，能够防止出现后端自测完接口，文档忘记更新，导致前端白忙活的情况。</p>\n<p>​\t\t除此之外，YApi提供了极简的可视化操作界面，简单易用，功能强大，另外，基于插件机制和开放api，使得它的可扩展性非常高，可以满足各种定制化需求。</p>\n<h3 id=\"后端提效\">后端提效</h3>\n<p>​\t\tYApi支持基于json5格式的请求体和响应体数据结构定义，相比较Rap的基于json-schema的方式，接口录入效率更高，json5格式也更加便于测试人员copy数据结构跑自己的测试用例，推荐使用。开启方法：选择项目-&gt; 设置 -&gt; 开启json5。</p>\n<p>​\t\tYApi内嵌了Chrome，可以直接基于文档发起http请求，并且能够根据接口定义预先设置好请求体数据，比单独利用postman等工具进行调试要更加高效。</p>\n<h3 id=\"前端提效\">前端提效</h3>\n<p>​\t\tYApi提供了强大的Mock能力，在提供基本Mock能力的同时，还支持Mock期望的编写。</p>\n<p>​\t\tMock期望是什么？Mock期望可以通过设置，根据不同请求参数返回不同的响应数据，也就是提供了可编程的动态Mock的能力，模拟真实响应再也不是难题。有了Mock期望功能，前端同学可以这么说：给我一份准确的接口文档，我能保证接口响应处理没有bug，联调？不存在的。</p>\n<p>详见<a href=\"https://hellosean1025.github.io/yapi/documents/adv_mock.html#mock-%E6%9C%9F%E6%9C%9B\" target=\"_blank\" rel=\"noopener\">Mock期望官方文档</a></p>\n<h3 id=\"测试提效\">测试提效</h3>\n<p>​\t\t据我所了解到的，目前测试人员一般是通过JMeter跑自动化测试用例，一般需要从外部粘贴预先写好的请求体进行用例编写，效率较低。</p>\n<p>​\t\tYApi提供了可视化的测试用例编写界面，不懂开发也能写用例，并且预设请求数据，无需重复录入，只需修改必要的数据即可。同时，YApi支持编写具有前后参数依赖的接口的测试用例，因此，用例也具备了可编程的动态测试能力，一个用例覆盖所有场景，再也不需要维护一大堆相似用例了。</p>\n<p>详见<a href=\"https://hellosean1025.github.io/yapi/documents/case.html\" target=\"_blank\" rel=\"noopener\">自动化测试官方文档</a></p>\n<h3 id=\"关于联调\">关于联调</h3>\n<p>如果后端同学利用好YApi，开发完都自测确保定义的接口符合预期，前端利用好mock期望，我相信前端同学的工作将更加高效，Bug率也将更低，同时联调将会是非常薄的一层，如果配合好了说不定还能玩下持续集成（按接口维度集成，而不是版本）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>YApi是什么？</h2>\n<p>​\t\tYApi是去哪儿网大前端团队开发的一个接口管理平台，汲取了Rap、Nei、Easy-Mock等产品的设计灵感，同时提供了类postman、restlet等工具的调试能力，打通了前后端分离开发模式下的接口开发流程，解决了协作上的痛点，免费、开源，支持内网部署。</p>\n<p>​\t\t简而言之，YApi = 接口文档 + 接口调试 + mockserver + 自动化测试。</p>\n<h2>为什么用YApi？</h2>\n<p>​\t\t相比较Rap，YApi对HTTP的支持更加全面，并且在提供文档托管能力的基础上，提供了接口调试的功能。</p>\n<p>​\t\t同时，利用单一数据源的机制，在调试接口的过程中，如果想修改接口定义，必须先修改接口文档，这一机制又保证了文档的时效性，能够防止出现后端自测完接口，文档忘记更新，导致前端白忙活的情况。</p>\n<p>​\t\t除此之外，YApi提供了极简的可视化操作界面，简单易用，功能强大，另外，基于插件机制和开放api，使得它的可扩展性非常高，可以满足各种定制化需求。</p>\n<h3>后端提效</h3>\n<p>​\t\tYApi支持基于json5格式的请求体和响应体数据结构定义，相比较Rap的基于json-schema的方式，接口录入效率更高，json5格式也更加便于测试人员copy数据结构跑自己的测试用例，推荐使用。开启方法：选择项目-&gt; 设置 -&gt; 开启json5。</p>\n<p>​\t\tYApi内嵌了Chrome，可以直接基于文档发起http请求，并且能够根据接口定义预先设置好请求体数据，比单独利用postman等工具进行调试要更加高效。</p>\n<h3>前端提效</h3>\n<p>​\t\tYApi提供了强大的Mock能力，在提供基本Mock能力的同时，还支持Mock期望的编写。</p>\n<p>​\t\tMock期望是什么？Mock期望可以通过设置，根据不同请求参数返回不同的响应数据，也就是提供了可编程的动态Mock的能力，模拟真实响应再也不是难题。有了Mock期望功能，前端同学可以这么说：给我一份准确的接口文档，我能保证接口响应处理没有bug，联调？不存在的。</p>\n<p>详见<a href=\"https://hellosean1025.github.io/yapi/documents/adv_mock.html#mock-%E6%9C%9F%E6%9C%9B\" target=\"_blank\" rel=\"noopener\">Mock期望官方文档</a></p>\n<h3>测试提效</h3>\n<p>​\t\t据我所了解到的，目前测试人员一般是通过JMeter跑自动化测试用例，一般需要从外部粘贴预先写好的请求体进行用例编写，效率较低。</p>\n<p>​\t\tYApi提供了可视化的测试用例编写界面，不懂开发也能写用例，并且预设请求数据，无需重复录入，只需修改必要的数据即可。同时，YApi支持编写具有前后参数依赖的接口的测试用例，因此，用例也具备了可编程的动态测试能力，一个用例覆盖所有场景，再也不需要维护一大堆相似用例了。</p>\n<p>详见<a href=\"https://hellosean1025.github.io/yapi/documents/case.html\" target=\"_blank\" rel=\"noopener\">自动化测试官方文档</a></p>\n<h3>关于联调</h3>\n<p>如果后端同学利用好YApi，开发完都自测确保定义的接口符合预期，前端利用好mock期望，我相信前端同学的工作将更加高效，Bug率也将更低，同时联调将会是非常薄的一层，如果配合好了说不定还能玩下持续集成（按接口维度集成，而不是版本）。</p>\n"},{"title":"安装zsh","catalog":true,"date":"2018-02-05T16:00:00.000Z","_content":"查看当前系统可用的shell\n```\ncat /etc/shells\n```\n查看当前用户使用的shell\n```\necho $SHELL\n```\n切换当前用户使用的shell\n```\nchsh -s /bin/zsh\n```\n## 安装zsh\nRedhat Linux\n```\nsudo yum install zsh\n```\nUbuntu Linux\n```\nsudo apt-get install zsh\n```\n\n## 安装oh my zsh\n确保你已经安装了git。`sudo apt-get install git`\n\n然后执行以下命令即可进行自动安装:\n\n```\nwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n```\n## 配置\n```\nvim ~/.zshrc\n```\n部分配置如下\n```zsh\nalias cls='clear'\nalias ll='ls -l'\n# 推荐主题：michelebologna、fishy，更多主题可翻看https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n```\n## 插件\n\n### autojump\n下载autojump源码\n```\ngit clone git://github.com/joelthelion/autojump.git\n```\n安装\n```\ncd autojump\n./install.py\n```\n\n将以下代码加入.zshrc\n\n```\n[[ -s /home/pi/.autojump/etc/profile.d/autojump.sh ]] && source /home/pi/.autojump/etc/profile.d/autojump.sh\n```\n\n执行`source ~/.zshrc`使配置生效","source":"_posts/install_zsh.md","raw":"---\ntitle: 安装zsh\ncatalog: true\ndate: 2018-02-06\ntags:\n- Shell\n- Linux\n---\n查看当前系统可用的shell\n```\ncat /etc/shells\n```\n查看当前用户使用的shell\n```\necho $SHELL\n```\n切换当前用户使用的shell\n```\nchsh -s /bin/zsh\n```\n## 安装zsh\nRedhat Linux\n```\nsudo yum install zsh\n```\nUbuntu Linux\n```\nsudo apt-get install zsh\n```\n\n## 安装oh my zsh\n确保你已经安装了git。`sudo apt-get install git`\n\n然后执行以下命令即可进行自动安装:\n\n```\nwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n```\n## 配置\n```\nvim ~/.zshrc\n```\n部分配置如下\n```zsh\nalias cls='clear'\nalias ll='ls -l'\n# 推荐主题：michelebologna、fishy，更多主题可翻看https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n```\n## 插件\n\n### autojump\n下载autojump源码\n```\ngit clone git://github.com/joelthelion/autojump.git\n```\n安装\n```\ncd autojump\n./install.py\n```\n\n将以下代码加入.zshrc\n\n```\n[[ -s /home/pi/.autojump/etc/profile.d/autojump.sh ]] && source /home/pi/.autojump/etc/profile.d/autojump.sh\n```\n\n执行`source ~/.zshrc`使配置生效","slug":"install_zsh","published":1,"updated":"2020-12-23T15:02:16.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rf001hs2b97i20mfor","content":"<p>查看当前系统可用的shell</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat <span class=\"regexp\">/etc/</span>shells</span><br></pre></td></tr></table></figure>\n<p>查看当前用户使用的shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n<p>切换当前用户使用的shell</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s <span class=\"regexp\">/bin/</span>zsh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装zsh\">安装zsh</h2>\n<p>Redhat Linux</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum <span class=\"keyword\">install</span> zsh</span><br></pre></td></tr></table></figure>\n<p>Ubuntu Linux</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install zsh</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装oh-my-zsh\">安装oh my zsh</h2>\n<p>确保你已经安装了git。<code>sudo apt-get install git</code></p>\n<p>然后执行以下命令即可进行自动安装:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/robbyrussell/</span>oh-my-zsh<span class=\"regexp\">/raw/m</span>aster<span class=\"regexp\">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\">配置</h2>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~<span class=\"string\">/.zshrc</span></span><br></pre></td></tr></table></figure>\n<p>部分配置如下</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cls=<span class=\"string\">'clear'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l'</span></span><br><span class=\"line\"><span class=\"comment\"># 推荐主题：michelebologna、fishy，更多主题可翻看https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插件\">插件</h2>\n<h3 id=\"autojump\">autojump</h3>\n<p>下载autojump源码</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>://github.com/joelthelion/autojump.git</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> autojump</span><br><span class=\"line\"><span class=\"string\">./install.py</span></span><br></pre></td></tr></table></figure>\n<p>将以下代码加入.zshrc</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -s <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/.autojump/</span>etc<span class=\"regexp\">/profile.d/</span>autojump.sh ]] &amp;&amp; <span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/.autojump/</span>etc<span class=\"regexp\">/profile.d/</span>autojump.sh</span><br></pre></td></tr></table></figure>\n<p>执行<code>source ~/.zshrc</code>使配置生效</p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看当前系统可用的shell</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat <span class=\"regexp\">/etc/</span>shells</span><br></pre></td></tr></table></figure>\n<p>查看当前用户使用的shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n<p>切换当前用户使用的shell</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s <span class=\"regexp\">/bin/</span>zsh</span><br></pre></td></tr></table></figure>\n<h2>安装zsh</h2>\n<p>Redhat Linux</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum <span class=\"keyword\">install</span> zsh</span><br></pre></td></tr></table></figure>\n<p>Ubuntu Linux</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install zsh</span><br></pre></td></tr></table></figure>\n<h2>安装oh my zsh</h2>\n<p>确保你已经安装了git。<code>sudo apt-get install git</code></p>\n<p>然后执行以下命令即可进行自动安装:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/robbyrussell/</span>oh-my-zsh<span class=\"regexp\">/raw/m</span>aster<span class=\"regexp\">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure>\n<h2>配置</h2>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~<span class=\"string\">/.zshrc</span></span><br></pre></td></tr></table></figure>\n<p>部分配置如下</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cls=<span class=\"string\">'clear'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l'</span></span><br><span class=\"line\"><span class=\"comment\"># 推荐主题：michelebologna、fishy，更多主题可翻看https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br></pre></td></tr></table></figure>\n<h2>插件</h2>\n<h3>autojump</h3>\n<p>下载autojump源码</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>://github.com/joelthelion/autojump.git</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> autojump</span><br><span class=\"line\"><span class=\"string\">./install.py</span></span><br></pre></td></tr></table></figure>\n<p>将以下代码加入.zshrc</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -s <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/.autojump/</span>etc<span class=\"regexp\">/profile.d/</span>autojump.sh ]] &amp;&amp; <span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/.autojump/</span>etc<span class=\"regexp\">/profile.d/</span>autojump.sh</span><br></pre></td></tr></table></figure>\n<p>执行<code>source ~/.zshrc</code>使配置生效</p>\n"},{"title":"在树莓派4b上安装manjaro","date":"2020-09-30T16:00:00.000Z","catalog":true,"_content":"## 终端快捷键\nctrl+win+t\n\n## 配置蓝牙\n\n```shell\nsudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix\nsystemctl enable bluetooth\nsystemctl start bluetooth\npulseaudio -k                 \npulseaudio --start\nbluetoothctl #连接交互命令\npower on #开启控制器电源，默认关闭\nscan on # 扫描可配对的蓝牙设备\npair MAC_ADDRESS #配对\nconnect MAC_ADDRESS #连接\npavucontrol #指定蓝牙音频输出，如果蓝牙没有声音可能是这一步没有设置\n```\n\n## 安装中文字体\n```shell\nsudo pacman -S wqy-zenhei\n```","source":"_posts/install_manjaro_on_raspberry_pi4b.md","raw":"---\ntitle: 在树莓派4b上安装manjaro\ndate: 2020-10-01\ncatalog: true\ntags:\n- 树莓派\n- manjaro\n---\n## 终端快捷键\nctrl+win+t\n\n## 配置蓝牙\n\n```shell\nsudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix\nsystemctl enable bluetooth\nsystemctl start bluetooth\npulseaudio -k                 \npulseaudio --start\nbluetoothctl #连接交互命令\npower on #开启控制器电源，默认关闭\nscan on # 扫描可配对的蓝牙设备\npair MAC_ADDRESS #配对\nconnect MAC_ADDRESS #连接\npavucontrol #指定蓝牙音频输出，如果蓝牙没有声音可能是这一步没有设置\n```\n\n## 安装中文字体\n```shell\nsudo pacman -S wqy-zenhei\n```","slug":"install_manjaro_on_raspberry_pi4b","published":1,"updated":"2020-10-24T16:50:51.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rg001js2b9dihq7r67","content":"<h2 id=\"终端快捷键\">终端快捷键</h2>\n<p>ctrl+win+t</p>\n<h2 id=\"配置蓝牙\">配置蓝牙</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix</span><br><span class=\"line\">systemctl enable bluetooth</span><br><span class=\"line\">systemctl start bluetooth</span><br><span class=\"line\">pulseaudio -k                 </span><br><span class=\"line\">pulseaudio --start</span><br><span class=\"line\">bluetoothctl #连接交互命令</span><br><span class=\"line\">power on #开启控制器电源，默认关闭</span><br><span class=\"line\">scan on # 扫描可配对的蓝牙设备</span><br><span class=\"line\">pair MAC_ADDRESS #配对</span><br><span class=\"line\">connect MAC_ADDRESS #连接</span><br><span class=\"line\">pavucontrol #指定蓝牙音频输出，如果蓝牙没有声音可能是这一步没有设置</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装中文字体\">安装中文字体</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>终端快捷键</h2>\n<p>ctrl+win+t</p>\n<h2>配置蓝牙</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix</span><br><span class=\"line\">systemctl enable bluetooth</span><br><span class=\"line\">systemctl start bluetooth</span><br><span class=\"line\">pulseaudio -k                 </span><br><span class=\"line\">pulseaudio --start</span><br><span class=\"line\">bluetoothctl #连接交互命令</span><br><span class=\"line\">power on #开启控制器电源，默认关闭</span><br><span class=\"line\">scan on # 扫描可配对的蓝牙设备</span><br><span class=\"line\">pair MAC_ADDRESS #配对</span><br><span class=\"line\">connect MAC_ADDRESS #连接</span><br><span class=\"line\">pavucontrol #指定蓝牙音频输出，如果蓝牙没有声音可能是这一步没有设置</span><br></pre></td></tr></table></figure>\n<h2>安装中文字体</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>"},{"title":"为树莓派安装花生壳客户端","date":"2018-10-14T16:00:00.000Z","catalog":true,"_content":"## 准备\n1. 先在本地机器从花生壳官网[下载](https://hsk.oray.com/download)树莓派安装包:`phddns_3.0.4_systemd.deb`   \n2. 通过如下命令将安装包上传到树莓派：  \n\n```\nscp ~/Downloads/install_packages/phddns_3.0.4_systemd.deb pi@192.168.21.172:~/\n```\n\n## 安装\n通过ssh命令登陆树莓派。 \n通过`su`命令切换到root用户之后输入如下命令进行安装：\n\n```\ndpkg -i phddns_3.0.4_systemd.deb\n```\n安装成功后，将显示此树莓派的SN码、默认密码以及远程管理地址。\n\n*注意：花生壳安装步骤都需要在管理员（Root）权限下运行。root账号默认是禁用状态，且没有密码。可以通过`sudo passwd root`设置密码，然后通过`sudo passwd --unlock root`启用root账号*\n\n若执行命令出现以下提示：\n\n```\ndpkg: warning: 'ldconfig' not found in PATH or not executable\ndpkg: warning: 'start-stop-daemon' not found in PATH or not executable\ndpkg: error: 2 expected programs not found in PATH or not executable\nNote: root's PATH should usually contain /usr/local/sbin, /usr/sbin and /sbin\n```\n则在/root/.zshrc里添加以下配置：\n```\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```\n## 配置\n用生成的SN码和默认密码admin登录花生壳管理后台：http://b.oray.com\n登录成功后，开通内网穿透功能。\n*注意：若之前已注册过账号，重新安装客户端后SN码会变更，这时候需要用新的SN码登录，然后点击切换账号用旧的账号登录下，新的映射才会生效。*\n## 命令\n查看可用命令列表：**phddns**  \n启动：**phddns start**  \n停止：**phddns stop**  \n重启：**phddns restart**  \n查看状态：**phddns status**  \n查看版本：**phddns version**  \n重置：**phddns reset** \n\n## 日志\n花生壳日志文件存放路径：**/var/log/phddns** \n## 卸载\n输入如下命令进行卸载：\n\n```\ndpkg -r phddns\n```","source":"_posts/phddns_for_raspberrypi.md","raw":"---\ntitle: 为树莓派安装花生壳客户端\ndate: 2018-10-15\ncatalog: true\ntags:\n- 树莓派\n- 内网穿透\n- 建站\n---\n## 准备\n1. 先在本地机器从花生壳官网[下载](https://hsk.oray.com/download)树莓派安装包:`phddns_3.0.4_systemd.deb`   \n2. 通过如下命令将安装包上传到树莓派：  \n\n```\nscp ~/Downloads/install_packages/phddns_3.0.4_systemd.deb pi@192.168.21.172:~/\n```\n\n## 安装\n通过ssh命令登陆树莓派。 \n通过`su`命令切换到root用户之后输入如下命令进行安装：\n\n```\ndpkg -i phddns_3.0.4_systemd.deb\n```\n安装成功后，将显示此树莓派的SN码、默认密码以及远程管理地址。\n\n*注意：花生壳安装步骤都需要在管理员（Root）权限下运行。root账号默认是禁用状态，且没有密码。可以通过`sudo passwd root`设置密码，然后通过`sudo passwd --unlock root`启用root账号*\n\n若执行命令出现以下提示：\n\n```\ndpkg: warning: 'ldconfig' not found in PATH or not executable\ndpkg: warning: 'start-stop-daemon' not found in PATH or not executable\ndpkg: error: 2 expected programs not found in PATH or not executable\nNote: root's PATH should usually contain /usr/local/sbin, /usr/sbin and /sbin\n```\n则在/root/.zshrc里添加以下配置：\n```\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```\n## 配置\n用生成的SN码和默认密码admin登录花生壳管理后台：http://b.oray.com\n登录成功后，开通内网穿透功能。\n*注意：若之前已注册过账号，重新安装客户端后SN码会变更，这时候需要用新的SN码登录，然后点击切换账号用旧的账号登录下，新的映射才会生效。*\n## 命令\n查看可用命令列表：**phddns**  \n启动：**phddns start**  \n停止：**phddns stop**  \n重启：**phddns restart**  \n查看状态：**phddns status**  \n查看版本：**phddns version**  \n重置：**phddns reset** \n\n## 日志\n花生壳日志文件存放路径：**/var/log/phddns** \n## 卸载\n输入如下命令进行卸载：\n\n```\ndpkg -r phddns\n```","slug":"phddns_for_raspberrypi","published":1,"updated":"2020-12-23T15:02:16.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rh001ms2b9i09y09db","content":"<h2 id=\"准备\">准备</h2>\n<ol>\n<li>先在本地机器从花生壳官网<a href=\"https://hsk.oray.com/download\" target=\"_blank\" rel=\"noopener\">下载</a>树莓派安装包:<code>phddns_3.0.4_systemd.deb</code></li>\n<li>通过如下命令将安装包上传到树莓派：</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~<span class=\"regexp\">/Downloads/install</span>_packages/phddns_3.<span class=\"number\">0</span>.<span class=\"number\">4_</span>systemd.deb pi<span class=\"variable\">@192</span>.<span class=\"number\">168.21</span>.<span class=\"number\">172</span><span class=\"symbol\">:~/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\">安装</h2>\n<p>通过ssh命令登陆树莓派。<br>\n通过<code>su</code>命令切换到root用户之后输入如下命令进行安装：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dpkg</span> <span class=\"selector-tag\">-i</span> <span class=\"selector-tag\">phddns_3</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.4_systemd</span><span class=\"selector-class\">.deb</span></span><br></pre></td></tr></table></figure>\n<p>安装成功后，将显示此树莓派的SN码、默认密码以及远程管理地址。</p>\n<p><em>注意：花生壳安装步骤都需要在管理员（Root）权限下运行。root账号默认是禁用状态，且没有密码。可以通过<code>sudo passwd root</code>设置密码，然后通过<code>sudo passwd --unlock root</code>启用root账号</em></p>\n<p>若执行命令出现以下提示：</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg: <span class=\"literal\">warning</span>: <span class=\"symbol\">'ldconfig</span>' <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\">dpkg: <span class=\"literal\">warning</span>: <span class=\"symbol\">'start</span>-stop-daemon' <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\">dpkg: <span class=\"literal\">error</span>: <span class=\"number\">2</span> expected programs <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\"><span class=\"literal\">Note</span>: root<span class=\"symbol\">'s</span> PATH should usually contain /usr/local/sbin, /usr/sbin <span class=\"keyword\">and</span> /sbin</span><br></pre></td></tr></table></figure>\n<p>则在/root/.zshrc里添加以下配置：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/sbin:/usr</span><span class=\"regexp\">/local/bin</span><span class=\"symbol\">:/usr/sbin</span><span class=\"symbol\">:/usr/bin</span><span class=\"symbol\">:/sbin</span><span class=\"symbol\">:/bin</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\">配置</h2>\n<p>用生成的SN码和默认密码admin登录花生壳管理后台：<a href=\"http://b.oray.com\" target=\"_blank\" rel=\"noopener\">http://b.oray.com</a><br>\n登录成功后，开通内网穿透功能。<br>\n<em>注意：若之前已注册过账号，重新安装客户端后SN码会变更，这时候需要用新的SN码登录，然后点击切换账号用旧的账号登录下，新的映射才会生效。</em></p>\n<h2 id=\"命令\">命令</h2>\n<p>查看可用命令列表：<strong>phddns</strong><br>\n启动：<strong>phddns start</strong><br>\n停止：<strong>phddns stop</strong><br>\n重启：<strong>phddns restart</strong><br>\n查看状态：<strong>phddns status</strong><br>\n查看版本：<strong>phddns version</strong><br>\n重置：<strong>phddns reset</strong></p>\n<h2 id=\"日志\">日志</h2>\n<p>花生壳日志文件存放路径：<strong>/var/log/phddns</strong></p>\n<h2 id=\"卸载\">卸载</h2>\n<p>输入如下命令进行卸载：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">dpkg -r phddns</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>准备</h2>\n<ol>\n<li>先在本地机器从花生壳官网<a href=\"https://hsk.oray.com/download\" target=\"_blank\" rel=\"noopener\">下载</a>树莓派安装包:<code>phddns_3.0.4_systemd.deb</code></li>\n<li>通过如下命令将安装包上传到树莓派：</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~<span class=\"regexp\">/Downloads/install</span>_packages/phddns_3.<span class=\"number\">0</span>.<span class=\"number\">4_</span>systemd.deb pi<span class=\"variable\">@192</span>.<span class=\"number\">168.21</span>.<span class=\"number\">172</span><span class=\"symbol\">:~/</span></span><br></pre></td></tr></table></figure>\n<h2>安装</h2>\n<p>通过ssh命令登陆树莓派。<br>\n通过<code>su</code>命令切换到root用户之后输入如下命令进行安装：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dpkg</span> <span class=\"selector-tag\">-i</span> <span class=\"selector-tag\">phddns_3</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.4_systemd</span><span class=\"selector-class\">.deb</span></span><br></pre></td></tr></table></figure>\n<p>安装成功后，将显示此树莓派的SN码、默认密码以及远程管理地址。</p>\n<p><em>注意：花生壳安装步骤都需要在管理员（Root）权限下运行。root账号默认是禁用状态，且没有密码。可以通过<code>sudo passwd root</code>设置密码，然后通过<code>sudo passwd --unlock root</code>启用root账号</em></p>\n<p>若执行命令出现以下提示：</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg: <span class=\"literal\">warning</span>: <span class=\"symbol\">'ldconfig</span>' <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\">dpkg: <span class=\"literal\">warning</span>: <span class=\"symbol\">'start</span>-stop-daemon' <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\">dpkg: <span class=\"literal\">error</span>: <span class=\"number\">2</span> expected programs <span class=\"keyword\">not</span> found <span class=\"keyword\">in</span> PATH <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> executable</span><br><span class=\"line\"><span class=\"literal\">Note</span>: root<span class=\"symbol\">'s</span> PATH should usually contain /usr/local/sbin, /usr/sbin <span class=\"keyword\">and</span> /sbin</span><br></pre></td></tr></table></figure>\n<p>则在/root/.zshrc里添加以下配置：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/sbin:/usr</span><span class=\"regexp\">/local/bin</span><span class=\"symbol\">:/usr/sbin</span><span class=\"symbol\">:/usr/bin</span><span class=\"symbol\">:/sbin</span><span class=\"symbol\">:/bin</span></span><br></pre></td></tr></table></figure>\n<h2>配置</h2>\n<p>用生成的SN码和默认密码admin登录花生壳管理后台：<a href=\"http://b.oray.com\" target=\"_blank\" rel=\"noopener\">http://b.oray.com</a><br>\n登录成功后，开通内网穿透功能。<br>\n<em>注意：若之前已注册过账号，重新安装客户端后SN码会变更，这时候需要用新的SN码登录，然后点击切换账号用旧的账号登录下，新的映射才会生效。</em></p>\n<h2>命令</h2>\n<p>查看可用命令列表：<strong>phddns</strong><br>\n启动：<strong>phddns start</strong><br>\n停止：<strong>phddns stop</strong><br>\n重启：<strong>phddns restart</strong><br>\n查看状态：<strong>phddns status</strong><br>\n查看版本：<strong>phddns version</strong><br>\n重置：<strong>phddns reset</strong></p>\n<h2>日志</h2>\n<p>花生壳日志文件存放路径：<strong>/var/log/phddns</strong></p>\n<h2>卸载</h2>\n<p>输入如下命令进行卸载：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">dpkg -r phddns</span></span><br></pre></td></tr></table></figure>"},{"title":"读懂shell脚本","date":"2018-02-13T16:00:00.000Z","catalog":true,"_content":"\n```\nset -e\n```\n\n  这句语句告诉shell如果任何语句的执行结果不是true则应该退出。","source":"_posts/understand_shell.md","raw":"---\ntitle: 读懂shell脚本\ndate: 2018-02-14\ncatalog: true\ntags:\n- Shell\n---\n\n```\nset -e\n```\n\n  这句语句告诉shell如果任何语句的执行结果不是true则应该退出。","slug":"understand_shell","published":1,"updated":"2020-12-23T15:02:16.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84ri001os2b9xyiff7ui","content":"<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> -e</span><br></pre></td></tr></table></figure>\n<p>这句语句告诉shell如果任何语句的执行结果不是true则应该退出。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> -e</span><br></pre></td></tr></table></figure>\n<p>这句语句告诉shell如果任何语句的执行结果不是true则应该退出。</p>\n"},{"title":"ZooKeeper 简介","date":"2019-02-23T16:00:00.000Z","catalog":true,"_content":"## zookeeper是什么？\n\nZooKeeper是一个分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。\n\n## zookeeper是干吗用的？\n\n1. 解决分布式系统数据一致性问题（ACID）。\n2. 协调分布式服务。\n\n## 为什么用ZooKeeper\n\n1. 成熟稳定\n2. 开源\n3. 免费\n4. 广泛应用\n\n## zookeeper特点\n\n1. 一致。\n2. 有头。\n3. 数据树。\n\n## zk选举算法\n\n1. 每个Server会发出一个投票。\n2. 接收来自各个服务的投票。\n3. 处理投票。\n4. 统计投票。\n5. 改变服务器状态。","source":"_posts/zookeeper_introduction.md","raw":"---\ntitle: ZooKeeper 简介\ndate: 2019-02-24\ncatalog: true\ntags:\n- 分布式\n- 中间件\n---\n## zookeeper是什么？\n\nZooKeeper是一个分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。\n\n## zookeeper是干吗用的？\n\n1. 解决分布式系统数据一致性问题（ACID）。\n2. 协调分布式服务。\n\n## 为什么用ZooKeeper\n\n1. 成熟稳定\n2. 开源\n3. 免费\n4. 广泛应用\n\n## zookeeper特点\n\n1. 一致。\n2. 有头。\n3. 数据树。\n\n## zk选举算法\n\n1. 每个Server会发出一个投票。\n2. 接收来自各个服务的投票。\n3. 处理投票。\n4. 统计投票。\n5. 改变服务器状态。","slug":"zookeeper_introduction","published":1,"updated":"2020-12-23T15:02:16.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rk001rs2b9iqjfniqt","content":"<h2 id=\"zookeeper是什么\">zookeeper是什么？</h2>\n<p>ZooKeeper是一个分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。</p>\n<h2 id=\"zookeeper是干吗用的\">zookeeper是干吗用的？</h2>\n<ol>\n<li>解决分布式系统数据一致性问题（ACID）。</li>\n<li>协调分布式服务。</li>\n</ol>\n<h2 id=\"为什么用zookeeper\">为什么用ZooKeeper</h2>\n<ol>\n<li>成熟稳定</li>\n<li>开源</li>\n<li>免费</li>\n<li>广泛应用</li>\n</ol>\n<h2 id=\"zookeeper特点\">zookeeper特点</h2>\n<ol>\n<li>一致。</li>\n<li>有头。</li>\n<li>数据树。</li>\n</ol>\n<h2 id=\"zk选举算法\">zk选举算法</h2>\n<ol>\n<li>每个Server会发出一个投票。</li>\n<li>接收来自各个服务的投票。</li>\n<li>处理投票。</li>\n<li>统计投票。</li>\n<li>改变服务器状态。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2>zookeeper是什么？</h2>\n<p>ZooKeeper是一个分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。</p>\n<h2>zookeeper是干吗用的？</h2>\n<ol>\n<li>解决分布式系统数据一致性问题（ACID）。</li>\n<li>协调分布式服务。</li>\n</ol>\n<h2>为什么用ZooKeeper</h2>\n<ol>\n<li>成熟稳定</li>\n<li>开源</li>\n<li>免费</li>\n<li>广泛应用</li>\n</ol>\n<h2>zookeeper特点</h2>\n<ol>\n<li>一致。</li>\n<li>有头。</li>\n<li>数据树。</li>\n</ol>\n<h2>zk选举算法</h2>\n<ol>\n<li>每个Server会发出一个投票。</li>\n<li>接收来自各个服务的投票。</li>\n<li>处理投票。</li>\n<li>统计投票。</li>\n<li>改变服务器状态。</li>\n</ol>\n"},{"title":"colemak用户的vim配置","date":"2020-09-28T16:00:00.000Z","catalog":true,"_content":"以下为适用于colemak键盘的vim基础配置：\n```\nnoremap Q :q<CR>\nnoremap <C-q> :qa<CR>\nnoremap S :w<CR>\n\n\" Undo operations\nnoremap l u\n\n\" Insert Key\nnoremap k i\nnoremap K I\n\n\" make Y to copy till the end of the line\nnnoremap Y y$\n\n\" Copy to system clipboard\nvnoremap Y \"+y\n\n\" Indentation\nnnoremap < <<\nnnoremap > >>\n\n\" Search\nnoremap <LEADER><CR> :nohlsearch<CR>\n\" ===\n\" === Cursor Movement\n\" ===\n\" New cursor movement (the default arrow keys are used for resizing windows)\n\"     ^\n\"     u\n\" < n   i >\n\"     e\n\"     v\nnoremap <silent> u k\nnoremap <silent> n h\nnoremap <silent> e j\nnoremap <silent> i l\nnoremap <silent> gu gk\nnoremap <silent> ge gj\n\n\" U/E keys for 5 times u/e (faster navigation)\nnoremap <silent> U 5k\nnoremap <silent> E 5j\n\n\" N key: go to the start of the line\nnoremap <silent> N 0\n\" I key: go to the end of the line\nnoremap <silent> I $\n\n\" Faster in-line navigation\nnoremap W 5w\nnoremap B 5b\n\n\n\" Ctrl + U or E will move up/down the view port without moving the cursor\nnoremap <C-U> 5<C-y>\nnoremap <C-E> 5<C-e>\n\n\n\" ===\n\" === Insert Mode Cursor Movement\n\" ===\ninoremap <C-a> <ESC>A\n\n\" ===\n\" === Command Mode Cursor Movement\n\" ===\ncnoremap <C-a> <Home>\ncnoremap <C-e> <End>\ncnoremap <C-p> <Up>\ncnoremap <C-n> <Down>\ncnoremap <C-b> <Left>\ncnoremap <C-f> <Right>\ncnoremap <M-b> <S-Left>\ncnoremap <M-w> <S-Right>\n\n\n\" ===\n\" === Searching\n\" ===\nnoremap - N\nnoremap = n\n\n\" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)\nnoremap su :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>\nnoremap se :set splitbelow<CR>:split<CR>\nnoremap sn :set nosplitright<CR>:vsplit<CR>:set splitright<CR>\nnoremap si :set splitright<CR>:vsplit<CR>\n\n\" Resize splits with arrow keys\nnoremap <up> :res +5<CR>\nnoremap <down> :res -5<CR>\nnoremap <left> :vertical resize-5<CR>\nnoremap <right> :vertical resize+5<CR>\n\n\" Place the two screens up and down\nnoremap sh <C-w>t<C-w>K\n\" Place the two screens side by side\nnoremap sv <C-w>t<C-w>H\n\n\" Rotate screens\nnoremap srh <C-w>b<C-w>K\nnoremap srv <C-w>b<C-w>H\n\n\" Press <SPACE> + q to close the window below the current window\nnoremap <LEADER>q <C-w>j:q<CR>\n\n\" ===\n\" === Tab management\n\" ===\n\" Create a new tab with tu\nnoremap tu :tabe<CR>\n\" Move around tabs with tn and ti\nnoremap tn :-tabnext<CR>\nnoremap ti :+tabnext<CR>\n\" Move the tabs with tmn and tmi\nnoremap tmn :-tabmove<CR>\nnoremap tmi :+tabmove<CR>\n\n\" Press space twice to jump to the next '<++>' and edit it\nnoremap <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l\n\n\" Spelling Check with <space>sc\nnoremap <LEADER>sc :set spell!<CR>\n\n\" Press ` to change case (instead of ~)\nnoremap ` ~\n\n\" Adjacent duplicate words\nnoremap <LEADER>dw /\\(\\<\\w\\+\\>\\)\\_s*\\1\n```\n","source":"_posts/vim_config_for_colemak.md","raw":"---\ntitle: colemak用户的vim配置\ndate: 2020-09-29\ncatalog: true\ntags:\n- vim\n- 开发工具\n- colemak\n---\n以下为适用于colemak键盘的vim基础配置：\n```\nnoremap Q :q<CR>\nnoremap <C-q> :qa<CR>\nnoremap S :w<CR>\n\n\" Undo operations\nnoremap l u\n\n\" Insert Key\nnoremap k i\nnoremap K I\n\n\" make Y to copy till the end of the line\nnnoremap Y y$\n\n\" Copy to system clipboard\nvnoremap Y \"+y\n\n\" Indentation\nnnoremap < <<\nnnoremap > >>\n\n\" Search\nnoremap <LEADER><CR> :nohlsearch<CR>\n\" ===\n\" === Cursor Movement\n\" ===\n\" New cursor movement (the default arrow keys are used for resizing windows)\n\"     ^\n\"     u\n\" < n   i >\n\"     e\n\"     v\nnoremap <silent> u k\nnoremap <silent> n h\nnoremap <silent> e j\nnoremap <silent> i l\nnoremap <silent> gu gk\nnoremap <silent> ge gj\n\n\" U/E keys for 5 times u/e (faster navigation)\nnoremap <silent> U 5k\nnoremap <silent> E 5j\n\n\" N key: go to the start of the line\nnoremap <silent> N 0\n\" I key: go to the end of the line\nnoremap <silent> I $\n\n\" Faster in-line navigation\nnoremap W 5w\nnoremap B 5b\n\n\n\" Ctrl + U or E will move up/down the view port without moving the cursor\nnoremap <C-U> 5<C-y>\nnoremap <C-E> 5<C-e>\n\n\n\" ===\n\" === Insert Mode Cursor Movement\n\" ===\ninoremap <C-a> <ESC>A\n\n\" ===\n\" === Command Mode Cursor Movement\n\" ===\ncnoremap <C-a> <Home>\ncnoremap <C-e> <End>\ncnoremap <C-p> <Up>\ncnoremap <C-n> <Down>\ncnoremap <C-b> <Left>\ncnoremap <C-f> <Right>\ncnoremap <M-b> <S-Left>\ncnoremap <M-w> <S-Right>\n\n\n\" ===\n\" === Searching\n\" ===\nnoremap - N\nnoremap = n\n\n\" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)\nnoremap su :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>\nnoremap se :set splitbelow<CR>:split<CR>\nnoremap sn :set nosplitright<CR>:vsplit<CR>:set splitright<CR>\nnoremap si :set splitright<CR>:vsplit<CR>\n\n\" Resize splits with arrow keys\nnoremap <up> :res +5<CR>\nnoremap <down> :res -5<CR>\nnoremap <left> :vertical resize-5<CR>\nnoremap <right> :vertical resize+5<CR>\n\n\" Place the two screens up and down\nnoremap sh <C-w>t<C-w>K\n\" Place the two screens side by side\nnoremap sv <C-w>t<C-w>H\n\n\" Rotate screens\nnoremap srh <C-w>b<C-w>K\nnoremap srv <C-w>b<C-w>H\n\n\" Press <SPACE> + q to close the window below the current window\nnoremap <LEADER>q <C-w>j:q<CR>\n\n\" ===\n\" === Tab management\n\" ===\n\" Create a new tab with tu\nnoremap tu :tabe<CR>\n\" Move around tabs with tn and ti\nnoremap tn :-tabnext<CR>\nnoremap ti :+tabnext<CR>\n\" Move the tabs with tmn and tmi\nnoremap tmn :-tabmove<CR>\nnoremap tmi :+tabmove<CR>\n\n\" Press space twice to jump to the next '<++>' and edit it\nnoremap <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l\n\n\" Spelling Check with <space>sc\nnoremap <LEADER>sc :set spell!<CR>\n\n\" Press ` to change case (instead of ~)\nnoremap ` ~\n\n\" Adjacent duplicate words\nnoremap <LEADER>dw /\\(\\<\\w\\+\\>\\)\\_s*\\1\n```\n","slug":"vim_config_for_colemak","published":1,"updated":"2020-11-26T15:45:00.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj1k84rl001ss2b9pax1z7n1","content":"<p>以下为适用于colemak键盘的vim基础配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">noremap</span> Q :q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-q&gt;</span> :<span class=\"keyword\">qa</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> S :<span class=\"keyword\">w</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Undo operations</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">l</span> <span class=\"keyword\">u</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Insert Key</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">k</span> i</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> K I</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" make Y to copy till the end of the line</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> Y <span class=\"keyword\">y</span>$</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Copy to system clipboard</span></span><br><span class=\"line\"><span class=\"keyword\">vnoremap</span> Y <span class=\"comment\">\"+y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Indentation</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> &lt; &lt;&lt;</span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> &gt; &gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Search</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span><span class=\"symbol\">&lt;CR&gt;</span> :<span class=\"keyword\">nohlsearch</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" New cursor movement (the default arrow keys are used for resizing windows)</span></span><br><span class=\"line\"><span class=\"comment\">\"     ^</span></span><br><span class=\"line\"><span class=\"comment\">\"     u</span></span><br><span class=\"line\"><span class=\"comment\">\" &lt; n   i &gt;</span></span><br><span class=\"line\"><span class=\"comment\">\"     e</span></span><br><span class=\"line\"><span class=\"comment\">\"     v</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">u</span> <span class=\"keyword\">k</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> n h</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">e</span> <span class=\"keyword\">j</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> i <span class=\"keyword\">l</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">gu</span> gk</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> ge gj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" U/E keys for 5 times u/e (faster navigation)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> U <span class=\"number\">5</span><span class=\"keyword\">k</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> E <span class=\"number\">5</span><span class=\"keyword\">j</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" N key: go to the start of the line</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">N</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">\" I key: go to the end of the line</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> I $</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Faster in-line navigation</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> W <span class=\"number\">5</span><span class=\"keyword\">w</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> B <span class=\"number\">5</span><span class=\"keyword\">b</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Ctrl + U or E will move up/down the view port without moving the cursor</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-U&gt;</span> <span class=\"number\">5</span><span class=\"symbol\">&lt;C-y&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-E&gt;</span> <span class=\"number\">5</span><span class=\"symbol\">&lt;C-e&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Insert Mode Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;C-a&gt;</span> <span class=\"symbol\">&lt;ESC&gt;</span>A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Command Mode Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-a&gt;</span> <span class=\"symbol\">&lt;Home&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-e&gt;</span> <span class=\"symbol\">&lt;End&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-p&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-n&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-b&gt;</span> <span class=\"symbol\">&lt;Left&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-f&gt;</span> <span class=\"symbol\">&lt;Right&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;M-b&gt;</span> <span class=\"symbol\">&lt;S-Left&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;M-w&gt;</span> <span class=\"symbol\">&lt;S-Right&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Searching</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> - <span class=\"keyword\">N</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> = n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> su :<span class=\"keyword\">set</span> nosplitbelow<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">split</span><span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">set</span> splitbelow<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">se</span> :<span class=\"keyword\">set</span> splitbelow<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">split</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sn</span> :<span class=\"keyword\">set</span> nosplitright<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">vsplit</span><span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">set</span> splitright<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> si :<span class=\"keyword\">set</span> splitright<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">vsplit</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Resize splits with arrow keys</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;up&gt;</span> :<span class=\"keyword\">res</span> +<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;down&gt;</span> :<span class=\"keyword\">res</span> -<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;left&gt;</span> :<span class=\"keyword\">vertical</span> <span class=\"keyword\">resize</span>-<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;right&gt;</span> :<span class=\"keyword\">vertical</span> <span class=\"keyword\">resize</span>+<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Place the two screens up and down</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sh</span> <span class=\"symbol\">&lt;C-w&gt;</span>t<span class=\"symbol\">&lt;C-w&gt;</span>K</span><br><span class=\"line\"><span class=\"comment\">\" Place the two screens side by side</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sv</span> <span class=\"symbol\">&lt;C-w&gt;</span>t<span class=\"symbol\">&lt;C-w&gt;</span>H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Rotate screens</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> srh <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">b</span><span class=\"symbol\">&lt;C-w&gt;</span>K</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> srv <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">b</span><span class=\"symbol\">&lt;C-w&gt;</span>H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press &lt;SPACE&gt; + q to close the window below the current window</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>q <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">j</span>:q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Tab management</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" Create a new tab with tu</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">tu</span> :<span class=\"keyword\">tabe</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" Move around tabs with tn and ti</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">tn</span> :-<span class=\"keyword\">tabnext</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> ti :+<span class=\"keyword\">tabnext</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" Move the tabs with tmn and tmi</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> tmn :-<span class=\"keyword\">tabmove</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> tmi :+<span class=\"keyword\">tabmove</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press space twice to jump to the next '&lt;++&gt;' and edit it</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span><span class=\"symbol\">&lt;LEADER&gt;</span> <span class=\"symbol\">&lt;Esc&gt;</span>/&lt;++&gt;<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">nohlsearch</span><span class=\"symbol\">&lt;CR&gt;</span>c4l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Spelling Check with &lt;space&gt;sc</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>sc :<span class=\"keyword\">set</span> spell!<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press ` to change case (instead of ~)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> ` ~</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Adjacent duplicate words</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>dw /\\(\\&lt;\\<span class=\"keyword\">w</span>\\+\\&gt;\\)\\_s*\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>以下为适用于colemak键盘的vim基础配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">noremap</span> Q :q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-q&gt;</span> :<span class=\"keyword\">qa</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> S :<span class=\"keyword\">w</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Undo operations</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">l</span> <span class=\"keyword\">u</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Insert Key</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">k</span> i</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> K I</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" make Y to copy till the end of the line</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> Y <span class=\"keyword\">y</span>$</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Copy to system clipboard</span></span><br><span class=\"line\"><span class=\"keyword\">vnoremap</span> Y <span class=\"comment\">\"+y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Indentation</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> &lt; &lt;&lt;</span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> &gt; &gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Search</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span><span class=\"symbol\">&lt;CR&gt;</span> :<span class=\"keyword\">nohlsearch</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" New cursor movement (the default arrow keys are used for resizing windows)</span></span><br><span class=\"line\"><span class=\"comment\">\"     ^</span></span><br><span class=\"line\"><span class=\"comment\">\"     u</span></span><br><span class=\"line\"><span class=\"comment\">\" &lt; n   i &gt;</span></span><br><span class=\"line\"><span class=\"comment\">\"     e</span></span><br><span class=\"line\"><span class=\"comment\">\"     v</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">u</span> <span class=\"keyword\">k</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> n h</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">e</span> <span class=\"keyword\">j</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> i <span class=\"keyword\">l</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">gu</span> gk</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> ge gj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" U/E keys for 5 times u/e (faster navigation)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> U <span class=\"number\">5</span><span class=\"keyword\">k</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> E <span class=\"number\">5</span><span class=\"keyword\">j</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" N key: go to the start of the line</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"keyword\">N</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">\" I key: go to the end of the line</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;silent&gt;</span> I $</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Faster in-line navigation</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> W <span class=\"number\">5</span><span class=\"keyword\">w</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> B <span class=\"number\">5</span><span class=\"keyword\">b</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Ctrl + U or E will move up/down the view port without moving the cursor</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-U&gt;</span> <span class=\"number\">5</span><span class=\"symbol\">&lt;C-y&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;C-E&gt;</span> <span class=\"number\">5</span><span class=\"symbol\">&lt;C-e&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Insert Mode Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;C-a&gt;</span> <span class=\"symbol\">&lt;ESC&gt;</span>A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Command Mode Cursor Movement</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-a&gt;</span> <span class=\"symbol\">&lt;Home&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-e&gt;</span> <span class=\"symbol\">&lt;End&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-p&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-n&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-b&gt;</span> <span class=\"symbol\">&lt;Left&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;C-f&gt;</span> <span class=\"symbol\">&lt;Right&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;M-b&gt;</span> <span class=\"symbol\">&lt;S-Left&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">cnoremap</span> <span class=\"symbol\">&lt;M-w&gt;</span> <span class=\"symbol\">&lt;S-Right&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Searching</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> - <span class=\"keyword\">N</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> = n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> su :<span class=\"keyword\">set</span> nosplitbelow<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">split</span><span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">set</span> splitbelow<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">se</span> :<span class=\"keyword\">set</span> splitbelow<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">split</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sn</span> :<span class=\"keyword\">set</span> nosplitright<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">vsplit</span><span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">set</span> splitright<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> si :<span class=\"keyword\">set</span> splitright<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">vsplit</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Resize splits with arrow keys</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;up&gt;</span> :<span class=\"keyword\">res</span> +<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;down&gt;</span> :<span class=\"keyword\">res</span> -<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;left&gt;</span> :<span class=\"keyword\">vertical</span> <span class=\"keyword\">resize</span>-<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;right&gt;</span> :<span class=\"keyword\">vertical</span> <span class=\"keyword\">resize</span>+<span class=\"number\">5</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Place the two screens up and down</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sh</span> <span class=\"symbol\">&lt;C-w&gt;</span>t<span class=\"symbol\">&lt;C-w&gt;</span>K</span><br><span class=\"line\"><span class=\"comment\">\" Place the two screens side by side</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">sv</span> <span class=\"symbol\">&lt;C-w&gt;</span>t<span class=\"symbol\">&lt;C-w&gt;</span>H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Rotate screens</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> srh <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">b</span><span class=\"symbol\">&lt;C-w&gt;</span>K</span><br><span class=\"line\"><span class=\"keyword\">noremap</span> srv <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">b</span><span class=\"symbol\">&lt;C-w&gt;</span>H</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press &lt;SPACE&gt; + q to close the window below the current window</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>q <span class=\"symbol\">&lt;C-w&gt;</span><span class=\"keyword\">j</span>:q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" === Tab management</span></span><br><span class=\"line\"><span class=\"comment\">\" ===</span></span><br><span class=\"line\"><span class=\"comment\">\" Create a new tab with tu</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">tu</span> :<span class=\"keyword\">tabe</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" Move around tabs with tn and ti</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"keyword\">tn</span> :-<span class=\"keyword\">tabnext</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> ti :+<span class=\"keyword\">tabnext</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\" Move the tabs with tmn and tmi</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> tmn :-<span class=\"keyword\">tabmove</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> tmi :+<span class=\"keyword\">tabmove</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press space twice to jump to the next '&lt;++&gt;' and edit it</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span><span class=\"symbol\">&lt;LEADER&gt;</span> <span class=\"symbol\">&lt;Esc&gt;</span>/&lt;++&gt;<span class=\"symbol\">&lt;CR&gt;</span>:<span class=\"keyword\">nohlsearch</span><span class=\"symbol\">&lt;CR&gt;</span>c4l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Spelling Check with &lt;space&gt;sc</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>sc :<span class=\"keyword\">set</span> spell!<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Press ` to change case (instead of ~)</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> ` ~</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" Adjacent duplicate words</span></span><br><span class=\"line\"><span class=\"keyword\">noremap</span> <span class=\"symbol\">&lt;LEADER&gt;</span>dw /\\(\\&lt;\\<span class=\"keyword\">w</span>\\+\\&gt;\\)\\_s*\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckj1k84q90002s2b9o3kj355q","tag_id":"ckj1k84qg0005s2b9ckp9nw5b","_id":"ckj1k84qr000es2b968mvndwa"},{"post_id":"ckj1k84q90002s2b9o3kj355q","tag_id":"ckj1k84ql0009s2b98j26jsls","_id":"ckj1k84qs000gs2b9qj1vv5r7"},{"post_id":"ckj1k84qe0004s2b920kb0wdc","tag_id":"ckj1k84qp000cs2b9059xt21p","_id":"ckj1k84qx000ms2b9hinkv1oh"},{"post_id":"ckj1k84qe0004s2b920kb0wdc","tag_id":"ckj1k84ql0009s2b98j26jsls","_id":"ckj1k84qy000os2b952cst8k2"},{"post_id":"ckj1k84qh0006s2b9d03veo3f","tag_id":"ckj1k84qw000ks2b9wip7j7jj","_id":"ckj1k84qz000rs2b96qsdj6g2"},{"post_id":"ckj1k84qj0007s2b9kq5ozwwi","tag_id":"ckj1k84ql0009s2b98j26jsls","_id":"ckj1k84r2000vs2b9bgjff2sn"},{"post_id":"ckj1k84qk0008s2b9os4rpqnf","tag_id":"ckj1k84r0000ts2b9248430jg","_id":"ckj1k84r4000zs2b94l2nnjw5"},{"post_id":"ckj1k84ql000as2b96fx4r5po","tag_id":"ckj1k84r4000ys2b99ngwdmgv","_id":"ckj1k84r90017s2b9m87n2wko"},{"post_id":"ckj1k84ql000as2b96fx4r5po","tag_id":"ckj1k84r60012s2b9dibg66x6","_id":"ckj1k84ra0019s2b90980yw69"},{"post_id":"ckj1k84qo000bs2b9fxnmhzbg","tag_id":"ckj1k84r80015s2b9akwegkux","_id":"ckj1k84rc001cs2b9unoqnelm"},{"post_id":"ckj1k84qq000ds2b99ljqt7jb","tag_id":"ckj1k84ra001as2b9i1a53oo9","_id":"ckj1k84re001gs2b9c0tp4243"},{"post_id":"ckj1k84rd001es2b9q1bf3fek","tag_id":"ckj1k84qp000cs2b9059xt21p","_id":"ckj1k84rf001is2b93p9zbmf6"},{"post_id":"ckj1k84rd001es2b9q1bf3fek","tag_id":"ckj1k84ql0009s2b98j26jsls","_id":"ckj1k84rh001ls2b9eim49sfr"},{"post_id":"ckj1k84qr000fs2b91hbym0ss","tag_id":"ckj1k84r80015s2b9akwegkux","_id":"ckj1k84ri001ns2b9ygw97x8d"},{"post_id":"ckj1k84qu000is2b90miq2z1z","tag_id":"ckj1k84r80015s2b9akwegkux","_id":"ckj1k84rk001qs2b90ftc8o6z"},{"post_id":"ckj1k84qv000js2b9z8kk4rvz","tag_id":"ckj1k84ra001as2b9i1a53oo9","_id":"ckj1k84rm001us2b9ubncugxl"},{"post_id":"ckj1k84qw000ls2b9lz798sck","tag_id":"ckj1k84ra001as2b9i1a53oo9","_id":"ckj1k84rn001ws2b9bsv1yjxb"},{"post_id":"ckj1k84qx000ns2b9j6tr6rnp","tag_id":"ckj1k84rm001vs2b9o315n8qq","_id":"ckj1k84rn001ys2b9t3jdifp1"},{"post_id":"ckj1k84qy000qs2b9xvmzb68l","tag_id":"ckj1k84ra001as2b9i1a53oo9","_id":"ckj1k84ro0020s2b9i5oajfvn"},{"post_id":"ckj1k84qz000ss2b9bp4p3ef3","tag_id":"ckj1k84rn001zs2b9kslpe1dk","_id":"ckj1k84ro0023s2b9y126ogcs"},{"post_id":"ckj1k84qz000ss2b9bp4p3ef3","tag_id":"ckj1k84ro0021s2b9apy8wm4l","_id":"ckj1k84ro0024s2b9ujldrbrr"},{"post_id":"ckj1k84r2000ws2b9vdgromfv","tag_id":"ckj1k84ro0022s2b9da5fn9qb","_id":"ckj1k84rp0026s2b9n3riacil"},{"post_id":"ckj1k84r3000xs2b9dyj7ebgk","tag_id":"ckj1k84ro0025s2b9ccry59kh","_id":"ckj1k84rp0028s2b9pbkk4z49"},{"post_id":"ckj1k84r40010s2b960wid9ao","tag_id":"ckj1k84rp0027s2b993pf3azl","_id":"ckj1k84rp002as2b94dg9ov3y"},{"post_id":"ckj1k84r50011s2b9ub196h25","tag_id":"ckj1k84rp0029s2b9dhppzjk8","_id":"ckj1k84rq002ds2b90fpruh46"},{"post_id":"ckj1k84r50011s2b9ub196h25","tag_id":"ckj1k84rm001vs2b9o315n8qq","_id":"ckj1k84rq002es2b95jwadbu8"},{"post_id":"ckj1k84r60013s2b9qq4th363","tag_id":"ckj1k84rq002cs2b93hauji10","_id":"ckj1k84rr002gs2b90m8weczg"},{"post_id":"ckj1k84r70014s2b9f3gbja3b","tag_id":"ckj1k84rq002fs2b992e9h0jf","_id":"ckj1k84rr002is2b9kaulbcp5"},{"post_id":"ckj1k84r80016s2b9zydcuvei","tag_id":"ckj1k84rr002hs2b9etxupnop","_id":"ckj1k84rs002ls2b9suey9hzk"},{"post_id":"ckj1k84r80016s2b9zydcuvei","tag_id":"ckj1k84ro0022s2b9da5fn9qb","_id":"ckj1k84rs002ms2b976olergj"},{"post_id":"ckj1k84r90018s2b9ras6os8w","tag_id":"ckj1k84rs002ks2b9jzg706qc","_id":"ckj1k84rs002os2b9imwgi7gb"},{"post_id":"ckj1k84rb001bs2b9lg2z792e","tag_id":"ckj1k84rs002ns2b9qnj0kfwb","_id":"ckj1k84rt002rs2b965zmfk4y"},{"post_id":"ckj1k84rb001bs2b9lg2z792e","tag_id":"ckj1k84rm001vs2b9o315n8qq","_id":"ckj1k84rt002ss2b90qjanlso"},{"post_id":"ckj1k84rc001ds2b9iptmdrng","tag_id":"ckj1k84rm001vs2b9o315n8qq","_id":"ckj1k84ru002vs2b9jcj9ti4y"},{"post_id":"ckj1k84rc001ds2b9iptmdrng","tag_id":"ckj1k84ru002ts2b9d2obnr6y","_id":"ckj1k84ru002ws2b94y69sp1j"},{"post_id":"ckj1k84rf001hs2b97i20mfor","tag_id":"ckj1k84ru002us2b96m93b0f7","_id":"ckj1k84rv002zs2b9ehx3w7jj"},{"post_id":"ckj1k84rf001hs2b97i20mfor","tag_id":"ckj1k84rm001vs2b9o315n8qq","_id":"ckj1k84rv0030s2b9xnkf9y3i"},{"post_id":"ckj1k84rg001js2b9dihq7r67","tag_id":"ckj1k84r80015s2b9akwegkux","_id":"ckj1k84rw0032s2b9k7pnq8dh"},{"post_id":"ckj1k84rg001js2b9dihq7r67","tag_id":"ckj1k84rv002ys2b91oyyyuuk","_id":"ckj1k84rw0033s2b9g2gz7atv"},{"post_id":"ckj1k84rh001ms2b9i09y09db","tag_id":"ckj1k84r80015s2b9akwegkux","_id":"ckj1k84rx0036s2b926tlqm56"},{"post_id":"ckj1k84rh001ms2b9i09y09db","tag_id":"ckj1k84rv0031s2b9ffk41ewp","_id":"ckj1k84rx0037s2b9apn8rhll"},{"post_id":"ckj1k84rh001ms2b9i09y09db","tag_id":"ckj1k84rn001zs2b9kslpe1dk","_id":"ckj1k84rx0039s2b9mexdqzcw"},{"post_id":"ckj1k84ri001os2b9xyiff7ui","tag_id":"ckj1k84ru002us2b96m93b0f7","_id":"ckj1k84ry003as2b9y1u349xi"},{"post_id":"ckj1k84rk001rs2b9iqjfniqt","tag_id":"ckj1k84ro0022s2b9da5fn9qb","_id":"ckj1k84ry003ds2b9wpr77uxh"},{"post_id":"ckj1k84rk001rs2b9iqjfniqt","tag_id":"ckj1k84ry003bs2b98mhhvlzv","_id":"ckj1k84ry003es2b9yntmtory"},{"post_id":"ckj1k84rl001ss2b9pax1z7n1","tag_id":"ckj1k84ry003cs2b9glphhth5","_id":"ckj1k84rz003gs2b9hpvcinaj"},{"post_id":"ckj1k84rl001ss2b9pax1z7n1","tag_id":"ckj1k84ql0009s2b98j26jsls","_id":"ckj1k84rz003hs2b9pezx5bol"},{"post_id":"ckj1k84rl001ss2b9pax1z7n1","tag_id":"ckj1k84ry003fs2b93vk1yv35","_id":"ckj1k84rz003is2b9fojqvdrv"}],"Tag":[{"name":"Jetbrains","_id":"ckj1k84qg0005s2b9ckp9nw5b"},{"name":"开发工具","_id":"ckj1k84ql0009s2b98j26jsls"},{"name":"YApi","_id":"ckj1k84qp000cs2b9059xt21p"},{"name":"网络工具","_id":"ckj1k84qw000ks2b9wip7j7jj"},{"name":"持续交付","_id":"ckj1k84r0000ts2b9248430jg"},{"name":"Jenkins","_id":"ckj1k84r4000ys2b99ngwdmgv"},{"name":"敏捷","_id":"ckj1k84r60012s2b9dibg66x6"},{"name":"树莓派","_id":"ckj1k84r80015s2b9akwegkux"},{"name":"NIO","_id":"ckj1k84ra001as2b9i1a53oo9"},{"name":"Linux","_id":"ckj1k84rm001vs2b9o315n8qq"},{"name":"建站","_id":"ckj1k84rn001zs2b9kslpe1dk"},{"name":"博客","_id":"ckj1k84ro0021s2b9apy8wm4l"},{"name":"分布式","_id":"ckj1k84ro0022s2b9da5fn9qb"},{"name":"Vim","_id":"ckj1k84ro0025s2b9ccry59kh"},{"name":"算法","_id":"ckj1k84rp0027s2b993pf3azl"},{"name":"tmux","_id":"ckj1k84rp0029s2b9dhppzjk8"},{"name":"Python","_id":"ckj1k84rq002cs2b93hauji10"},{"name":"Neovim","_id":"ckj1k84rq002fs2b992e9h0jf"},{"name":"Redis","_id":"ckj1k84rr002hs2b9etxupnop"},{"name":"RESTful","_id":"ckj1k84rs002ks2b9jzg706qc"},{"name":"mirrors","_id":"ckj1k84rs002ns2b9qnj0kfwb"},{"name":"Manjaro","_id":"ckj1k84ru002ts2b9d2obnr6y"},{"name":"Shell","_id":"ckj1k84ru002us2b96m93b0f7"},{"name":"manjaro","_id":"ckj1k84rv002ys2b91oyyyuuk"},{"name":"内网穿透","_id":"ckj1k84rv0031s2b9ffk41ewp"},{"name":"中间件","_id":"ckj1k84ry003bs2b98mhhvlzv"},{"name":"vim","_id":"ckj1k84ry003cs2b9glphhth5"},{"name":"colemak","_id":"ckj1k84ry003fs2b93vk1yv35"}]}}