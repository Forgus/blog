<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何优雅地发布博客</title>
      <link href="/2020/10/24/Manage_blog/"/>
      <url>/2020/10/24/Manage_blog/</url>
      
        <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>1.目前获取信息已经很便利了，但是信息太多，而且重复、错误、干扰信息太多，搜索引擎也很难快速找到自己真正需要的信息，因此建立个人信息检索库相当有必要。<br>2.写博客是一种比较好的管理自己知识库的方式，最好放到万维网上，能随时随地访问，还需要支持全文检索。<br>3.最好能部署在自己的服务器上，那么问题来了，怎样才能拥有自己的服务器？一般都是买的云主机，但是我只是要托管下自己的博客，每个月还要掏一笔服务器的租赁费用，成本太高，不可持续。最好能有一次开销，一劳永逸的方案。</p><h1 id="需求">需求</h1><p>1.搭建个人博客站点，要求低成本，一次性开销。<br>2.响应速度要快，支持全文检索。<br>3.支持markdown格式，发布简单。</p><h1 id="方案">方案</h1><p>树莓派+花生壳+Hexo+Nginx</p><p>1.花生壳花6元就可以买到一个壳域名，支持内网穿透，永久使用，每个月1G流量，个人使用足够。</p><p>2.树莓派Model3A+，成本不到200人民币，功率5w，每个月电费基本可以忽略不计。</p><p>3.Hexo支持markdown，可以生成成静态HTML文件，GitHub上相关主题丰富。</p><p>4.Nginx作为web服务器，实现站点高性能访问。</p><p>Nginx配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> forgus.vicp.io;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /home/pi/blog/public;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /resources &#123;</span><br><span class="line"><span class="attribute">root</span> /home/pi/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /pi-dashboard &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在树莓派4b上安装manjaro</title>
      <link href="/2020/10/01/install_manjaro_on_raspberry_pi4b/"/>
      <url>/2020/10/01/install_manjaro_on_raspberry_pi4b/</url>
      
        <content type="html"><![CDATA[<h2 id="终端快捷键">终端快捷键</h2><p>ctrl+win+t</p><h2 id="配置蓝牙">配置蓝牙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix</span><br><span class="line">systemctl enable bluetooth</span><br><span class="line">systemctl start bluetooth</span><br><span class="line">pulseaudio -k                 </span><br><span class="line">pulseaudio --start</span><br><span class="line">bluetoothctl #连接交互命令</span><br><span class="line">power on #开启控制器电源，默认关闭</span><br><span class="line">scan on # 扫描可配对的蓝牙设备</span><br><span class="line">pair MAC_ADDRESS #配对</span><br><span class="line">connect MAC_ADDRESS #连接</span><br><span class="line">pavucontrol #指定蓝牙音频输出，如果蓝牙没有声音可能是这一步没有设置</span><br></pre></td></tr></table></figure><h2 id="安装中文字体">安装中文字体</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colemak用户的vim配置</title>
      <link href="/2020/09/29/vim_config_for_colemak/"/>
      <url>/2020/09/29/vim_config_for_colemak/</url>
      
        <content type="html"><![CDATA[<p>以下为适用于colemak键盘的vim基础配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">noremap</span> Q :q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-q&gt;</span> :<span class="keyword">qa</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> S :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Undo operations</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">l</span> <span class="keyword">u</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Insert Key</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">k</span> i</span><br><span class="line"><span class="keyword">noremap</span> K I</span><br><span class="line"></span><br><span class="line"><span class="comment">" make Y to copy till the end of the line</span></span><br><span class="line"><span class="keyword">nnoremap</span> Y <span class="keyword">y</span>$</span><br><span class="line"></span><br><span class="line"><span class="comment">" Copy to system clipboard</span></span><br><span class="line"><span class="keyword">vnoremap</span> Y <span class="comment">"+y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Indentation</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt; &lt;&lt;</span><br><span class="line"><span class="keyword">nnoremap</span> &gt; &gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Search</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span><span class="symbol">&lt;CR&gt;</span> :<span class="keyword">nohlsearch</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" === Cursor Movement</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" New cursor movement (the default arrow keys are used for resizing windows)</span></span><br><span class="line"><span class="comment">"     ^</span></span><br><span class="line"><span class="comment">"     u</span></span><br><span class="line"><span class="comment">" &lt; n   i &gt;</span></span><br><span class="line"><span class="comment">"     e</span></span><br><span class="line"><span class="comment">"     v</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">u</span> <span class="keyword">k</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> n h</span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">e</span> <span class="keyword">j</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> i <span class="keyword">l</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">gu</span> gk</span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> ge gj</span><br><span class="line"></span><br><span class="line"><span class="comment">" U/E keys for 5 times u/e (faster navigation)</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> U <span class="number">5</span><span class="keyword">k</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> E <span class="number">5</span><span class="keyword">j</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" N key: go to the start of the line</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">N</span> <span class="number">0</span></span><br><span class="line"><span class="comment">" I key: go to the end of the line</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;silent&gt;</span> I $</span><br><span class="line"></span><br><span class="line"><span class="comment">" Faster in-line navigation</span></span><br><span class="line"><span class="keyword">noremap</span> W <span class="number">5</span><span class="keyword">w</span></span><br><span class="line"><span class="keyword">noremap</span> B <span class="number">5</span><span class="keyword">b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" Ctrl + U or E will move up/down the view port without moving the cursor</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-U&gt;</span> <span class="number">5</span><span class="symbol">&lt;C-y&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-E&gt;</span> <span class="number">5</span><span class="symbol">&lt;C-e&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" === Insert Mode Cursor Movement</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-a&gt;</span> <span class="symbol">&lt;ESC&gt;</span>A</span><br><span class="line"></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" === Command Mode Cursor Movement</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-a&gt;</span> <span class="symbol">&lt;Home&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-e&gt;</span> <span class="symbol">&lt;End&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-p&gt;</span> <span class="symbol">&lt;Up&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-n&gt;</span> <span class="symbol">&lt;Down&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-b&gt;</span> <span class="symbol">&lt;Left&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-f&gt;</span> <span class="symbol">&lt;Right&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;M-b&gt;</span> <span class="symbol">&lt;S-Left&gt;</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;M-w&gt;</span> <span class="symbol">&lt;S-Right&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" === Searching</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="keyword">noremap</span> - <span class="keyword">N</span></span><br><span class="line"><span class="keyword">noremap</span> = n</span><br><span class="line"></span><br><span class="line"><span class="comment">" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)</span></span><br><span class="line"><span class="keyword">noremap</span> su :<span class="keyword">set</span> nosplitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span>:<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">se</span> :<span class="keyword">set</span> splitbelow<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">split</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">sn</span> :<span class="keyword">set</span> nosplitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span>:<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> si :<span class="keyword">set</span> splitright<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">vsplit</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Resize splits with arrow keys</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;up&gt;</span> :<span class="keyword">res</span> +<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;down&gt;</span> :<span class="keyword">res</span> -<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;left&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>-<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;right&gt;</span> :<span class="keyword">vertical</span> <span class="keyword">resize</span>+<span class="number">5</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Place the two screens up and down</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">sh</span> <span class="symbol">&lt;C-w&gt;</span>t<span class="symbol">&lt;C-w&gt;</span>K</span><br><span class="line"><span class="comment">" Place the two screens side by side</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">sv</span> <span class="symbol">&lt;C-w&gt;</span>t<span class="symbol">&lt;C-w&gt;</span>H</span><br><span class="line"></span><br><span class="line"><span class="comment">" Rotate screens</span></span><br><span class="line"><span class="keyword">noremap</span> srh <span class="symbol">&lt;C-w&gt;</span><span class="keyword">b</span><span class="symbol">&lt;C-w&gt;</span>K</span><br><span class="line"><span class="keyword">noremap</span> srv <span class="symbol">&lt;C-w&gt;</span><span class="keyword">b</span><span class="symbol">&lt;C-w&gt;</span>H</span><br><span class="line"></span><br><span class="line"><span class="comment">" Press &lt;SPACE&gt; + q to close the window below the current window</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span>q <span class="symbol">&lt;C-w&gt;</span><span class="keyword">j</span>:q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" === Tab management</span></span><br><span class="line"><span class="comment">" ===</span></span><br><span class="line"><span class="comment">" Create a new tab with tu</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">tu</span> :<span class="keyword">tabe</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" Move around tabs with tn and ti</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">tn</span> :-<span class="keyword">tabnext</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> ti :+<span class="keyword">tabnext</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" Move the tabs with tmn and tmi</span></span><br><span class="line"><span class="keyword">noremap</span> tmn :-<span class="keyword">tabmove</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> tmi :+<span class="keyword">tabmove</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Press space twice to jump to the next '&lt;++&gt;' and edit it</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span><span class="symbol">&lt;LEADER&gt;</span> <span class="symbol">&lt;Esc&gt;</span>/&lt;++&gt;<span class="symbol">&lt;CR&gt;</span>:<span class="keyword">nohlsearch</span><span class="symbol">&lt;CR&gt;</span>c4l</span><br><span class="line"></span><br><span class="line"><span class="comment">" Spelling Check with &lt;space&gt;sc</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span>sc :<span class="keyword">set</span> spell!<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Press ` to change case (instead of ~)</span></span><br><span class="line"><span class="keyword">noremap</span> ` ~</span><br><span class="line"></span><br><span class="line"><span class="comment">" Adjacent duplicate words</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span>dw /\(\&lt;\<span class="keyword">w</span>\+\&gt;\)\_s*\<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> vim </tag>
            
            <tag> colemak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Neovim打造Python IDE</title>
      <link href="/2020/06/06/Use_neovim_as_python_IDE/"/>
      <url>/2020/06/06/Use_neovim_as_python_IDE/</url>
      
        <content type="html"><![CDATA[<h2 id="windows">Windows</h2><h3 id="windows-terminal">windows terminal</h3><h4 id="安装">安装</h4><h4 id="配置">配置</h4><h3 id="powershell">PowerShell</h3><h4 id="配置">配置</h4><h3 id="chocolatey">chocolatey</h3><h4 id="安装">安装</h4><p>1.以管理员身份启动powershell。</p><p>2.执行命令<code>Get-ExecutionPolicy</code>，如结果为“Restricted”，</p><p>则执行<code>Set-ExecutionPolicy Bypass -Scope Process</code>。</p><p>3.接着执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br></pre></td></tr></table></figure><h3 id="vim-plug">vim-plug</h3><p>powershell里执行如下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`</span><br><span class="line">    ni "$(@($env:XDG_DATA_HOME, $env:LOCALAPPDATA)[$null -eq $env:XDG_DATA_HOME])/nvim-data/site/autoload/plug.vim" -Force</span><br></pre></td></tr></table></figure><h3 id="neovim">neovim</h3><h4 id="安装">安装</h4><p>执行<code>choco install neovim</code>进行安装。</p><h4 id="配置">配置</h4><p>切换工作目录：</p><p><code>cd ~\AppData\Local</code></p><p>下载配置文件：</p><p><code>git clone git@github.com:Forgus/nvim.git</code></p><p>切换到开发分支：</p><p><code>cd nvim</code></p><p><code>git checkout dev-qwerty</code></p><p>安装插件：</p><p><code>nvim init.vim</code></p><p><code>:PlugInstall</code></p><p><code>:CocInstall coc-tsserver</code></p><p><code>:CocInstall coc-pyright</code></p><h2 id="mac-os">Mac OS</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Manjaro</title>
      <link href="/2020/05/31/config_manjaro/"/>
      <url>/2020/05/31/config_manjaro/</url>
      
        <content type="html"><![CDATA[<h2 id="切换源">切换源</h2><p>打开配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxcn]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Never</span><br><span class="line"><span class="comment"># 浙大源</span></span><br><span class="line"><span class="attr">Server</span> = https://mirrors.zju.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line"><span class="comment"># Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span></span><br></pre></td></tr></table></figure><p>更新源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -c China</span><br><span class="line">sudo pacman -Syu -y # 耗时操作</span><br><span class="line">sudo pacman -S archlinuxcn-keyring -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置dpi</span></span><br><span class="line">vim ~/.Xresources</span><br><span class="line">Xft.dpi:166</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="软件安装">软件安装</h2><h3 id="fish">fish</h3><h4 id="安装">安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装fish</span></span><br><span class="line">sudo pacman -S fish</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装oh-my-fish</span></span><br><span class="line">git clone https://github.com/oh-my-fish/oh-my-fish</span><br><span class="line">cd oh-my-fish</span><br><span class="line">bin/install --offline</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置fish为默认shell</span></span><br><span class="line">which fish</span><br><span class="line">chsh -s /usr/bin/fish</span><br><span class="line"><span class="meta">#</span><span class="bash"> 天气插件</span></span><br><span class="line">omf install wttr</span><br></pre></td></tr></table></figure><h4 id="配置">配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置主题</span></span><br><span class="line">fish_config</span><br></pre></td></tr></table></figure><h4 id="使用">使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置快捷键</span></span><br><span class="line">alias c clear</span><br><span class="line">funcsave c</span><br><span class="line">alias s screenfetch</span><br><span class="line">funcsave s</span><br></pre></td></tr></table></figure><h3 id="美化">美化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 窗口渲染器</span></span><br><span class="line">sudo pacman -S compton</span><br><span class="line">compton</span><br><span class="line"><span class="meta">#</span><span class="bash"> ui美化</span></span><br><span class="line">sudo pacman -S lxappearance</span><br><span class="line">lxappearance</span><br><span class="line"><span class="meta">#</span><span class="bash"> 动态壁纸</span></span><br><span class="line">sudo pacman -S feh</span><br><span class="line">sudo pacman -S variety</span><br><span class="line">variety</span><br></pre></td></tr></table></figure><h3 id="neovim">neovim</h3><h4 id="安装">安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S neovim</span><br></pre></td></tr></table></figure><h3 id="i3">i3</h3><h4 id="安装">安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="配置">配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/i3/config</span><br><span class="line">bindsym $mod+Return exec alacritty</span><br><span class="line">bindsym $mod+c exec firefox</span><br><span class="line">exec_always variety</span><br><span class="line">exec_always compton</span><br><span class="line">exec_always sleep 1; xmodmap ~/.xmodmap</span><br><span class="line">exec_always kill screenkey</span><br><span class="line">gaps inner 15</span><br><span class="line"><span class="meta">#</span><span class="bash">去边框</span></span><br><span class="line">new_window 1pixel</span><br><span class="line"><span class="meta">#</span><span class="bash">刷新配置</span></span><br><span class="line">Super+Shift+r</span><br></pre></td></tr></table></figure><h4 id="使用">使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分屏</span></span><br><span class="line">Super+return</span><br><span class="line"><span class="meta">#</span><span class="bash"> 水平分屏模式</span></span><br><span class="line">Super+v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 垂直分屏模式</span></span><br><span class="line">Super+h</span><br><span class="line"><span class="meta">#</span><span class="bash">全屏</span></span><br><span class="line">Super+f</span><br><span class="line"><span class="meta">#</span><span class="bash">窗口切换</span></span><br><span class="line">Super+jkl;</span><br><span class="line"><span class="meta">#</span><span class="bash">调整窗口大小</span></span><br><span class="line">Super+r</span><br></pre></td></tr></table></figure><h3 id="alacritty">alacritty</h3><h4 id="安装">安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> alacritty</span></span><br><span class="line">sudo pacman -S alacritty</span><br></pre></td></tr></table></figure><h4 id="配置">配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置终端透明度</span></span><br><span class="line">vim ~/.config/alacritty/alacritty.yml</span><br><span class="line">background_opacity: 0.6</span><br></pre></td></tr></table></figure><h3 id="ranger">ranger</h3><h4 id="安装">安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ranger</span><br></pre></td></tr></table></figure><h3 id="其他">其他</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">pacman 高亮</span></span><br><span class="line">sudo -E vim /etc/pacman.conf</span><br><span class="line">Color</span><br><span class="line"><span class="meta">#</span><span class="bash"> dmenu</span></span><br><span class="line">sudo pacman -S dmenu</span><br><span class="line">Super+d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改建</span></span><br><span class="line">sudo pacman -S xorg</span><br><span class="line">xmodmap -pke &gt; ~/.xmodmap</span><br><span class="line">vim ~/.xmodmap</span><br><span class="line">xev</span><br><span class="line">xmodmap ~/.xmodmap</span><br><span class="line"><span class="meta">#</span><span class="bash"> 中文输入法</span></span><br><span class="line">sudo pacman -S fcitx fcitx-im fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-googlepinyin</span><br><span class="line">vim ~/.xprofile</span><br><span class="line">export GTK_TM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS="@im=fcitx"</span><br><span class="line">reboot</span><br><span class="line">fcitx-configtool</span><br><span class="line"><span class="meta">#</span><span class="bash"> 谷歌浏览器</span></span><br><span class="line">sudo pacman -S chromium</span><br><span class="line"><span class="meta">#</span><span class="bash"> office</span></span><br><span class="line">sudo pacman -S libreoffice</span><br><span class="line"><span class="meta">#</span><span class="bash"> 视频播放软件</span></span><br><span class="line">sudo pacman -S vlc </span><br><span class="line"><span class="meta">#</span><span class="bash"> 状态栏</span></span><br><span class="line">sudo pacman -S polybar</span><br><span class="line"><span class="meta">#</span><span class="bash"> i3-gap3</span></span><br><span class="line">sudo pacman -S i3-gaps</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简明手册</title>
      <link href="/2020/05/14/Use_Python/"/>
      <url>/2020/05/14/Use_Python/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构">数据结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">child_name = <span class="string">'小明'</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">children_name = []</span><br><span class="line">children_name.append(<span class="string">'小刚'</span>)</span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">children = &#123;&#125;</span><br><span class="line">children[<span class="string">'1'</span>,<span class="string">'小刚'</span>]</span><br><span class="line">children[<span class="string">'1'</span>] = <span class="string">'小明'</span></span><br><span class="line"><span class="keyword">del</span> children[<span class="string">'1'</span>]</span><br><span class="line">children = &#123;</span><br><span class="line">  <span class="string">'1'</span>:<span class="string">'小刚'</span>,</span><br><span class="line">  <span class="string">'2'</span>:<span class="string">'小明'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 遍历key-value</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> children.items():</span><br><span class="line">  print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">  print(<span class="string">"Value: "</span> + value)</span><br><span class="line"><span class="comment"># 遍历key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> children.keys():</span><br><span class="line">    print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line"><span class="comment"># 按顺序遍历key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> sorted(children.keys()):</span><br><span class="line">    print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line"><span class="comment"># 遍历值</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> children.values():</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br><span class="line"><span class="comment"># 遍历值并去重</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> set(children.values()):</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><h2 id="函数">函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name,animal_type=<span class="string">'dog'</span>)</span>:</span></span><br><span class="line">  <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">  print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">  print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is"</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">describe_pet(<span class="string">'willie'</span>,animal_type=<span class="string">'cat'</span>)</span><br></pre></td></tr></table></figure><h2 id="面向对象">面向对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">  <span class="string">"""类注释写这里"""</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">    self.make = make</span><br><span class="line">    self.model = model</span><br><span class="line">    self.year = year</span><br><span class="line">    self.odometer_reading = <span class="number">0</span></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">car = Car(<span class="string">'audi'</span>,<span class="string">'a4'</span>,<span class="number">2020</span>)</span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">    super()._init_(make,model,year)</span><br><span class="line"><span class="comment"># 导入类</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car,ElectricCar</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> car</span><br><span class="line"><span class="comment"># 导入模块中所有类</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的搜索算法</title>
      <link href="/2020/05/08/Traversal_Binary_Tree/"/>
      <url>/2020/05/08/Traversal_Binary_Tree/</url>
      
        <content type="html"><![CDATA[<h2 id="深度优先搜索">深度优先搜索</h2><p>深度优先搜索（Depth First Search），一般用递归实现，算法比较巧妙，关键在于寻找遍历的套路。</p><h3 id="前序遍历">前序遍历</h3><h4 id="递归法">递归法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  dfs(x.left);</span><br><span class="line">  dfs(x.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代法">迭代法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  stack.push(x);</span><br><span class="line">  <span class="keyword">while</span>(!stack.empty()) &#123;</span><br><span class="line">    TreeNode node = stack.pop();</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历">中序遍历</h3><p>中序遍历可以按顺序访问二叉搜索树中的节点。</p><h4 id="递归法">递归法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  dfs(x.left);</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  dfs(x.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代法">迭代法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  TreeNode curr = x;</span><br><span class="line">  <span class="keyword">while</span>(curr != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(curr);</span><br><span class="line">      curr = curr.left;</span><br><span class="line">    &#125;</span><br><span class="line">    curr = stack.pop();</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    curr = curr.right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历">后序遍历</h3><h4 id="递归法">递归法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  dfs(x.left);</span><br><span class="line">  dfs(x.right);</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代法">迭代法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  Stack&lt;TreeNode&gt; result = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  stack.push(x);</span><br><span class="line">  <span class="keyword">while</span>(!stack.empty()) &#123;</span><br><span class="line">    TreeNode node = stack.pop();</span><br><span class="line">result.push(node);</span><br><span class="line">    <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(node.letf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!result.empty()) &#123;</span><br><span class="line">    TreeNode node = result.pop();</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先搜索">广度优先搜索</h2><p>广度优先搜索（Breadth First Search），即层序遍历，一般用队列加两层循环实现，外层循环遍历树的层次，内循环遍历每一层的节点。</p><h3 id="自顶向下层序遍历">自顶向下层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  queue.add(x);</span><br><span class="line">  <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> count = queue.size();</span><br><span class="line">    <span class="keyword">while</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      TreeNode node = queue.poll();</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">      <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) queue.add(node.left);</span><br><span class="line">      <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) queue.add(node.right);</span><br><span class="line">      count --;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自底向上层序遍历">自底向上层序遍历</h3><p>可以用自顶向下遍历法的套路，在具体处理上反转结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains产品激活教程</title>
      <link href="/2020/02/17/Active_Jetbrains/"/>
      <url>/2020/02/17/Active_Jetbrains/</url>
      
        <content type="html"><![CDATA[<h3 id="获取专属激活码">获取专属激活码</h3><p><a href="https://zhile.io/custom/license" target="_blank" rel="noopener">https://zhile.io/custom/license</a><br><em>注意：需要Github授权登录，Github账号注册需要超过7天，将使用你的Github用户名作为License name</em></p><h3 id="下载激活工具">下载激活工具</h3><p>地址：<a href="https://xclient.info/s/intellij-idea.html" target="_blank" rel="noopener">https://xclient.info/s/intellij-idea.html</a><br>找到激活工具进行下载，大小不超过2M</p><h3 id="配置intellij-idea">配置IntelliJ IDEA</h3><p>1.将jetbrains-agent.jar文件复制到 /Applications/IntelliJ IDEA.app/Contents/bin/ 目录中；<br>2.用编辑器打开 /Applications/IntelliJ IDEA.app/Contents/bin/idea.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p><h3 id="配置datagrip">配置DataGrip</h3><p>1.将jetbrains-agent.jar文件复制到 /Applications/DataGrip.app/Contents/bin/ 目录中；<br>2.用编辑器打开 /Applications/DataGrip.app/Contents/bin/datagrip.vmoptions 文件，添加 -javaagent:jetbrains-agent.jar 到最后一行；</p>]]></content>
      
      
      
        <tags>
            
            <tag> Jetbrains </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Generator使用教程</title>
      <link href="/2019/10/28/Api_Generator_introduction/"/>
      <url>/2019/10/28/Api_Generator_introduction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前后分离开发模式下，接口文档是否靠谱直接影响开发协作效率，因此文档的时效性和准确性至关重要，但是，文档的维护又是一项琐碎耗时的工作，手工录入不仅麻烦，还存在出错的风险，因此，如果能有自动生成文档的方法，将极大地提升开发效率。</p></blockquote><h1 id="前言">前言</h1><p>一般来讲，接口文档由后端同学维护，而Java是目前主流的后端语言，与之对应的，IDEA是最流行的集成开发环境。基于插件机制，IDEA拥有极强的可扩展性，因此，思路是开发一个IDEA插件，通过插件让手中的IDEA拥有自动生成文档的能力。</p><p>其实，jetbrains插件仓库里已有几款插件可以帮助生成接口文档，但是没有一款插件令我满意，要么无法解析复杂的类结构，要么就是生成的文档格式差强人意，因此，我在借鉴他们的设计的基础上，开发了这款文档生成插件，我将它取名为《Api Generator》。</p><h1 id="安装插件">安装插件</h1><p>Preferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE</p><p><img src="http://forgus.vicp.io/resources/images/install_api_generator.png" alt="img"></p><h1 id="开始使用">开始使用</h1><h2 id="上传rest接口">上传REST接口</h2><p>选择一个Controller类，将光标定位到方法区（方法名或者方法注释），点击鼠标右键，在弹出的菜单项里选择“Generate Api”。如图所示：</p><p><img src="http://forgus.vicp.io/resources/images/upload_yapi.png" alt="img"></p><p>首次使用会弹窗提示输入必要信息：</p><p><img src="http://forgus.vicp.io/resources/images/yapi_server_url.png" alt="img"></p><p>首先输入YApi服务器部署地址，接着输入项目token：</p><p><img src="http://forgus.vicp.io/resources/images/yapi_token.png" alt="img"></p><p>点击OK，则插件会自动配置，然后自动生成文档并上传到YApi。上传成功后，IDE右下角会弹出提示框：</p><p><img src="http://forgus.vicp.io/resources/images/upload_yapi_success.png" alt="img"></p><p>上传效果如图：</p><p><img src="http://forgus.vicp.io/resources/images/yapi_demo.png" alt="img"></p><h3 id="解析规则">解析规则</h3><h4 id="入参解析">入参解析</h4><p><img src="http://forgus.vicp.io/resources/images/rest_param_resolve.png" alt="img"></p><p><img src="http://forgus.vicp.io/resources/images/rest_param_resolve_result.png" alt="img"></p><h4 id="响应解析">响应解析</h4><p><img src="http://forgus.vicp.io/resources/images/rest_response_resolve.png" alt="img"></p><p><img src="http://forgus.vicp.io/resources/images/rest_response_resolve_result.png" alt="img"></p><p>插件默认保存分类为api_generator，可以在配置项中修改默认分类：</p><p>Preferences → Other Settings → Api Generator Setting → YApi Setting → Default save category，如图所示：</p><p><img src="http://forgus.vicp.io/resources/images/save_directory.png" alt="img"></p><p>如果勾选了选项“Classify API automatically”，则插件会自动从类注释里抽取分类名，自动创建并保存。效果如下：</p><p><img src="http://forgus.vicp.io/resources/images/classify_auto.png" alt="img"></p><p><img src="http://forgus.vicp.io/resources/images/category_resolve.png" alt="img"></p><p><img src="http://forgus.vicp.io/resources/images/category_resolve_result.png" alt="img"></p><p>备注:每个项目只需配置一次，插件会自动持久化配置项，下次打开无需再次配置。</p><h3 id="token获取方法">token获取方法</h3><p>登录yapi，选择对应项目，找到设置→ token配置，点击复制即可。</p><p><img src="http://forgus.vicp.io/resources/images/get_token.png" alt="img"></p><h2 id="生成接口文档">生成接口文档</h2><p>如果在接口类中进行文档生成操作，则插件会将文档以markdown的形式输出，默认保存在当前项目的target目录下，如图：</p><p><img src="http://forgus.vicp.io/resources/images/api_resolve.png" alt="img"></p><p>生成的接口文档效果图：</p><p><img src="http://forgus.vicp.io/resources/images/api_resolve_result.png" alt="img"></p><h2 id="生成pojo文档">生成POJO文档</h2><p>操作同上，步骤略。</p><h1 id="插件设置">插件设置</h1><p>自定义配置项： Preferences —&gt; Other Settings —&gt; Api Generator Setting</p><table><thead><tr><th>配置项</th><th>含义</th><th>详细解释</th></tr></thead><tbody><tr><td>Exclude Fields</td><td>过滤字段（多个字段以&quot;,&quot;分隔）</td><td>该配置项功能类似JSONField，用于过滤不想被解析的字段，多用于排除二方包里的干扰字段</td></tr><tr><td>Save Directory</td><td>markdown文档保存目录（绝对路径）</td><td>用于配置生成的markdown形式的接口文档的保存路径，默认保存在当前项目的target目录</td></tr><tr><td>Indent Style</td><td>二级字段缩进前缀</td><td>生成的markdown文档是类似于json schema的字段表格，涉及类型是对象的字段，展示上做缩进处理，默认缩进前缀是“└”</td></tr><tr><td>Overwrite exists docs</td><td>是否覆盖同名markdown文档</td><td>如果生成的markdown文件已存在，会弹框提示是否覆盖，勾选该选项，则直接覆盖不提示</td></tr><tr><td>Extract filename from doc comments</td><td>是否从javadoc抽取文件名</td><td>生成的markdown文件默认是方法名，勾选该选项，将从注释里抽取文件名</td></tr><tr><td>YApi server url</td><td>YApi部署服务器地址</td><td>内网部署的yapi平台的域名，如：<a href="http://yapi.xxx.com" target="_blank" rel="noopener">http://yapi.xxx.com</a></td></tr><tr><td>Project token</td><td>项目token</td><td>接口对应的yapi项目的token</td></tr><tr><td>Default save category</td><td>默认保存分类</td><td>插件生成的yapi文档保存位置，默认api_generator</td></tr><tr><td>Classify API automatically</td><td>是否自动分类</td><td>勾选该选项后，生成文档时插件将从controller类注释里抽取模块名，并在yapi上自动创建对应分类保存接口</td></tr></tbody></table><h1 id="后记">后记</h1><p>笔者在开发这款插件之前，也是先用了一段时间别人写的插件，</p><p>使用过的插件有：Yapiupload、idea-yapi、EasyYapi、RedsoftYapiUpload等。</p><p>这些插件并不完美，或多或少存在一些问题，要么关键功能缺失，要么用户体验较差，以下是关键功能对比：</p><table><thead><tr><th style="text-align:left">插件</th><th style="text-align:left">智能解析</th><th style="text-align:left">无入侵</th><th style="text-align:left">markdown</th><th style="text-align:left">智能选中</th><th style="text-align:left">json5</th><th style="text-align:left">常用注解</th></tr></thead><tbody><tr><td style="text-align:left">Api Generator</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">EasyYapi</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td></tr><tr><td style="text-align:left">Yapiupload</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td></tr><tr><td style="text-align:left">idea-yapi</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td></tr><tr><td style="text-align:left">RedsoftYapiUpload</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">✘</td><td style="text-align:left">√</td></tr></tbody></table><p>从上面可以看出，“Api Generator”是集大成者，因为在立项之初就参考了它们的设计，取其精华，去其糟粕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> YApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YApi简介</title>
      <link href="/2019/09/28/YApi_Introduction/"/>
      <url>/2019/09/28/YApi_Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="yapi是什么">YApi是什么？</h2><p>​YApi是去哪儿网大前端团队开发的一个接口管理平台，汲取了Rap、Nei、Easy-Mock等产品的设计灵感，同时提供了类postman、restlet等工具的调试能力，打通了前后端分离开发模式下的接口开发流程，解决了协作上的痛点，免费、开源，支持内网部署。</p><p>​简而言之，YApi = 接口文档 + 接口调试 + mockserver + 自动化测试。</p><h2 id="为什么用yapi">为什么用YApi？</h2><p>​相比较Rap，YApi对HTTP的支持更加全面，并且在提供文档托管能力的基础上，提供了接口调试的功能。</p><p>​同时，利用单一数据源的机制，在调试接口的过程中，如果想修改接口定义，必须先修改接口文档，这一机制又保证了文档的时效性，能够防止出现后端自测完接口，文档忘记更新，导致前端白忙活的情况。</p><p>​除此之外，YApi提供了极简的可视化操作界面，简单易用，功能强大，另外，基于插件机制和开放api，使得它的可扩展性非常高，可以满足各种定制化需求。</p><h3 id="后端提效">后端提效</h3><p>​YApi支持基于json5格式的请求体和响应体数据结构定义，相比较Rap的基于json-schema的方式，接口录入效率更高，json5格式也更加便于测试人员copy数据结构跑自己的测试用例，推荐使用。开启方法：选择项目-&gt; 设置 -&gt; 开启json5。</p><p>​YApi内嵌了Chrome，可以直接基于文档发起http请求，并且能够根据接口定义预先设置好请求体数据，比单独利用postman等工具进行调试要更加高效。</p><h3 id="前端提效">前端提效</h3><p>​YApi提供了强大的Mock能力，在提供基本Mock能力的同时，还支持Mock期望的编写。</p><p>​Mock期望是什么？Mock期望可以通过设置，根据不同请求参数返回不同的响应数据，也就是提供了可编程的动态Mock的能力，模拟真实响应再也不是难题。有了Mock期望功能，前端同学可以这么说：给我一份准确的接口文档，我能保证接口响应处理没有bug，联调？不存在的。</p><p>详见<a href="https://hellosean1025.github.io/yapi/documents/adv_mock.html#mock-%E6%9C%9F%E6%9C%9B" target="_blank" rel="noopener">Mock期望官方文档</a></p><h3 id="测试提效">测试提效</h3><p>​据我所了解到的，目前测试人员一般是通过JMeter跑自动化测试用例，一般需要从外部粘贴预先写好的请求体进行用例编写，效率较低。</p><p>​YApi提供了可视化的测试用例编写界面，不懂开发也能写用例，并且预设请求数据，无需重复录入，只需修改必要的数据即可。同时，YApi支持编写具有前后参数依赖的接口的测试用例，因此，用例也具备了可编程的动态测试能力，一个用例覆盖所有场景，再也不需要维护一大堆相似用例了。</p><p>详见<a href="https://hellosean1025.github.io/yapi/documents/case.html" target="_blank" rel="noopener">自动化测试官方文档</a></p><h3 id="关于联调">关于联调</h3><p>如果后端同学利用好YApi，开发完都自测确保定义的接口符合预期，前端利用好mock期望，我相信前端同学的工作将更加高效，Bug率也将更低，同时联调将会是非常薄的一层，如果配合好了说不定还能玩下持续集成（按接口维度集成，而不是版本）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> YApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正确理解RESTful API</title>
      <link href="/2019/05/12/Understand_RESTful_API/"/>
      <url>/2019/05/12/Understand_RESTful_API/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“你总提及的那个词，它的含义与你想表达的意思并不一样。”</p></blockquote><h2 id="前言">前言</h2><p>眼下，在技术圈，REST俨然已经成为一个时髦的流行词汇，很多人声称自己设计的API是&quot;RESTful API&quot;。但据我观察，大部分人对REST的真正含义知之甚少，很多人对REST的一些核心概念尚未真正理解，甚至存在误解。那么，到底什么是REST，什么样的API可以叫做”RESTful API“呢？本文试图回答这两个问题。</p><h2 id="rest">REST</h2><h3 id="来源">来源</h3><p>REST一词来源于<a href="http://www.ics.uci.edu/~fielding/" target="_blank" rel="noopener">Roy Thomas Fielding</a>在2000年发表的<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">博士论文</a>，是&quot;Representational State Transfer&quot;的缩写，这个词组可以翻译为&quot;表述性状态转移&quot;。</p><h3 id="概念">概念</h3><p>REST是一种为分布式超媒体系统设计的架构风格。万维网是REST架构风格的一个应用实例。</p><h3 id="特点">特点</h3><ul><li>客户-服务器</li><li>无状态</li><li>缓存</li><li>统一接口</li><li>分层系统</li><li>按需代码</li></ul><h3 id="架构约束">架构约束</h3><p>REST架构风格区别于其他基于网络的架构风格的核心特征是，它强调<strong>组件</strong>之间要有一个统一的接口。实现与它们所提供的服务是解耦的，这促进了独立的可进化性。为了获得统一的接口，需要有多个架构约束来指导组件的行为。<br>REST由四个接口架构约束来定义：</p><ul><li><strong>资源</strong>的识别</li><li>通过<strong>表述</strong>来操作资源</li><li>自描述的消息</li><li><strong>超媒体</strong>作为应用状态的引擎。</li></ul><h4 id="组件">组件</h4><p>REST组件可根据它们在整个应用动作中的角色来进行分类，如下表所示：</p><table><thead><tr><th>组件</th><th>例子</th></tr></thead><tbody><tr><td>origin server</td><td>Apache httpd</td></tr><tr><td>gateway</td><td>Nginx</td></tr><tr><td>proxy</td><td>Netscape代理</td></tr><tr><td>user agent</td><td>web浏览器</td></tr></tbody></table><p>统一接口理解起来比较抽象，这里，我们拿origin server 和 user agent举例说明，前者可以理解为服务器，后者可以理解为客户端，基于HTTP的REST接口，客户端并不关心提供接口的服务端是采用何种语言编写，也不关心服务端的架构，因此在接口协议不变的情况下，客户端和服务器可以独立进化，因此达到解耦。</p><h4 id="数据元素">数据元素</h4><p>REST的关键方面之一是架构的数据元素的性质和状态。REST聚焦于分享对于数据类型的理解，但是对于作为标准化接口暴露的操作的范围进行了限制。REST组件之间通过以一种数据格式移交资源的表述来进行通信。<br>REST的数据元素如下表所示：</p><table><thead><tr><th>数据元素</th><th>现代web实例</th></tr></thead><tbody><tr><td>资源</td><td>一份文档或一张图片</td></tr><tr><td>资源标识符</td><td>URL、URN</td></tr><tr><td>表述</td><td>HTML、JSON</td></tr><tr><td>表述元数据</td><td>媒体类型</td></tr></tbody></table><h4 id="资源">资源</h4><p>任何能够被命名的信息都能够作为一个资源，任何一个URL都应该符合资源的定义。</p><h4 id="表述">表述</h4><p>某个资源的当前状态或预期状态。实例：HTTP消息实体。</p><h4 id="媒体类型">媒体类型</h4><p>表述的数据格式被称为媒体类型。</p><h4 id="超媒体">超媒体</h4><p><strong>包含原生超链接元素的媒体类型，称为超媒体类型，简称超媒体。</strong></p><p>这个定义比较抽象，你可以这样来理解：<br>超媒体是对类似于HTML链接、表单等的事物抽象出来的通用术语，服务器端可以通过这种技术来向客户端说明下一步的操作。<br>REST的灵魂HATEOAS（超媒体作为应用状态的引擎）该如何理解呢？<br>回想一下我们是如何浏览Web的，是不是大体上可以总结为要么填写表单要么访问各种链接？<br>我们所说的超媒体作为应用状态的引擎，类比的就是这种场景。</p><h2 id="restful-api">RESTful API</h2><h3 id="restful架构">RESTful架构</h3><p>如果一个架构满足REST约束，就称它为RESTful架构。<br>同理，如果一个Web API满足REST约束，就称它为RESTful API。</p><h3 id="web-api落后于web">Web API落后于Web</h3><p>现今大部分的API都有着一个很大的问题：一旦部署，它们将无法改变。<br>它们通常有如下几个特征：</p><ul><li>Web API经常有大量的阅读文档来告诉你API提供者是如何为不同的接口设计URL的。在REST的世界中，将有关构造URL的信息放到单独的阅读文档中违背了连通性和自描述信息的原则。</li><li>现今的Web API呈现资源的方式更像是一个巨型的选项菜单，而不是一张相互连通的网。这使得API使用者很难了解资源之间的相互影响。</li><li>要集成一个新的API不可避免地需要编写新的定制化软件，或者安装别人编写的一次性的代码库。</li><li>当Web API发生了变化以后，定制化的API客户端就不能正常使用了，并且需要维护者为此进行一些代码修复。</li></ul><h3 id="超媒体的好处">超媒体的好处</h3><p>上文简单列举了现今大部分API存在的一些问题，这些问题通常也比较难以简单解决，尤其是最后两个问题，相当棘手。<br>如何解决？超媒体正是解决之道，利用超媒体，可以构建因时而变的服务。<br>当API发生变化之后，API提供者不再需要考虑是否要兼容旧的API版本，而是可以像Web开发者一样，在客户端无感知的情况下平滑升级API。因为基于超媒体约束，API提供者和消费者是解耦的，就好比针对接口编程和针对实现编程的差异。<br>因此，利用超媒体，可以创建可不断演进的超媒体应用。</p><h3 id="超媒体很难">超媒体很难</h3><p>尽管超媒体是解决现今一些API痛点问题的关键，但大部分API提供者并没有使用它。其中的原因，除了难以理解之外，还有一个更重要的因素：语义挑战。</p><h4 id="语义挑战">语义挑战</h4><p>回想一下我们是如何上网的：给我们一个网址，不需要借助额外的说明文档，我们就可以愉快并且顺利地进行网上冲浪了，我们点击了一些页面的超链接或者提交了某个表单，都是对资源的操作，要么从一个资源跳到另一个资源，要么改变了资源的状态，我们访问网站的过程非常顺利，这要归功于一个运行速度很慢但是又非常昂贵的硬件：人。因为人类可以理解表单背后的语义信息，以及一个超链接即将跳转的去处，而这却是计算机的弱项。</p><p>RESTful API的目标是没有人类参与的前提下完成相应的工作。但是我们该如何编写程序让计算机来决定单击哪个链接呢？计算机可以解析HTML标签<code>&lt;a href=&quot;/messages&quot;&gt;Get Started&lt;/a&gt;</code>。但是它并不理解&quot;Get Started&quot;这个词组。如果提供的自描述信息不能被软件理解，我们又何苦设计这种提供自描述信息的API呢？</p><p>RESTful API设计最大的挑战是：消除&quot;理解文档的结构&quot;和&quot;理解文档的含义&quot;之间的语义鸿沟。即：语义挑战。</p><p>目前，这方面的进展非常小，我们也不可能完全解决它。</p><h2 id="如何达成rest">如何达成REST</h2><p>正是因为完全符合Fielding博士REST约束的架构很难实现，目前应用REST的成功案例也仅有一个万维网。</p><p>Richardson在考察了数百种web service设计案例之后，提出了一种成熟度模型，用来评估一个web service接近REST的程度。</p><h3 id="richardson成熟度模型">Richardson成熟度模型</h3><p><img src="http://forgus.vicp.io/resources/images/maturity_model.png" alt="img"></p><p>如图所示，该成熟度模型用4个层级来评估一个web service满足REST约束的程度，分别是：</p><ul><li>第0级：基于HTTP协议</li><li>第1级：抽象资源</li><li>第2级：利用HTTP动词</li><li>第3级：超媒体控制</li></ul><h4 id="第0级基于http协议">第0级：基于HTTP协议</h4><p><img src="http://forgus.vicp.io/resources/images/level_zero.png" alt="level_zero"></p><p>这一级的web service仅仅将HTTP当做一种传输协议来使用，通常只有一个URI，只使用POST或GET方法，</p><p>使用方式上更像远程过程调用。</p><h4 id="第1级有清晰的资源抽象">第1级：有清晰的资源抽象</h4><p><img src="http://forgus.vicp.io/resources/images/level_one.png" alt="img"></p><p>这一级的web service不再使用单一URI，而是使用很多不一样的URI来映射不同的接口，初步具有了资源的概念，但一个URI通常依旧只使用GET或POST其中一种方法。</p><h4 id="第2级合理使用http动词">第2级：合理使用HTTP动词</h4><p><img src="http://forgus.vicp.io/resources/images/level_two.png" alt="img"></p><p>这一级的web service除了严格按照ROA（Resource-Oriented Architecture，面向资源架构）来设计URI，更加充分地利用了HTTP动词的语义，每一个URI可支持多个不同的HTTP方法，用来映射对资源的不同操作。</p><h4 id="第3级能够完美支持hateoas">第3级：能够完美支持HATEOAS</h4><p><img src="http://forgus.vicp.io/resources/images/level_three.png" alt="img"></p><p>这一级的web service在第2级的基础上应用了超媒体类型，在资源表述中加入了自描述的消息和超媒体控件，实现了超文本驱动，即HATEOAS（超媒体作为应用状态的引擎）。</p><h2 id="结束语">结束语</h2><p>正是因为设计出完全满足REST约束的API很难，目前大部分的Web API还停留在第1级或第2级的阶段，但是REST是值得我们追求的，因为它是构建可不断演进的API的解决方案。<br>目前来说，只要我们大体上能朝着第3级成熟度去努力，先部分拥抱REST的一些约束，使我们的API能够达到第2级，快速解决手头的一些问题，就可以认为这是一个RESTful API了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Redis实现分布式锁</title>
      <link href="/2019/04/01/Use_Redis_Implement_Distributed_Lock/"/>
      <url>/2019/04/01/Use_Redis_Implement_Distributed_Lock/</url>
      
        <content type="html"><![CDATA[<h3 id="用setnx-get-getset做分布式锁">用SETNX、GET、GETSET做分布式锁</h3><h4 id="getset命令">GETSET命令</h4><p>该命令接收两个参数：key，value。命令效果为，设置key的值为value，同时返回该key存储的旧值。该操作是原子操作。</p><h4 id="使用步骤">使用步骤</h4><ol><li><p>计算expireTime = 当前时间 + 过期超时时间，执行SETNX key expireTime，如果返回1，则代表获取锁成功；如果返回0，</p><p>则没有获取到锁，执行第2步。</p></li><li><p>GET key 获取oldExpireTime，并与当前时间进行比较，如果小于当前时间，则认为这个锁已经超时，可以允许别的请求重新获取，执行第3步。</p></li><li><p>计算newExpireTime = 当前时间 + 过期超时时间，执行GETSET key，newExpireTime 会返回currentExpireTime。</p></li><li><p>判断currentExpireTime 与 oldExpireTime是否相等，如果相等，说明获取锁成功，如果不相等，说明获取锁失败。</p></li><li><p>获取锁之后，当前线程执行业务处理，处理完毕后，应检查锁对应的过期时间是否大于当前时间，如果是，则执行DEL命令释放锁。</p></li></ol><h4 id="伪代码">伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtil</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> expireTime = System.currentTimeMillis() + expire;</span><br><span class="line">        <span class="keyword">long</span> status = redisService.setnx(key, String.valueOf(expireTime));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class="string">"0"</span>));</span><br><span class="line">        <span class="keyword">if</span>(oldExpireTime &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">//超时</span></span><br><span class="line">            <span class="keyword">long</span> newExpireTime = System.currentTimeMillis() + expire;</span><br><span class="line">            <span class="keyword">long</span> currentExpireTime = Long.parseLong(redisService.getSet(key, String.valueOf(newExpireTime)));</span><br><span class="line">            <span class="keyword">if</span>(currentExpireTime == oldExpireTime) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">(String key)</span> </span>&#123;    </span><br><span class="line">        RedisService redisService = SpringUtils.getBean(RedisService.class);    </span><br><span class="line">        <span class="keyword">long</span> oldExpireTime = Long.parseLong(redisService.get(key, <span class="string">"0"</span>));   </span><br><span class="line">        <span class="keyword">if</span>(oldExpireTime &gt; System.currentTimeMillis()) &#123;        </span><br><span class="line">            redisService.del(key);    </span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://www.cnblogs.com/seesun2012/p/9214653.html" target="_blank" rel="noopener">原文链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java NIO 缓冲区</title>
      <link href="/2019/03/24/Java_NIO_Buffer/"/>
      <url>/2019/03/24/Java_NIO_Buffer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java NIO 缓冲区和通道配合使用。如你所知，数据可以从通道读进缓冲区，也可以从缓冲区写进通道。<br>缓冲区本质上是一块用于数据读写的内存。这块内存被包装成NIO Buffer对象，并提供了一系列的方法使得操作内存变得更加容易。</p></blockquote><h2 id="buffer的简单用法">Buffer的简单用法</h2><p>用Buffer读写数据一般分为以下4个步骤：</p><ol><li>将数据写入Buffer</li><li>调用buffer.flip()方法</li><li>从Buffer读取数据</li><li>调用buffer.clear()方法或者buffer.compact()方法</li></ol><p>当你往一个buffer里写数据的时候，buffer会记录你已经写了多少数据。一旦你需要读取数据，你需要调用flip()方法将buffer从写模式切换为读模式。在读模式下，你可以读取之前写入到buffer的所有数据。</p><p>一旦你已经读完了所有数据，你需要情况缓冲区，使之可以再次被写入。有两种方法可以清理buffer：调用clear()方法或者调用compact()方法。clear()方法会清空整个缓冲区。compact()方法只清除已经读过的数据。任何未被读取的数据被移动到缓冲区的起始处，之后数据将从那些未读数据的后面位置开始写入。</p><p>以下是一个简单的Buffer使用举例：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">RandomAccessFile</span> aFile = new RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">FileChannel</span> inChannel = aFile.getChannel()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//create <span class="keyword">buffer </span>with capacity of <span class="number">48</span> <span class="keyword">bytes</span></span><br><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">buf </span>= <span class="keyword">ByteBuffer.allocate(48);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">int </span><span class="keyword">bytesRead </span>= inChannel.read(<span class="keyword">buf); </span>//read into <span class="keyword">buffer.</span></span><br><span class="line"><span class="keyword">while </span>(<span class="keyword">bytesRead </span>!= -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">buf.flip(); </span> //make <span class="keyword">buffer </span>ready for read</span><br><span class="line"></span><br><span class="line">  <span class="meta">while</span>(<span class="keyword">buf.hasRemaining())&#123;</span></span><br><span class="line"><span class="keyword"> </span>     System.out.print((char) <span class="keyword">buf.get()); </span>// read <span class="number">1</span> <span class="keyword">byte </span>at a time</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">buf.clear(); </span>//make <span class="keyword">buffer </span>ready for writing</span><br><span class="line">  <span class="keyword">bytesRead </span>= inChannel.read(<span class="keyword">buf);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">aFile.close();</span></span><br></pre></td></tr></table></figure><h2 id="buffer的capacityposition和limit">Buffer的Capacity，Position和Limit</h2><p>buffer本质上是一块可读写的内存区域。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p><p>为了理解buffer的工作原理，你需要熟悉下buffer的三个属性。它们是：</p><ul><li>capacity</li><li>position</li><li>limit</li></ul><p><code>position</code>和<code>limit</code>的含义取决于buffer是处于读模式还是写模式。<code>capacity</code>则在读模式和写模式下拥有相同的含义。下文会详细解释，先看下原理图：</p><p><img src="http://tutorials.jenkov.com/images/java-nio/buffers-modes.png" alt></p><h3 id="capacity">Capacity</h3><p>作为一块内存区域，buffer有一个固定的大小值，称为&quot;capacity&quot;。你最多可以往buffer里写入capacity个byte、long、char等类型的数据。一旦buffer满了，在你往你写入更多数据前，你需要清空它(通过读取数据或者清除数据)。</p><h3 id="position">Position</h3><p>当往buffer里写数据时，position表示当前的位置。初始的position值为0。当一个byte、long等类型数据写到buffer后，position会向前移动到下一个可插入数据的buffer单元。position最大可为capacity - 1。</p><p>当从buffer读数据时，也是从某个特定位置读。当你将buffer从写模式切换到读模式，position被重置为0。这样读数据的时候就从position所在位置往前移动指向下一个位置进行数据读取。</p><h3 id="limit">Limit</h3><p>limit在buffer写模式里的含义是你最多可以写入的数据量。写模式下limit的值等于buffer的capacity。</p><p>当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）</p><h2 id="缓冲区类型">缓冲区类型</h2><p>Java NIO 有以下缓冲区类型：</p><ul><li>ByteBuffer</li><li>MappedByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>如你所见，这些buffer代表了不同的数据类型。换句话说，它们可以让你在缓冲区里以char，short，int，long，float或者double类型来处理字节。</p><p>MappedByteBuffer有一点特殊，会单独介绍。</p><h2 id="分配缓冲区">分配缓冲区</h2><p>为了获得一个Buffer对象你必须先为它分配内存。每一个buffer类都有一个allocate()方法用来完成这项工作。以下是一个用<code>ByteBuffer</code>分配内存的例子，缓冲区容量大小48字节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br></pre></td></tr></table></figure><p>这是另一个例子，用<code>CharBuffer</code>类分配1024个字符大小的缓冲区：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharBuffer buf = CharBuffer.allocate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h2 id="向缓冲区写数据">向缓冲区写数据</h2><p>有两种方式可以往一个buffer里写数据：</p><ol><li>从Channel往buffer里写数据。</li><li>通过buffer的<code>put()</code>方法直接往buffer里写数据。</li></ol><p>以下是一个从Channel往buffer里写数据的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf); <span class="comment">//read into buffer.</span></span><br></pre></td></tr></table></figure><p>这是另一个例子，通过<code>put()</code>方法往buffer里写数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.put(<span class="number">127</span>)</span><br></pre></td></tr></table></figure><p>有很多其他版本的<code>put()</code>方法，允许你以各种不同的方式往buffer里写数据。比如，从指定位置开始写入，或者以字节数组的方式写入。可以查看JavaDoc获取更多buffer实现的细节。</p><h3 id="flip">flip()</h3><p><code>flip()</code>方法用于将buffer从写模式切换成读模式。调用flip()方法会将position重设为0，同时将limit设置为先前position所在位置的值。</p><p>换句话说，position现在标记的是读取的位置，而limit标记的是有多少字节，字符被写进了buffer——有多少字节，字符可以被读取。</p><h2 id="从缓冲区读数据">从缓冲区读数据</h2><p>有两种方式可以从缓冲区读取数据：</p><ol><li>将数据从buffer读进channel。</li><li>用get()方法直接从buffer读取数据。</li></ol><p>以下是一个将数据从buffer读进channel的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read from buffer into channel.</span></span><br><span class="line"><span class="keyword">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure><p>以下则是用get()方法从buffer读取数据的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure><p>有很多其他版本的get()方法，允许你以各种不同的方式从buffer读取数据。比如，从指定位置开始读取，或者以字节数组的方式读取。可以查看JavaDoc获取buffer实现的更多信息。</p><h3 id="rewind">rewind()</h3><p>Buffer.rewind()方法将position设置为0，这样你可以重新读取buffer里的所有数据。limit保留未触碰的，这样仍然标记有多少元素(字节，字符等)可以从buffer读取。</p><h3 id="clear和compact">clear()和compact()</h3><p>一旦你已经完成了从buffer里读取数据的工作，你必须让buffer做好再次写入的准备。这可以通过调用clear()方法或者compact()。</p><p>如果调用clear()方法，position被设置为0，limit被设置为容量大小。换句话说，缓冲区被清空了。缓冲区里的数据没有被清除。只是这些标记告诉我们可以从哪里开始往buffer里写数据。</p><p>如果缓冲区里还有未读的数据，当你调用clear()方法时，数据会被&quot;遗忘&quot;，这意味着你将不再有任何标记可以告知你哪些数据已被读取，哪些数据还未被读取。</p><p>如果缓冲区里仍然有未读的数据，而你想要在之后继续读取，因为目前需要进行一些写操作，那么可以用compact()方法来取代clear()。</p><p>compact()方法会复制所有未读的数据放到缓冲区的开始位置。然后它会将position设置在最后未读元素的下一个位置。limit属性依然被设置为容量大小，就像clear()方法一样。现在buffer已经做好了写入的准备，而你不会覆盖未读的数据。</p><h3 id="mark和reset">mark()和reset()</h3><p>你可以通过调用Buffer.mark()方法标记buffer里的某个位置。然后你在之后可以重置position到标记的位置。举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buffer.mark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//call buffer.get() a couple of times, e.g. during parsing.</span></span><br><span class="line"></span><br><span class="line">buffer.reset();  <span class="comment">//set position back to mark.</span></span><br></pre></td></tr></table></figure><h3 id="equals和compareto">equals()和compareTo()</h3><p>比较两个缓冲区可以通过equals()方法和compareTo()方法。</p><h4 id="equals">equals()</h4><p>两个buffer相等的条件如下：</p><ol><li>类型相同(字节，字符，整形等)。</li><li>buffer里有等量的剩余数据。</li><li>所有剩余的数据相等。</li></ol><p>如你所见，equals()方法仅比较buffer的一部分，并不比较里面所有的单个元素。实际上，它只比较buffer里剩余的数据。</p><h4 id="compareto">compareTo()</h4><p>compareTo()方法比较两个buffer剩余元素，用于例如常规排序。一个buffer比另一个buffer小的条件如下：</p><ol><li>buffer的首个元素小于另一个buffer。</li><li>所有元素相等，但是第一个buffer比另一个buffer更早用完(它拥有更少的元素)。</li></ol><hr><p><a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="noopener">原文链接</a> 作者：Jakob Jenkov</p>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java NIO 通道</title>
      <link href="/2019/03/20/Java_NIO_Channel/"/>
      <url>/2019/03/20/Java_NIO_Channel/</url>
      
        <content type="html"><![CDATA[<p>Java NIO 通道和流很像，但有一些区别：</p><ul><li>你既可以往通道里写数据，也可以从通道读数据。流一般只支持读或写。</li><li>通道可以支持异步读写。</li><li>通道要么将数据读入缓冲区，要么从缓冲区写数据到通道。</li></ul><p>上文提到，你可以从通道将数据读入缓冲区，也可以从缓冲区将数据写入通道。以下是一个示意图：</p><p><img src="http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png" alt></p><h2 id="通道实现">通道实现</h2><p>以下是Java NIO框架里最重要的几个通道的具体实现：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>FileChannel 用于文件之间的数据读写。</p><p>DatagramChannel 可以在网络上基于UDP进行数据读写。</p><p>SocketChannel 可以在网络上基于TCP进行数据读写。</p><p>ServerSocketChannel 允许你监听TCP连接请求，就像web服务器那样。对于每一个连接请求会创建一个SocketChannel。</p><h2 id="通道简单例子">通道简单例子</h2><p>以下是一个使用FileChannel将一些数据读进一个缓冲区的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile aFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">   FileChannel inChannel = aFile.getChannel();</span><br><span class="line"></span><br><span class="line">   ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> bytesRead = inChannel.read(buf);</span><br><span class="line">   <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">"Read "</span> + bytesRead);</span><br><span class="line">     buf.flip();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(buf.hasRemaining())&#123;</span><br><span class="line">         System.out.print((<span class="keyword">char</span>) buf.get());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     buf.clear();</span><br><span class="line">     bytesRead = inChannel.read(buf);</span><br><span class="line">   &#125;</span><br><span class="line">   aFile.close();</span><br></pre></td></tr></table></figure><p>这里要留意下<code>buf.flip()</code>的调用。首先将数据读进缓冲区。然后反转它。接着你就可以从里面往外读数据。在下一节我将会进一步讲解更加详细的细节。</p><hr><p><a href="http://tutorials.jenkov.com/java-nio/channels.html" target="_blank" rel="noopener">原文链接</a> 作者：Jakob Jenkov</p>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java NIO 概览</title>
      <link href="/2019/03/10/Java_NIO_Overview/"/>
      <url>/2019/03/10/Java_NIO_Overview/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java NIO 由以下核心组件构成：</p><ul><li>通道</li><li>缓冲区</li><li>选择器</li></ul><p>Java NIO 框架包含了很多类和组件，但是Channel，Buffer 和 Selector 是核心。其他的组件，像 Pipe 和 FileLock 只不过是结合了那三个组件作为工具类来使用。所以，在这篇概览里我会着重介绍这三个组件。</p></blockquote><h2 id="通道和缓冲区">通道和缓冲区</h2><p>一般地，NIO框架里所有的IO操作都始于一个通道。一个通道有点像一个流。数据可以从通道读入缓冲区，也可以从缓冲区写入通道。如图：</p><p><img src="http://tutorials.jenkov.com/images/java-nio/overview-channels-buffers.png" alt></p><p>通道和缓冲区有很多种。以下是Java NIO框架里Channel的主要实现类：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>如你所见，这些通道涵盖了UDP + TCP 网络IO和文件IO。</p><p>伴随着这些类还有一些有趣的接口，但是简单起见，在这篇概览里我会先忽略他们。他们会在后续相关文章里再做介绍。</p><p>以下是Java NIO框架里Buffer接口的主要实现类：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>这些Buffer类涵盖了通过IO可以发送的基础数据类型：byte,short,int,long,float,double和字符。</p><p>Java NIO还包含了一个MappedByteBuffer，用于表示内存映射文件。</p><h2 id="选择器">选择器</h2><p>选择器允许单线程处理多个通道。如果你的应用需要维护很多打开的连接（通道），但是每个连接只有少量的流量，这会使你受益。例如，在一个聊天服务器里。</p><p>以下是一个单线程通过一个选择器处理3个通道的示意图 ：</p><p><img src="http://tutorials.jenkov.com/images/java-nio/overview-selectors.png" alt></p><p>要使用选择器，得向它注册通道。然后调用它的select()方法。这个方法会阻塞直到有某个注册通道有事件就绪。一旦这个方法返回，线程就可以开始处理这些事件。事件包括即将到来的连接，数据已收到等。</p><hr><p><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">原文链接</a> 作者：Jakob Jenkov</p>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java NIO 教程</title>
      <link href="/2019/03/09/Java_NIO_Tutorial/"/>
      <url>/2019/03/09/Java_NIO_Tutorial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java NIO（New IO）是Java提供的IO API的另一种实现(jdk1.4+)，这意味着标准的Java IO和网络API不再是唯一的选择方案。相对于标准IO，Java NIO框架提供了一种不同的工作机制来实现流。</p></blockquote><h2 id="通道和缓冲区">通道和缓冲区</h2><p>标准IO基于字节流和字符流来实现。NIO基于通道和缓冲区来实现。数据总是从一个通道读进缓冲区，或者从缓冲区写入通道。</p><h2 id="非阻塞io">非阻塞IO</h2><p>Java NIO可以让你非阻塞地执行IO操作。例如，一个线程可以要求一个通道把数据读进缓冲区，当通道开始往缓冲区里写数据的时候，线程此时可以做其他的事情。一旦数据全部被读进缓冲区，线程再回来接着处理。从缓冲区往通道写数据同理。</p><h2 id="选择器">选择器</h2><p>Java NIO 框架引入了一个名为“选择器”的概念。选择器可以监听多个通道的事件（像：连接被打开，数据到达等等）。这样，单个线程可以监听多个通道的数据。</p><hr><p><a href="http://tutorials.jenkov.com/java-nio/index.html" target="_blank" rel="noopener">原文链接</a> 作者：Jakob Jenkov</p>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper 简介</title>
      <link href="/2019/02/24/zookeeper_introduction/"/>
      <url>/2019/02/24/zookeeper_introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="zookeeper是什么">zookeeper是什么？</h2><p>ZooKeeper是一个分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。</p><h2 id="zookeeper是干吗用的">zookeeper是干吗用的？</h2><ol><li>解决分布式系统数据一致性问题（ACID）。</li><li>协调分布式服务。</li></ol><h2 id="为什么用zookeeper">为什么用ZooKeeper</h2><ol><li>成熟稳定</li><li>开源</li><li>免费</li><li>广泛应用</li></ol><h2 id="zookeeper特点">zookeeper特点</h2><ol><li>一致。</li><li>有头。</li><li>数据树。</li></ol><h2 id="zk选举算法">zk选举算法</h2><ol><li>每个Server会发出一个投票。</li><li>接收来自各个服务的投票。</li><li>处理投票。</li><li>统计投票。</li><li>改变服务器状态。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线无屏幕安装树莓派</title>
      <link href="/2019/02/18/Install_Raspbian_for_Raspberry_Pi/"/>
      <url>/2019/02/18/Install_Raspbian_for_Raspberry_Pi/</url>
      
        <content type="html"><![CDATA[<h2 id="准备材料">准备材料</h2><ul><li>一张micro SD卡，推荐容量8G以上</li><li>一个读卡器</li><li>一台mac电脑</li><li>一个5V 2A的USB Micro接口的电源</li><li>一个下载好的系统镜像</li></ul><h2 id="安装步骤">安装步骤</h2><h3 id="制作系统盘">制作系统盘</h3><ol><li><p>把SD卡插进读卡器，再插进Mac，用自带应用Disk Utility将sd卡格式化为FAT32（FAT或MS-DOS）分区格式。</p></li><li><p>用Etcher将镜像文件烧进sd卡。</p></li><li><p>在sd卡根目录(<code>/Volumes/boot</code>)创建一个<code>wpa_supplicant.conf</code>文件，内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">country</span>=CN</span><br><span class="line"><span class="attribute">ctrl_interface</span>=DIR=/var/run/wpa_supplicant <span class="attribute">GROUP</span>=netdev</span><br><span class="line"><span class="attribute">update_config</span>=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    <span class="attribute">ssid</span>=<span class="string">"WiFi名称"</span></span><br><span class="line">    <span class="attribute">psk</span>=<span class="string">"WiFi密码"</span></span><br><span class="line">    <span class="attribute">key_mgmt</span>=WPA-PSK</span><br><span class="line">    <span class="attribute">priority</span>=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在sd卡根目录创建一个空的ssh文件，这将允许树莓派启用ssh。</p></li></ol><h3 id="ssh免密登录">SSH免密登录</h3><ol><li>将sd卡插入树莓派，接上电源，等指示灯停止闪烁之后，从路由器管理后台查看树莓派的ip地址。</li><li>通过以下命令将电脑公钥发送给树莓派：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-copy-id</span> <span class="selector-tag">pi</span>@<span class="keyword">192</span>.<span class="keyword">168</span>.<span class="keyword">21</span>.<span class="keyword">172</span></span><br></pre></td></tr></table></figure><p>之后将提示输入pi用户的密码，初始密码为：raspberry</p><ol start="3"><li>使用<code>ssh pi@192.168.21.172</code>免密登录服务器</li></ol><h2 id="系统配置">系统配置</h2><h3 id="启用root账号">启用root账号</h3><p>解锁root账号</p><p><code>sudo passwd --unlock root</code></p><p>设置root密码</p><p><code>sudo passwd root</code></p><h3 id="安装vim">安装vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure><p>用命令<code>vim ~/.vimrc</code>打开配置文件，配置语法高亮：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syn <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h3 id="修改主机名">修改主机名</h3><p><code>sudo vim /etc/hostname</code></p><p>替换内容为model3B</p><p><code>sudo vim /etc/hosts</code></p><p>替换<code>127.0.0.1 raspberry</code> 为<code>127.0.0.1 model3B</code></p><h3 id="替换raspbian软件源">替换Raspbian软件源</h3><h4 id="备用原文件">备用原文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure><h4 id="编辑软件源配置">编辑软件源配置</h4><ol><li>用命令<code>sudo vim /etc/apt/sources.list</code>打开配置文件。</li><li>删除原文件内容，用以下内容取代：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><p><em>注：此处示例为</em><em>stretch</em><em>系统，<strong>jessie</strong>和</em><em>wheezy</em><em>类推。</em></p><h4 id="编辑系统源配置">编辑系统源配置</h4><ol><li>编辑系统更新源文件，参考命令：<code>sudo vim /etc/apt/sources.list.d/raspi.list</code>。</li><li>修改首行网址，如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class="line">deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class="line"><span class="comment"># Uncomment line below then 'apt-get update' to enable 'apt-get source'</span></span><br><span class="line"><span class="comment">#deb-src http://archive.raspberrypi.org/debian/ stretch main ui</span></span><br></pre></td></tr></table></figure><h4 id="更新">更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新软件源列表</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment">#更新软件版本</span></span><br><span class="line">sudo apt-get upgrade（耗时操作）</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line"><span class="comment">#更新系统内核</span></span><br><span class="line">sudo rpi-update（耗时操作）</span><br></pre></td></tr></table></figure><h4 id="配置npm镜像">配置npm镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="更改分区文件大小">更改分区文件大小</h3><h4 id="编辑分区文件">编辑分区文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/dphys-swapfile</span><br></pre></td></tr></table></figure><h4 id="修改配置">修改配置</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CONF_SWAPSIZE</span>=<span class="number">1024</span></span><br></pre></td></tr></table></figure><p><em>备注：默认配置为100（M）</em></p><h4 id="重启服务">重启服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/dphys-swapfile stop</span><br><span class="line">sudo /etc/init.d/dphys-swapfile start</span><br></pre></td></tr></table></figure><h4 id="查看内存">查看内存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux入门</title>
      <link href="/2019/02/03/Tmux_Introduction/"/>
      <url>/2019/02/03/Tmux_Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。</p><h2 id="简介">简介</h2><blockquote><p>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。</p></blockquote><h2 id="功能特性">功能特性</h2><blockquote><ul><li><p>一个虚拟终端可以管理多个会话，窗口和面板</p></li><li><p>窗口、面板可以在会话间自由移动，切换</p></li><li><p>丰富灵活的状态行展示</p></li><li><p>支持自定义快捷键，依照个人习惯配置令操作更高效</p></li><li><p>不受断网影响，避免丢失重要工作进度</p></li><li><p>结对编程，方便演示与协作</p></li><li><p>自带复制粘贴缓冲区管理</p></li><li><p>脚本化配置，可配置多种操作环境</p></li></ul></blockquote><h3 id="层次结构">层次结构</h3><p><img src="https://woodenrobot.me/images/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png" alt="img">tmux主要元素分为三层</p><ul><li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li><li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li><li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li></ul><h2 id="安装tmux">安装tmux</h2><h3 id="linux安装">Linux安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><h3 id="mac-os安装">Mac OS安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure><h3 id="基本操作">基本操作</h3><p>首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。</p><h3 id="查询所有会话session">查询所有会话（Session）</h3><p>在命令行输入下列命令查询当前所有会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br></pre></td></tr></table></figure><p>你会发现<code>no server running on /private/tmp/tmux-501/default</code>，这是因为我们还没有创建会话（Session）。</p><h3 id="创建会话session">创建会话（Session)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s session-name</span><br></pre></td></tr></table></figure><p>通过上述命令新建一个有特定名称的会话。<br>一般情况下我们不会使用下列命令创建不指定名字的会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new</span><br></pre></td></tr></table></figure><h3 id="断开会话session">断开会话（Session）</h3><p>使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure><p>或者使用tmux中的快捷键</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+<span class="selector-tag">b</span> d(即先使用Ctrl+b快捷键前缀，然后再按d)</span><br></pre></td></tr></table></figure><h3 id="重新连接会话session">重新连接会话（Session）</h3><p>在命令行输入<code>tmux a</code>即可快速连接第一个所有会话中的第一个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a</span><br></pre></td></tr></table></figure><p>或者通过会话名连接该一个会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t session-name</span><br></pre></td></tr></table></figure><h3 id="关闭会话">关闭会话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">kill</span>-session -t session-name</span><br></pre></td></tr></table></figure><p>当然你也可以通过直接按<code>Ctrl+d</code>关闭会话、窗口或窗格。</p><h3 id="tmux中的快捷键参考">tmux中的快捷键参考</h3><p>注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀<code>Ctrl+b</code>。</p><h4 id="帮助">帮助</h4><ul><li>？ 获取帮助信息</li></ul><h4 id="会话session管理">会话（Session）管理</h4><ul><li><p>s 列出所有会话</p></li><li><p>$ 重命名当前的会话</p></li><li><p>d 断开当前的会话</p></li></ul><h4 id="窗口window管理">窗口（Window）管理</h4><ul><li>c 创建一个新窗口</li><li>, 重命名当前窗口</li><li>w 列出所有窗口</li><li>% 水平分割窗口</li><li>“ 竖直分割窗口</li><li>n 选择下一个窗口</li><li>p 选择上一个窗口</li><li>0~9 选择0~9对应的窗口</li></ul><h4 id="窗格pane管理">窗格（Pane）管理</h4><ul><li>% 创建一个水平窗格</li><li>“ 创建一个竖直窗格</li><li>q 显示窗格的编号</li><li>o 在窗格间切换</li><li>} 与下一个窗格交换位置</li><li>{ 与上一个窗格交换位置</li><li>! 在新窗口中显示当前窗格</li><li>x 关闭当前窗格</li></ul><h4 id="其他">其他</h4><ul><li>t 在当前窗格显示时间</li></ul><hr><p>原文出处：<a href="https://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">Tmux入门教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务介绍</title>
      <link href="/2019/01/20/Microservice_introduction/"/>
      <url>/2019/01/20/Microservice_introduction/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是微服务">什么是微服务</h3><p>微服务就是一些协同工作的小而自治的服务。</p><h3 id="微服务的优点">微服务的优点</h3><ol><li>技术异构性</li><li>弹性</li><li>扩展</li><li>简化部署</li><li>与组织结构相匹配</li><li>可组合性</li><li>对可替代性的优化</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各类软件镜像源配置</title>
      <link href="/2018/11/02/flee_GFW/"/>
      <url>/2018/11/02/flee_GFW/</url>
      
        <content type="html"><![CDATA[<h2 id="homebrew-镜像源进行加速">Homebrew 镜像源进行加速</h2><h3 id="替换-还原-brewgit-仓库地址">替换 / 还原 brew.git 仓库地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换成阿里巴巴的 brew.git 仓库地址: </span></span><br><span class="line">cd "$(brew --repo)" </span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git** </span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原为官方提供的 brew.git 仓库地址 :</span></span><br><span class="line">cd "$(brew --repo)" </span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure><h3 id="替换-还原-homebrew-coregit-仓库地址">替换 / 还原 homebrew-core.git 仓库地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换成阿里巴巴的 homebrew-core.git 仓库地址: </span></span><br><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core" </span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git </span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原为官方提供的 homebrew-core.git 仓库地址 </span></span><br><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core" </span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h3 id="替换-还原-homebrew-bottles-访问地址">替换 / 还原 homebrew-bottles 访问地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ZSH 替换 homebrew-bottles 访问地址: </span></span><br><span class="line">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc </span><br><span class="line">source ~/.zshrc </span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原为官方提供的 homebrew-bottles 访问地址:</span></span><br><span class="line">vim ~/.zshrc </span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 </span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="gradle镜像源">Gradle镜像源</h2><p>打开全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim ~/.gradle/init.gradle</span><br></pre></td></tr></table></figure><p>写入如下配置：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    <span class="attribute">repositories &#123;</span></span><br><span class="line"><span class="attribute">        def ALIYUN_REPOSITORY_URL = 'http</span>://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/nexus/content/groups/public'</span><br><span class="line">        def ALIYUN_JCENTER_URL = 'http://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/nexus/content/repositories/jcenter'</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url = repo<span class="variable">.url</span><span class="variable">.toString</span>()</span><br><span class="line">                if (url<span class="variable">.startsWith</span>('https://repo1<span class="variable">.maven</span><span class="variable">.org</span>/maven2')) &#123;</span><br><span class="line">                    project<span class="variable">.logger</span><span class="variable">.lifecycle</span> "Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL."</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                if (url<span class="variable">.startsWith</span>('https://jcenter<span class="variable">.bintray</span><span class="variable">.com</span>/')) &#123;</span><br><span class="line">                    project<span class="variable">.logger</span><span class="variable">.lifecycle</span> "Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL."</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nodejs-修改镜像源">NodeJS 修改镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置 淘宝镜像源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 使用的 镜像源</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> mirrors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为树莓派安装花生壳客户端</title>
      <link href="/2018/10/15/phddns_for_raspberrypi/"/>
      <url>/2018/10/15/phddns_for_raspberrypi/</url>
      
        <content type="html"><![CDATA[<h2 id="准备">准备</h2><ol><li>先在本地机器从花生壳官网<a href="https://hsk.oray.com/download" target="_blank" rel="noopener">下载</a>树莓派安装包:<code>phddns_3.0.4_systemd.deb</code></li><li>通过如下命令将安装包上传到树莓派：</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~<span class="regexp">/Downloads/install</span>_packages/phddns_3.<span class="number">0</span>.<span class="number">4_</span>systemd.deb pi<span class="variable">@192</span>.<span class="number">168.21</span>.<span class="number">172</span><span class="symbol">:~/</span></span><br></pre></td></tr></table></figure><h2 id="安装">安装</h2><p>通过ssh命令登陆树莓派。<br>通过<code>su</code>命令切换到root用户之后输入如下命令进行安装：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dpkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">phddns_3</span><span class="selector-class">.0</span><span class="selector-class">.4_systemd</span><span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure><p>安装成功后，将显示此树莓派的SN码、默认密码以及远程管理地址。</p><p><em>注意：花生壳安装步骤都需要在管理员（Root）权限下运行。root账号默认是禁用状态，且没有密码。可以通过<code>sudo passwd root</code>设置密码，然后通过<code>sudo passwd --unlock root</code>启用root账号</em></p><p>若执行命令出现以下提示：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg: <span class="literal">warning</span>: <span class="symbol">'ldconfig</span>' <span class="keyword">not</span> found <span class="keyword">in</span> PATH <span class="keyword">or</span> <span class="keyword">not</span> executable</span><br><span class="line">dpkg: <span class="literal">warning</span>: <span class="symbol">'start</span>-stop-daemon' <span class="keyword">not</span> found <span class="keyword">in</span> PATH <span class="keyword">or</span> <span class="keyword">not</span> executable</span><br><span class="line">dpkg: <span class="literal">error</span>: <span class="number">2</span> expected programs <span class="keyword">not</span> found <span class="keyword">in</span> PATH <span class="keyword">or</span> <span class="keyword">not</span> executable</span><br><span class="line"><span class="literal">Note</span>: root<span class="symbol">'s</span> PATH should usually contain /usr/local/sbin, /usr/sbin <span class="keyword">and</span> /sbin</span><br></pre></td></tr></table></figure><p>则在/root/.zshrc里添加以下配置：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/local</span><span class="regexp">/sbin:/usr</span><span class="regexp">/local/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span></span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><p>用生成的SN码和默认密码admin登录花生壳管理后台：<a href="http://b.oray.com" target="_blank" rel="noopener">http://b.oray.com</a><br>登录成功后，开通内网穿透功能。<br><em>注意：若之前已注册过账号，重新安装客户端后SN码会变更，这时候需要用新的SN码登录，然后点击切换账号用旧的账号登录下，新的映射才会生效。</em></p><h2 id="命令">命令</h2><p>查看可用命令列表：<strong>phddns</strong><br>启动：<strong>phddns start</strong><br>停止：<strong>phddns stop</strong><br>重启：<strong>phddns restart</strong><br>查看状态：<strong>phddns status</strong><br>查看版本：<strong>phddns version</strong><br>重置：<strong>phddns reset</strong></p><h2 id="日志">日志</h2><p>花生壳日志文件存放路径：<strong>/var/log/phddns</strong></p><h2 id="卸载">卸载</h2><p>输入如下命令进行卸载：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dpkg -r phddns</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 建站 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspbian安装Vim</title>
      <link href="/2018/10/01/Install_Vim_for_Raspbian/"/>
      <url>/2018/10/01/Install_Vim_for_Raspbian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装">安装：</h2><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install vim -y</span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><p>用命令<code>vim ~/.vimrc</code>打开配置文件，输入以下配置：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">syn <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻墙服务器搭建</title>
      <link href="/2018/09/26/Build_shadowsocks_with_VPS/"/>
      <url>/2018/09/26/Build_shadowsocks_with_VPS/</url>
      
        <content type="html"><![CDATA[<h2 id="登录vps服务器">登录VPS服务器</h2><h2 id="执行如下命令">执行如下命令</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –<span class="keyword">no</span>-check-certificate  http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">shadowsocks</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>根据提示设置翻墙账号密码和端口号以及加密方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 实用技巧</title>
      <link href="/2018/09/25/Practical_Vim/"/>
      <url>/2018/09/25/Practical_Vim/</url>
      
        <content type="html"><![CDATA[<h2 id="模式">模式</h2><h3 id="普通模式">普通模式</h3><h3 id="操作符待决模式">操作符待决模式</h3><h3 id="插入模式">插入模式</h3><h3 id="可视模式">可视模式</h3><h4 id="字符可视模式">字符可视模式</h4><p>v</p><h4 id="行可视模式">行可视模式</h4><p>V</p><h4 id="列可视模式">列可视模式</h4><p><code>&lt;C-v&gt;</code></p><h4 id="选择模式">选择模式</h4><p>用<code>&lt;C-g&gt;</code>切换选择模式和可视模式</p><h3 id="命令模式">命令模式</h3><h2 id="移动">移动</h2><table><thead><tr><th>按键操作</th><th>效果</th></tr></thead><tbody><tr><td>G</td><td>跳到最后一行</td></tr><tr><td>{n}G</td><td>跳到第n行</td></tr><tr><td>gg</td><td>跳到第一行</td></tr><tr><td>ctrl+f</td><td>向前翻一页</td></tr><tr><td>ctrl+b</td><td>向后翻一页</td></tr></tbody></table><h2 id="查找">查找</h2><h3 id="行内查找">行内查找</h3><table><thead><tr><th>按键操作</th><th>效果</th></tr></thead><tbody><tr><td>f{char}</td><td>正向查找</td></tr><tr><td>F{char}</td><td>反向查找</td></tr><tr><td>;</td><td>重复上次查找命令</td></tr><tr><td>,</td><td>反转方向重复上次查找命令</td></tr></tbody></table><h3 id="全文查找">全文查找</h3><table><thead><tr><th>按键操作</th><th>效果</th></tr></thead><tbody><tr><td>/{string}</td><td>根据字符串检索</td></tr><tr><td>n</td><td>跳转到下一处匹配</td></tr><tr><td>N</td><td>跳转到上一处匹配</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用快捷键</title>
      <link href="/2018/09/15/IDEA_hot_keys/"/>
      <url>/2018/09/15/IDEA_hot_keys/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl+h</td><td>查看类继承结构</td></tr><tr><td>command+7</td><td>查看结构</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspbian安装Nginx</title>
      <link href="/2018/09/11/Install_Nginx_for_%20Raspbian/"/>
      <url>/2018/09/11/Install_Nginx_for_%20Raspbian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装">安装：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install nginx -y</span><br></pre></td></tr></table></figure><h2 id="用法">用法</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>nginx</span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><p>默认配置文件为<code>nginx.conf</code>，所在目录：<code>/etc/nginx</code>  (mac上为：<code>/usr/local/etc/nginx</code>)<br>该目录下还有一个<code>conf.d</code>文件夹，可以在里面添加子配置文件。<br><em>注意：子配置文件需要以<code>.conf</code>结尾。<br>每次改完配置文件需要用<code>sudo service nginx reload</code>命令让nginx重新加载才会生效，不需要重启。</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/2018/08/28/Linux_command/"/>
      <url>/2018/08/28/Linux_command/</url>
      
        <content type="html"><![CDATA[<ul><li>查看端口占用：<code>netstat -ntulp |grep 80</code></li><li>查看程序进程：<code>ps aux | grep nginx</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实施看板方法</title>
      <link href="/2018/06/23/Implement_Kanban/"/>
      <url>/2018/06/23/Implement_Kanban/</url>
      
        <content type="html"><![CDATA[<h2 id="价值流映射">价值流映射</h2><h3 id="定义控制起点和终点">定义控制起点和终点</h3><p>为使工作流程可视化（开发流程，测试流程，部署流程），有必要确定哪里是进行过程可视化的起点和终点，确定协作边界之后，只需要求自己的团队对在制品实施限制即可。</p><h3 id="工作项类型">工作项类型</h3><p>需求、功能特性、用户故事、用例、变更请求、产品缺陷、维护工作、重构、错误、改进建议、受阻问题等。<br>可根据来源对工作项类型命名，如：销售前线需求、战略规划需求</p><h3 id="绘制卡片墙">绘制卡片墙</h3><p>对工作流进行建模，根据活动执行次序画出多道分栏，对于活动步骤，把分栏分成进行中和已完成两列，加入缓冲区或等待队列</p><h3 id="请求分析">请求分析</h3><p>工作项类型大致分为四种：变更请求（新功能）、产品缺陷、产品文本变更（PTC）、bug（已发现的缺陷）。对每种类型的工作项，都要对其进行请求分析，掌握请求平均到达率及其变化的分布状况，作为调整看板系统设计的依据。</p><h3 id="根据请求分配产能">根据请求分配产能</h3><p>根据工作项类型横向划分泳道，制定产能分配方案。比如：</p><table><thead><tr><th>变更请求</th><th>重构</th><th>产品文本变更</th></tr></thead><tbody><tr><td>60%</td><td>30%</td><td>10%</td></tr></tbody></table><h3 id="工作项卡片详解">工作项卡片详解</h3><p>唯一标识号码，标题，创建日期，交付日期，经办人</p><h3 id="电子跟踪">电子跟踪</h3><p>远程办公，异地办公协作必备，例：Jira</p><h3 id="设置输入和输出边界">设置输入和输出边界</h3><p>输入点：ER（工程就绪） 输出点：部署到生产环境</p><h3 id="应对并行活动">应对并行活动</h3><p>开发、测试开发，垂直裂解</p><h3 id="应对次序无关的活动">应对次序无关的活动</h3><p>垂直裂解</p><h2 id="使用看板进行协调">使用看板进行协调</h2><h3 id="可视化控制和拉动">可视化控制和拉动</h3><p>每一栏设置在制品限额，如果某一栏上卡片数量低于指定的限额，则发出一个拉（pull）信号</p><h3 id="电子跟踪">电子跟踪</h3><p>当看板限额超出时，可视化展现。</p><h3 id="每日站立会议">每日站立会议</h3><p>站立会议是来自敏捷开发过程的基础实践。通常在每天早上的工作开始之前举行。轮流询问三个问题：昨天做了什么？今天计划做什么？有什么困难或者需要帮助？<br>采用看板之后提问环节可以省略，焦点放在工作流动上，引导者通常会是项目经理或者产品经理，做看板走读，惯例做法从后往前。<strong>重点关注受阻或延期的工作项</strong>，对已经好几天没挪动的工作项，要重点提问。10分钟内结束站立会</p><h3 id="会后讨论">会后讨论</h3><p>随着看板方法的应用而涌现出来的自发行为，通常2～3人组成讨论小组，团队成员想讨论他们心中的一些问题：受阻问题，技术设计问题，架构问题，过程相关问题。</p><h3 id="队列填充会议">队列填充会议</h3><p>目的：进行优先级排序，为一个单独的价值流、系统或项目填充看板系统的输入队列。<br>通常，队列填充会议是在一组业务代表或者产品负责人间召开，建议这些会议以固定频率定期召开，推荐的间隔频率以每周一次为好，能够降低召开会议所需的协调成本。除了产品负责人，理想情况下，要保证一下角色也能出席会议：项目经理、开发经理或者测试经理、技术或数据架构师、运维、业务分析师。</p><h3 id="发布规划会议">发布规划会议</h3><h3 id="鉴别分类">鉴别分类</h3><h2 id="建立交付节奏">建立交付节奏</h2><h2 id="建立输入节奏">建立输入节奏</h2><h2 id="设置在制品限额">设置在制品限额</h2><h2 id="建立服务水平协议">建立服务水平协议</h2><h2 id="度量和管理报告">度量和管理报告</h2><h2 id="使用两层系统扩展看板">使用两层系统扩展看板</h2><h2 id="运营回顾">运营回顾</h2><h2 id="启动看板变革">启动看板变革</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 持续交付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins安装教程</title>
      <link href="/2018/03/31/Install_Jenkins/"/>
      <url>/2018/03/31/Install_Jenkins/</url>
      
        <content type="html"><![CDATA[<p>以下介绍在Debian或者Ubuntu系统上安装Jenkins</p><h2 id="添加key">添加key</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - http://pkg.jenkins-ci<span class="meta">.org</span>/debian/jenkins-ci<span class="meta">.org</span>.key \</span><br><span class="line">| sudo apt-key <span class="keyword">add</span> -</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">echo</span> <span class="string">"deb http://pkg.jenkins-ci.org/debian binary/"</span> &gt; \</span><br><span class="line">/etc/apt/sources.<span class="keyword">list</span>.d/jenkins.<span class="keyword">list</span></span><br></pre></td></tr></table></figure><h2 id="更新debian的包仓库">更新Debian的包仓库</h2><p><code>sudo aptitude update</code></p><h2 id="通过aptitude安装jenkins">通过aptitude安装Jenkins</h2><p><code>sudo aptitude install -y jenkins</code></p><h2 id="启动jenkins">启动Jenkins</h2><p><code>sudo /etc/init.d/jenkins start</code></p><h2 id="停止jenkins">停止Jenkins</h2><p><code>sudo /etc/init.d/jenkins stop</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 敏捷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读懂shell脚本</title>
      <link href="/2018/02/14/understand_shell/"/>
      <url>/2018/02/14/understand_shell/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> -e</span><br></pre></td></tr></table></figure><p>这句语句告诉shell如果任何语句的执行结果不是true则应该退出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装zsh</title>
      <link href="/2018/02/06/install_zsh/"/>
      <url>/2018/02/06/install_zsh/</url>
      
        <content type="html"><![CDATA[<p>查看当前系统可用的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>shells</span><br></pre></td></tr></table></figure><p>查看当前用户使用的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>切换当前用户使用的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><h2 id="安装zsh">安装zsh</h2><p>Redhat Linux</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure><p>Ubuntu Linux</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install zsh</span><br></pre></td></tr></table></figure><h2 id="安装oh-my-zsh">安装oh my zsh</h2><p>确保你已经安装了git。<code>sudo apt-get install git</code></p><p>然后执行以下命令即可进行自动安装:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh<span class="regexp">/raw/m</span>aster<span class="regexp">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure><p>部分配置如下</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> cls=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="comment"># 推荐主题：michelebologna、fishy，更多主题可翻看https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br></pre></td></tr></table></figure><h2 id="插件">插件</h2><h3 id="autojump">autojump</h3><p>下载autojump源码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>://github.com/joelthelion/autojump.git</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> autojump</span><br><span class="line"><span class="string">./install.py</span></span><br></pre></td></tr></table></figure><p>将以下代码加入.zshrc</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s <span class="regexp">/home/</span>pi<span class="regexp">/.autojump/</span>etc<span class="regexp">/profile.d/</span>autojump.sh ]] &amp;&amp; <span class="keyword">source</span> <span class="regexp">/home/</span>pi<span class="regexp">/.autojump/</span>etc<span class="regexp">/profile.d/</span>autojump.sh</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.zshrc</code>使配置生效</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
